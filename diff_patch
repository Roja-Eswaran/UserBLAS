79d78
< #include<abt.h>
98,100d96
< //#define ABT_MUTEX_INITIALIZER { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }#
< #define DEFAULT_NUM_XSTREAMS MAX_CPU_NUMBER
< #define  DEFAULT_NUM_THREADS MAX_CPU_NUMBER
121d116
< 
123,124d117
< /*ABT_mutex_memory  server_lock_memory    = ABT_MUTEX_INITIALIZER;
< ABT_mutex server_lock = ABT_MUTEX_MEMORY_GET_HANDLE(&server_lock_memory);*/
125a119,120
> #elif defined(USE_PTHREAD_SPINLOCK)
> static pthread_spinlock_t  server_lock = 0;
133,136c128
< //static pthread_t       blas_threads [MAX_CPU_/bNUMBER];
< static ABT_xstream      xstreams [MAX_CPU_NUMBER];
< static ABT_pool         pools    [MAX_CPU_NUMBER];
< static ABT_thread       blas_threads [MAX_CPU_NUMBER];
---
> static pthread_t       blas_threads [MAX_CPU_NUMBER];
147,152c139,140
< //  ABT_mutex	 lock;
<   //ABT_cond	 wakeup;
<   pthread_mutex_t        lock;
<   pthread_cond_t         wakeup;
< } thread_status_t;
< 
---
>   pthread_mutex_t	 lock;
>   pthread_cond_t	 wakeup;
153a142
> } thread_status_t;
162a152,153
> 
> 
342c333
< ABT_thread thread = (thread_idx == active_threads - 1)
---
>   pthread_t thread = (thread_idx == active_threads - 1)
396,397c387
< 	ABT_thread_yield();//Rose 
< 	//YIELDING;
---
> 	YIELDING;
403,404c393
< 	    //ABT_mutex_lock  (thread_status[cpu].lock);
< 	     pthread_mutex_lock  (&thread_status[cpu].lock);
---
> 	    pthread_mutex_lock  (&thread_status[cpu].lock);
413,414c402
< 	      //ABT_cond_wait(thread_status[cpu].wakeup, thread_status[cpu].lock);
< 	     pthread_cond_wait(&thread_status[cpu].wakeup, &thread_status[cpu].lock);
---
> 	      pthread_cond_wait(&thread_status[cpu].wakeup, &thread_status[cpu].lock);
416,417c404
< 	    //ABT_mutex_unlock(thread_status[cpu].lock);
< 	     pthread_mutex_unlock(&thread_status[cpu].lock);
---
> 	    pthread_mutex_unlock(&thread_status[cpu].lock);
626d612
<  //printf("Init function\n");
631c617
<   //Rose: pthread_attr_t attr;
---
>   pthread_attr_t attr;
635,636c621,622
< //Rose:
< /*#ifdef NEED_STACKATTR
---
> 
> #ifdef NEED_STACKATTR
640c626
< #endif*/
---
> #endif
642,643c628
<   //ABT_mutex_lock(server_lock);
<    LOCK_COMMAND(&server_lock);
---
>   LOCK_COMMAND(&server_lock);
653,663d637
<     int argc; char **argv;
<     
<     
<      ABT_init(argc,argv);
<      ABT_xstream_self(&xstreams[0]);
<         for (i = 1; i < blas_num_threads - 1 ; i++) {
<                 ABT_xstream_create(ABT_SCHED_NULL, &xstreams[i]);
<         }
<         for ( i = 0; i < blas_num_threads  - 1; i++) {
<                 ABT_xstream_get_main_pools(xstreams[i], 1, &pools[i]);
<         }
665,666d638
<    //printf("BLAS_NUM_THREADS INSIDE BLAS_INIT:%d\n", DEFAULT_NUM_THREADS);
<    // Roja: Replace blas_num_threads with default);
669d640
< 	int pool_id=i;
673,675c644
<       //ABT_mutex_create(&thread_status[i].lock);
<       //ABT_cond_create (&thread_status[i].wakeup);
<        pthread_mutex_init(&thread_status[i].lock, NULL);
---
>       pthread_mutex_init(&thread_status[i].lock, NULL);
678d646
< 
680,686c648,649
<       //ret=pthread_create(&blas_threads[i], &attr,
< 	//	     &blas_thread_server, (void *)i);
< 	  
<           
< 	  ret=ABT_thread_create(pools[pool_id],(void *)blas_thread_server, (void *)i, &attr,
<                      &blas_threads[i]);
< 
---
>       ret=pthread_create(&blas_threads[i], &attr,
> 		     &blas_thread_server, (void *)i);
688,692c651,652
<       //ret=pthread_create(&blas_threads[i], NULL,
< 	//
< 	//	     &blas_thread_server, (void *)i);
< 	  ret=ABT_thread_create(pools[pool_id],(void *)blas_thread_server, (void *)i, ABT_THREAD_ATTR_NULL,
<                      &blas_threads[i]);
---
>       ret=pthread_create(&blas_threads[i], NULL,
> 		     &blas_thread_server, (void *)i);
694d653
< 
710d668
<       //printf("POOL ID:%d\n", pool_id);
712,713c670,671
< //Rose
< /*#ifdef MONITOR
---
> 
> #ifdef MONITOR
716c674
< #endif*/
---
> #endif
719d676
<    // printf("BLAS SERVER INIT FINISH\n");
722,723d678
<   //ABT_mutex_unlock(server_lock);
<   //printf("RETURNED from blas_server init\n");
724a680
> 
739c695
<   //printf("exec_blas_async:%d\n",pos);
---
> 
742,744c698
<   if (unlikely(blas_server_avail == 0)) {blas_thread_init();
< 	
<   }
---
>   if (unlikely(blas_server_avail == 0)) blas_thread_init();
833,834c787
< 	//ABT_mutex_lock  (thread_status[pos].lock);
< 	 pthread_mutex_lock  (&thread_status[pos].lock);
---
> 	pthread_mutex_lock  (&thread_status[pos].lock);
845,846c798
< 	    //ABT_cond_signal(thread_status[pos].wakeup);
< 	     pthread_cond_signal(&thread_status[pos].wakeup);
---
> 	    pthread_cond_signal(&thread_status[pos].wakeup);
850d801
< 	 // ABT_mutex_unlock(thread_status[pos].lock);
856c807
< // printf("Not reurning from blas_async?????????????\n");
---
> 
861d811
< 	//printf("async_wait:%d\n",num);
870,871c820
< 	ABT_thread_yield();
< 	//YIELDING;
---
> 	YIELDING;
890c839
<   //printf("Exec blas:%d\n",num);
---
> 
893,895c842
<   if (unlikely(blas_server_avail == 0)) {blas_thread_init();
< 	
<   }
---
>   if (unlikely(blas_server_avail == 0)) blas_thread_init();
921d867
<   //printf("retunred from exec_blas_async\n");
931d876
< 	  //printf("LEAGCY EXEC\n");
935d879
< 	   // printf("PTHREAD ROUNTINE\n");
938c882
<     } else{
---
>     } else
941,942c885
<      // printf("Returned from exec_blas\n");
<     }
---
> 
949c892
<   //  printf("Async_Wait???\n");
---
> 
959c902
<   //printf("Returning ?????????????????????????? from exec blas\n");
---
> 
966,968c909
<   //printf("Inside setnum threads:%d\n",num_threads);	
<   //printf("Blas Number threads:%d\n",blas_num_threads);
<  //printf("gotsetnumblas_threads\n");
---
> 
971,972c912
<   if (unlikely(blas_server_avail == 0)){ blas_thread_init();
<  }
---
>   if (unlikely(blas_server_avail == 0)) blas_thread_init();
975a916
> 
987a929
> 
992,993c934
<     //ABT_mutex_lock(server_lock);
<      LOCK_COMMAND(&server_lock);
---
>     LOCK_COMMAND(&server_lock);
997,1007d937
<         /*ABT_xstream_self(&xstreams[0]);
<         for (int i = 1; i < DEFAULT_NUM_XSTREAMS; i++) {
<                 ABT_xstream_create(ABT_SCHED_NULL, &xstreams[i]);
<         }
<         for (int i = 0; i < DEFAULT_NUM_XSTREAMS; i++) {
<                 ABT_xstream_get_main_pools(xstreams[i], 1, &pools[i]);
<         }*/
< 
< 
< 
< 
1009c939
< 	int pool_id=i;
---
> 
1013,1014d942
<       //ABT_mutex_create(&thread_status[i].lock);
<       //ABT_cond_create (&thread_status[i].wakeup);
1018d945
< 
1020,1024c947,948
< //      pthread_create(&blas_threads[i], &attr,
< //		     &blas_thread_server, (void *)i);
<       ABT_thread_create(pools[pool_id],(void *)blas_thread_server, (void *)i, &attr,
<                      &blas_threads[i]);
< 
---
>       pthread_create(&blas_threads[i], &attr,
> 		     &blas_thread_server, (void *)i);
1026,1030c950,951
<   //    pthread_create(&blas_threads[i], NULL,
< //		     &blas_thread_server, (void *)i);
< 		     ABT_thread_create(pools[pool_id],(void *)blas_thread_server, (void *)i, ABT_THREAD_ATTR_NULL,
<                      &blas_threads[i]);
< 
---
>       pthread_create(&blas_threads[i], NULL,
> 		     &blas_thread_server, (void *)i);
1036d956
<     //ABT_mutex_unlock(server_lock);
1038d957
< 
1052c971
<   //set parametes for different number of threads.
---
>   //set parameters for different number of threads.
1057d975
<  //printf("Completed goto_blas_setnum\n");
1061,1062d978
< 	//DEFAULT_NUM_THREADS=num_threads;
< 	//num_threads=DEFAULT_NUM_THREADS;
1071d986
< 	//printf("gotoblas_pthread\n");
1109c1024
< //printf("Starting to shutdown?\n");
---
> 
1114d1028
<   //ABT_mutex_lock(server_lock);
1117,1118d1030
<  // printf("BLAS THREADS INSIDE SGUTDOWN:%d\n",blas_num_threads);
<   //Rose
1122d1033
<     //ABT_mutex_lock (thread_status[i].lock);
1127,1130c1038,1040
<     //ABT_cond_signal (thread_status[i].wakeup);
<      pthread_cond_signal(&thread_status[i].wakeup);
<      pthread_mutex_unlock(&thread_status[i].lock);
<     //ABT_mutex_unlock(thread_status[i].lock);
---
>     pthread_cond_signal (&thread_status[i].wakeup);
> 
>     pthread_mutex_unlock(&thread_status[i].lock);
1133,1140d1042
< // Changed the thread count : Roja
<  
<  // printf("Mutex Freed\n");
<   for (i = 0; i < blas_num_threads - 1; i++) {
< 	  ABT_thread_join(blas_threads[i]);
< 	  ABT_thread_free(&blas_threads[i]);
<   }
<   //printf("Thread freed\n");
1142,1146c1044,1045
<   
<   //printf("Mutex Freed\n");
<   for (i = 1; i < blas_num_threads - 1 ; i++) {
< 	  ABT_xstream_join(xstreams[i]);
< 	  ABT_xstream_free(&xstreams[i]);
---
>   for(i = 0; i < blas_num_threads - 1; i++){
>     pthread_join(blas_threads[i], NULL);
1148,1149c1047
<   //printf("Stream Freed\n");
<    //ABT_finalize();
---
> 
1151,1169c1049,1055
< 	 // ABT_mutex_free(&thread_status[i].lock);
< 	 // ABT_cond_free (&thread_status[i].wakeup);
< 	  pthread_mutex_destroy(&thread_status[i].lock);
<           pthread_cond_destroy (&thread_status[i].wakeup);
< 
<   } 
<   
<    
<   ABT_finalize();
<  // printf("Mutex Freed\n");
<   //free(xstreams);
<   //free(pools);
<   //free(blas_threads);
< 
<   //printf("ABT Finalized\n");
< 
< /*#ifdef NEED_STACKATTR
< n  pthread_attr_destory(&attr);
< #endif*/
---
>     pthread_mutex_destroy(&thread_status[i].lock);
>     pthread_cond_destroy (&thread_status[i].wakeup);
>   }
> 
> #ifdef NEED_STACKATTR
>   pthread_attr_destory(&attr);
> #endif
1173d1058
<  // ABT_mutex_unlock(server_lock);
1174a1060
> 
