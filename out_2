79d78
< #include<abt.h>
98,100d96
< //#define ABT_MUTEX_INITIALIZER { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }#
< #define DEFAULT_NUM_XSTREAMS MAX_CPU_NUMBER
< #define  DEFAULT_NUM_THREADS MAX_CPU_NUMBER
121d116
< 
123,124d117
< /*ABT_mutex_memory  server_lock_memory    = ABT_MUTEX_INITIALIZER;
< ABT_mutex server_lock = ABT_MUTEX_MEMORY_GET_HANDLE(&server_lock_memory);*/
135,138c128
< //static pthread_t       blas_threads [MAX_CPU_/bNUMBER];
< static ABT_xstream      xstreams [MAX_CPU_NUMBER];
< static ABT_pool         pools    [MAX_CPU_NUMBER];
< static ABT_thread       blas_threads [MAX_CPU_NUMBER];
---
> static pthread_t       blas_threads [MAX_CPU_NUMBER];
149,154c139,140
< //  ABT_mutex	 lock;
<   //ABT_cond	 wakeup;
<   pthread_mutex_t        lock;
<   pthread_cond_t         wakeup;
< } thread_status_t;
< 
---
>   pthread_mutex_t	 lock;
>   pthread_cond_t	 wakeup;
155a142
> } thread_status_t;
164a152,153
> 
> 
174c163
< 
---
> printf("Monitor is defined\n");
178c167
< static ABT_thread_t      monitor_thread;
---
> static pthread_t      monitor_thread;
344d332
<  ABT_thread *thread;
346,349c334,336
<   if (thread_idx == active_threads - 1)
<        ABT_thread_self(thread);
<   else
<       *thread=blas_threads[thread_idx];
---
>   pthread_t thread = (thread_idx == active_threads - 1)
>       ? pthread_self()
>       : blas_threads[thread_idx];
401,402c388
< 	ABT_thread_yield();//Rose 
< 	//YIELDING;
---
> 	YIELDING;
408,409c394
< 	    //ABT_mutex_lock  (thread_status[cpu].lock);
< 	     pthread_mutex_lock  (&thread_status[cpu].lock);
---
> 	    pthread_mutex_lock  (&thread_status[cpu].lock);
418,419c403
< 	      //ABT_cond_wait(thread_status[cpu].wakeup, thread_status[cpu].lock);
< 	     pthread_cond_wait(&thread_status[cpu].wakeup, &thread_status[cpu].lock);
---
> 	      pthread_cond_wait(&thread_status[cpu].wakeup, &thread_status[cpu].lock);
421,422c405
< 	    //ABT_mutex_unlock(thread_status[cpu].lock);
< 	     pthread_mutex_unlock(&thread_status[cpu].lock);
---
> 	    pthread_mutex_unlock(&thread_status[cpu].lock);
635c618
<  ABT_thread_attr *attr;
---
>   pthread_attr_t attr;
639,642c622,626
<   #ifdef NEED_STACKATTR
<   ABTI_thread_attr_init(&attr,NULL,0x1000U, ABTI_THREAD_TYPE_MEM_MEMPOOL_DESC, ABT_FALSE);
<  // pthread_attr_setguardsize(&attr,  0x1000U);
<   //pthread_attr_setstacksize( &attr, 0x1000U);
---
> 
> #ifdef NEED_STACKATTR
>   pthread_attr_init(&attr);
>   pthread_attr_setguardsize(&attr,  0x1000U);
>   pthread_attr_setstacksize( &attr, 0x1000U);
645,646c629
<   //ABT_mutex_lock(server_lock);
<    LOCK_COMMAND(&server_lock);
---
>   LOCK_COMMAND(&server_lock);
656,666d638
<     int argc; char **argv;
<     
<     
<      ABT_init(argc,argv);
<      ABT_xstream_self(&xstreams[0]);
<         for (i = 1; i < blas_num_threads - 1 ; i++) {
<                 ABT_xstream_create(ABT_SCHED_NULL, &xstreams[i]);
<         }
<         for ( i = 0; i < blas_num_threads  - 1; i++) {
<                 ABT_xstream_get_main_pools(xstreams[i], 1, &pools[i]);
<         }
668d639
<   
671d641
< 	int pool_id=i;
675,677c645
<       //ABT_mutex_create(&thread_status[i].lock);
<       //ABT_cond_create (&thread_status[i].wakeup);
<        pthread_mutex_init(&thread_status[i].lock, NULL);
---
>       pthread_mutex_init(&thread_status[i].lock, NULL);
680d647
< 
682,688c649,650
<       //ret=pthread_create(&blas_threads[i], &attr,
< 	//	     &blas_thread_server, (void *)i);
< 	  
<           
< 	  ret=ABT_thread_create(pools[pool_id],(void *)blas_thread_server, (void *)i, &attr,
<                      &blas_threads[i]);
< 
---
>       ret=pthread_create(&blas_threads[i], &attr,
> 		     &blas_thread_server, (void *)i);
690,694c652,653
<       //ret=pthread_create(&blas_threads[i], NULL,
< 	//
< 	//	     &blas_thread_server, (void *)i);
< 	  ret=ABT_thread_create(pools[pool_id],(void *)blas_thread_server, (void *)i, ABT_THREAD_ATTR_NULL,
<                      &blas_threads[i]);
---
>       ret=pthread_create(&blas_threads[i], NULL,
> 		     &blas_thread_server, (void *)i);
696d654
< 
712d669
<       
716c673
<     ABT_thread_create(&monitor_thread, NULL,
---
>     pthread_create(&monitor_thread, NULL,
721d677
<    
724d679
<   //ABT_mutex_unlock(server_lock);
725a681
> 
740c696
<   
---
> 
743,745c699
<   if (unlikely(blas_server_avail == 0)) {blas_thread_init();
< 	
<   }
---
>   if (unlikely(blas_server_avail == 0)) blas_thread_init();
834,835c788
< 	//ABT_mutex_lock  (thread_status[pos].lock);
< 	 pthread_mutex_lock  (&thread_status[pos].lock);
---
> 	pthread_mutex_lock  (&thread_status[pos].lock);
846,847c799
< 	    //ABT_cond_signal(thread_status[pos].wakeup);
< 	     pthread_cond_signal(&thread_status[pos].wakeup);
---
> 	    pthread_cond_signal(&thread_status[pos].wakeup);
851d802
< 	 // ABT_mutex_unlock(thread_status[pos].lock);
856a808
> 
861d812
< 
870,871c821
< 	ABT_thread_yield();
< 	//YIELDING;
---
> 	YIELDING;
889a840
> 
892,894c843
<   if (unlikely(blas_server_avail == 0)) {blas_thread_init();
< 	
<   }
---
>   if (unlikely(blas_server_avail == 0)) blas_thread_init();
934c883
<     } else{
---
>     } else
937c886
<     }
---
> 
943a893
> 
952a903
> 
958a910
> 
961,962c913
<   if (unlikely(blas_server_avail == 0)){ blas_thread_init();
<  }
---
>   if (unlikely(blas_server_avail == 0)) blas_thread_init();
965a917
> 
977a930
> 
982,983c935
<     //ABT_mutex_lock(server_lock);
<      LOCK_COMMAND(&server_lock);
---
>     LOCK_COMMAND(&server_lock);
987,997d938
<         /*ABT_xstream_self(&xstreams[0]);
<         for (int i = 1; i < DEFAULT_NUM_XSTREAMS; i++) {
<                 ABT_xstream_create(ABT_SCHED_NULL, &xstreams[i]);
<         }
<         for (int i = 0; i < DEFAULT_NUM_XSTREAMS; i++) {
<                 ABT_xstream_get_main_pools(xstreams[i], 1, &pools[i]);
<         }*/
< 
< 
< 
< 
999c940
< 	int pool_id=i;
---
> 
1003,1004d943
<       //ABT_mutex_create(&thread_status[i].lock);
<       //ABT_cond_create (&thread_status[i].wakeup);
1008d946
< 
1010,1014c948,949
< //      pthread_create(&blas_threads[i], &attr,
< //		     &blas_thread_server, (void *)i);
<       ABT_thread_create(pools[pool_id],(void *)blas_thread_server, (void *)i, &attr,
<                      &blas_threads[i]);
< 
---
>       pthread_create(&blas_threads[i], &attr,
> 		     &blas_thread_server, (void *)i);
1016,1020c951,952
<   //    pthread_create(&blas_threads[i], NULL,
< //		     &blas_thread_server, (void *)i);
< 		     ABT_thread_create(pools[pool_id],(void *)blas_thread_server, (void *)i, ABT_THREAD_ATTR_NULL,
<                      &blas_threads[i]);
< 
---
>       pthread_create(&blas_threads[i], NULL,
> 		     &blas_thread_server, (void *)i);
1026d957
<     //ABT_mutex_unlock(server_lock);
1028d958
< 
1042c972
<   //set parametes for different number of threads.
---
>   //set parameters for different number of threads.
1050,1051d979
< 	//DEFAULT_NUM_THREADS=num_threads;
< 	//num_threads=DEFAULT_NUM_THREADS;
1096a1025
> 
1101d1029
<   //ABT_mutex_lock(server_lock);
1104d1031
< 
1108d1034
<     //ABT_mutex_lock (thread_status[i].lock);
1113,1116c1039,1041
<     //ABT_cond_signal (thread_status[i].wakeup);
<      pthread_cond_signal(&thread_status[i].wakeup);
<      pthread_mutex_unlock(&thread_status[i].lock);
<     //ABT_mutex_unlock(thread_status[i].lock);
---
>     pthread_cond_signal (&thread_status[i].wakeup);
> 
>     pthread_mutex_unlock(&thread_status[i].lock);
1118,1123d1042
<   }
< // Changed the thread count : Roja
<  
<   for (i = 0; i < blas_num_threads - 1; i++) {
< 	  ABT_thread_join(blas_threads[i]);
< 	  ABT_thread_free(&blas_threads[i]);
1126,1128c1045,1046
<   for (i = 1; i < blas_num_threads - 1 ; i++) {
< 	  ABT_xstream_join(xstreams[i]);
< 	  ABT_xstream_free(&xstreams[i]);
---
>   for(i = 0; i < blas_num_threads - 1; i++){
>     pthread_join(blas_threads[i], NULL);
1130c1048
<    //ABT_finalize();
---
> 
1132,1140c1050,1052
< 	 // ABT_mutex_free(&thread_status[i].lock);
< 	 // ABT_cond_free (&thread_status[i].wakeup);
< 	  pthread_mutex_destroy(&thread_status[i].lock);
<           pthread_cond_destroy (&thread_status[i].wakeup);
< 
<   } 
<   
<    
<   ABT_finalize();
---
>     pthread_mutex_destroy(&thread_status[i].lock);
>     pthread_cond_destroy (&thread_status[i].wakeup);
>   }
1143c1055
<  ABT_attr_free(&attr);
---
>   pthread_attr_destory(&attr);
1148d1059
<  // ABT_mutex_unlock(server_lock);
1149a1061
> 
