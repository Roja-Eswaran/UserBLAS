cscope 15 $HOME/UserBLAS/UserBLAS/driver/others               0000736484
	@abs.c

39 
	~"comm⁄.h
"

41 
Ábs
();

42 
sqπ
();

44 #ifde‡
NEED_F2CCONV


47 
	gFLOAT


49 
	$CNAME
(
FLOAT
 *
z
){

51 
FLOAT
 
ªÆ
 = 
z
[0];

52 
FLOAT
 
imag
 = 
z
[1];

53 
ãmp
;

55 
ªÆ
 = 
	`Ábs
(real);

56 
imag
 = 
	`Ábs
(imag);

58 if(
imag
 > 
ªÆ
){

59 
ãmp
 = 
ªÆ
;

60 
ªÆ
 = 
imag
;

61 
imag
 = 
ãmp
;

64 i‡(
imag
 =0.Ë 
ªÆ
;

66 
ãmp
 = 
imag
/
ªÆ
;

67 
ãmp
 = 
ªÆ
 * 
	`sqπ
(1.0 +Åemp*temp);

69  
ãmp
;

71 
	}
}

	@blas_l1_thread.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~"comm⁄.h
"

43 
	$bœs_Àvñ1_thªad
(
mode
, 
BLASLONG
 
m
, BLASLONG 
n
, BLASLONG 
k
, *
Æpha
,

44 *
a
, 
BLASLONG
 
lda
,

45 *
b
, 
BLASLONG
 
ldb
,

46 *
c
, 
BLASLONG
 
ldc
, (*
fun˘i⁄
)(), 
¡hªads
){

48 
bœs_queue_t
 
queue
[
MAX_CPU_NUMBER
];

49 
bœs_¨g_t
 
¨gs
 [
MAX_CPU_NUMBER
];

51 
BLASLONG
 
i
, 
width
, 
a°ride
, 
b°ride
;

52 
num_˝u
, 
ˇlc_ty≥_a
, 
ˇlc_ty≥_b
;

54 
mode
 & 
BLAS_PREC
) {

55 
BLAS_INT8
 :

56 
BLAS_BFLOAT16
:

57 
BLAS_SINGLE
 :

58 
BLAS_DOUBLE
 :

59 
BLAS_XDOUBLE
 :

60 
ˇlc_ty≥_a
 = 
ˇlc_ty≥_b
 = (
mode
 & 
BLAS_PREC
Ë+ ((modê& 
BLAS_COMPLEX
) != 0);

62 
BLAS_STOBF16
 :

63 
ˇlc_ty≥_a
 = 2 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

64 
ˇlc_ty≥_b
 = 1 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

66 
BLAS_DTOBF16
 :

67 
ˇlc_ty≥_a
 = 3 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

68 
ˇlc_ty≥_b
 = 1 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

70 
BLAS_BF16TOS
 :

71 
ˇlc_ty≥_a
 = 1 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

72 
ˇlc_ty≥_b
 = 2 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

74 
BLAS_BF16TOD
 :

75 
ˇlc_ty≥_a
 = 1 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

76 
ˇlc_ty≥_b
 = 3 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

79 
ˇlc_ty≥_a
 = 
ˇlc_ty≥_b
 = 0;

83 if(!(
mode
 & 
BLAS_PTHREAD
)Ëmodê|
BLAS_LEGACY
;

85 
i
 = 0; i < 
¡hªads
; i++Ë
	`bœs_queue_öô
(&
queue
[i]);

87 
num_˝u
 = 0;

88 
i
 = 
m
;

90 
i
 > 0){

93 
width
 = 
	`bœs_quickdivide
(
i
 + 
¡hªads
 - 
num_˝u
 - 1,

94 
¡hªads
 - 
num_˝u
);

96 
i
 -
width
;

97 i‡(
i
 < 0Ë
width
 = width + i;

99 
a°ride
 = 
width
 * 
lda
;

101 i‡(!(
mode
 & 
BLAS_TRANSB_T
)) {

102 
b°ride
 = 
width
 * 
ldb
;

104 
b°ride
 = 
width
;

107 
a°ride
 <<
ˇlc_ty≥_a
;

108 
b°ride
 <<
ˇlc_ty≥_b
;

110 
¨gs
[
num_˝u
].
m
 = 
width
;

111 
¨gs
[
num_˝u
].
n
 =Ç;

112 
¨gs
[
num_˝u
].
k
 = k;

113 
¨gs
[
num_˝u
].
a
 = (*)a;

114 
¨gs
[
num_˝u
].
b
 = (*)b;

115 
¨gs
[
num_˝u
].
c
 = (*)c;

116 
¨gs
[
num_˝u
].
lda
 =Üda;

117 
¨gs
[
num_˝u
].
ldb
 =Üdb;

118 
¨gs
[
num_˝u
].
ldc
 =Üdc;

119 
¨gs
[
num_˝u
].
Æpha
 =álpha;

121 
queue
[
num_˝u
].
mode
 = mode;

122 
queue
[
num_˝u
].
routöe
 = 
fun˘i⁄
;

123 
queue
[
num_˝u
].
¨gs
 = &args[num_cpu];

124 
queue
[
num_˝u
].
√xt
 = &queue[num_cpu + 1];

126 
a
 = (*)((
BLASULONG
Ô + 
a°ride
);

127 
b
 = (*)((
BLASULONG
)b + 
b°ride
);

129 
num_˝u
 ++;

132 i‡(
num_˝u
) {

133 
queue
[
num_˝u
 - 1].
√xt
 = 
NULL
;

135 
	`exec_bœs
(
num_˝u
, 
queue
);

139 
	}
}

141 
	$bœs_Àvñ1_thªad_wôh_ªtu∫_vÆue
(
mode
, 
BLASLONG
 
m
, BLASLONG 
n
, BLASLONG 
k
, *
Æpha
,

142 *
a
, 
BLASLONG
 
lda
,

143 *
b
, 
BLASLONG
 
ldb
,

144 *
c
, 
BLASLONG
 
ldc
, (*
fun˘i⁄
)(), 
¡hªads
){

146 
bœs_queue_t
 
queue
[
MAX_CPU_NUMBER
];

147 
bœs_¨g_t
 
¨gs
 [
MAX_CPU_NUMBER
];

149 
BLASLONG
 
i
, 
width
, 
a°ride
, 
b°ride
;

150 
num_˝u
, 
ˇlc_ty≥_a
, 
ˇlc_ty≥_b
;

152 
mode
 & 
BLAS_PREC
) {

153 
BLAS_INT8
 :

154 
BLAS_BFLOAT16
:

155 
BLAS_SINGLE
 :

156 
BLAS_DOUBLE
 :

157 
BLAS_XDOUBLE
 :

158 
ˇlc_ty≥_a
 = 
ˇlc_ty≥_b
 = (
mode
 & 
BLAS_PREC
Ë+ ((modê& 
BLAS_COMPLEX
) != 0);

160 
BLAS_STOBF16
 :

161 
ˇlc_ty≥_a
 = 2 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

162 
ˇlc_ty≥_b
 = 1 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

164 
BLAS_DTOBF16
 :

165 
ˇlc_ty≥_a
 = 3 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

166 
ˇlc_ty≥_b
 = 1 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

168 
BLAS_BF16TOS
 :

169 
ˇlc_ty≥_a
 = 1 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

170 
ˇlc_ty≥_b
 = 2 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

172 
BLAS_BF16TOD
 :

173 
ˇlc_ty≥_a
 = 1 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

174 
ˇlc_ty≥_b
 = 3 + ((
mode
 & 
BLAS_COMPLEX
) != 0);

177 
ˇlc_ty≥_a
 = 
ˇlc_ty≥_b
 = 0;

181 
mode
 |
BLAS_LEGACY
;

183 
i
 = 0; i < 
¡hªads
; i++Ë
	`bœs_queue_öô
(&
queue
[i]);

185 
num_˝u
 = 0;

186 
i
 = 
m
;

188 
i
 > 0){

191 
width
 = 
	`bœs_quickdivide
(
i
 + 
¡hªads
 - 
num_˝u
 - 1,

192 
¡hªads
 - 
num_˝u
);

194 
i
 -
width
;

195 i‡(
i
 < 0Ë
width
 = width + i;

197 
a°ride
 = 
width
 * 
lda
;

199 i‡(!(
mode
 & 
BLAS_TRANSB_T
)) {

200 
b°ride
 = 
width
 * 
ldb
;

202 
b°ride
 = 
width
;

205 
a°ride
 <<
ˇlc_ty≥_a
;

206 
b°ride
 <<
ˇlc_ty≥_b
;

208 
¨gs
[
num_˝u
].
m
 = 
width
;

209 
¨gs
[
num_˝u
].
n
 =Ç;

210 
¨gs
[
num_˝u
].
k
 = k;

211 
¨gs
[
num_˝u
].
a
 = (*)a;

212 
¨gs
[
num_˝u
].
b
 = (*)b;

213 
¨gs
[
num_˝u
].
c
 = (*)((*)c +Çum_cpu * ()*2);

214 
¨gs
[
num_˝u
].
lda
 =Üda;

215 
¨gs
[
num_˝u
].
ldb
 =Üdb;

216 
¨gs
[
num_˝u
].
ldc
 =Üdc;

217 
¨gs
[
num_˝u
].
Æpha
 =álpha;

219 
queue
[
num_˝u
].
mode
 = mode;

220 
queue
[
num_˝u
].
routöe
 = 
fun˘i⁄
;

221 
queue
[
num_˝u
].
¨gs
 = &args[num_cpu];

222 
queue
[
num_˝u
].
√xt
 = &queue[num_cpu + 1];

224 
a
 = (*)((
BLASULONG
Ô + 
a°ride
);

225 
b
 = (*)((
BLASULONG
)b + 
b°ride
);

227 
num_˝u
 ++;

230 i‡(
num_˝u
) {

231 
queue
[
num_˝u
 - 1].
√xt
 = 
NULL
;

233 
	`exec_bœs
(
num_˝u
, 
queue
);

237 
	}
}

	@blas_server.c

72 
	~"comm⁄.h
"

73 #i‡
deföed
(
OS_LINUX
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
Ë|| deföed(
OS_SUNOS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_HAIKU
)

74 
	~<dlf˙.h
>

75 
	~<î∫o.h
>

76 
	~<sig«l.h
>

77 
	~<sys/ªsour˚.h
>

78 
	~<sys/time.h
>

79 
	~<abt.h
>

82 #i‚de‡
likñy


83 #ifde‡
__GNUC__


84 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

86 
	#likñy
(
x
Ë(x)

	)

89 #i‚de‡
u∆ikñy


90 #ifde‡
__GNUC__


91 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

93 
	#u∆ikñy
(
x
Ë(x)

	)

97 
›íbœs_thªad_timeout
();

98 
	#DEFAULT_NUM_XSTREAMS
 2

	)

99 
	#DEFAULT_NUM_THREADS
 8

	)

102 #ifde‡
SMP_SERVER


104 #unde‡
MONITOR


105 #unde‡
TIMING


106 #unde‡
TIMING_DEBUG


107 #unde‡
NEED_STACKATTR


109 
	#ATTRIBUTE_SIZE
 128

	)

118 
bœs_£rvî_avaû
 
__©åibuã__
((
Æig√d
(
ATTRIBUTE_SIZE
))) = 0;

121 #i‡ 
deföed
(
USE_PTHREAD_LOCK
)

122 
±hªad_muãx_t
 
	g£rvî_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

123 #ñi‡
deföed
(
USE_PTHREAD_SPINLOCK
)

124 
±hªad_•ölock_t
 
	g£rvî_lock
 = 0;

126 
	g£rvî_lock
 = 0;

129 
	#THREAD_STATUS_SLEEP
 2

	)

130 
	#THREAD_STATUS_WAKEUP
 4

	)

133 
ABT_x°ªam
 
	gx°ªams
 [
DEFAULT_NUM_XSTREAMS
];

134 
ABT_poﬁ
 
	gpoﬁs
 [
DEFAULT_NUM_XSTREAMS
];

135 
ABT_thªad
 
	gbœs_thªads
 [
DEFAULT_NUM_THREADS
];

139 
bœs_queue_t
 * vﬁ©ûê
queue
 
__©åibuã__
((
Æig√d
(
ATTRIBUTE_SIZE
)));

141 #i‡
deföed
(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

142 
	mnode
;

145 vﬁ©ûê
	m°©us
;

147 
ABT_muãx
 
	mlock
;

148 
ABT_c⁄d
 
	mwakeup
;

150 } 
	tthªad_°©us_t
;

152 #ifde‡
HAVE_C11


153 
	#©omic_lﬂd_queue
(
p
Ë
	`__©omic_lﬂd_n
’, 
__ATOMIC_RELAXED
)

	)

154 
	#©omic_°‹e_queue
(
p
, 
v
Ë
	`__©omic_°‹e_n
’, v, 
__ATOMIC_RELAXED
)

	)

156 
	#©omic_lﬂd_queue
(
p
Ë(
bœs_queue_t
*)(*(vﬁ©ûêbœs_queue_t**)’))

	)

157 
	#©omic_°‹e_queue
(
p
, 
v
Ë(*(vﬁ©ûê
bœs_queue_t
* vﬁ©ûe*)’Ë(v))

	)

162 
thªad_°©us_t
 
	gthªad_°©us
[
MAX_CPU_NUMBER
] 
__©åibuã__
((
Æig√d
(
ATTRIBUTE_SIZE
)));

164 #i‚de‡
THREAD_TIMEOUT


165 
	#THREAD_TIMEOUT
 28

	)

168 
	gthªad_timeout
 = (1U << (
THREAD_TIMEOUT
));

170 #ifde‡
MONITOR


175 
±hªad_t
 
	gm⁄ô‹_thªad
;

176 
	gmaö_°©us
[
MAX_CPU_NUMBER
];

177 
	#MAIN_ENTER
 0x01

	)

178 
	#MAIN_EXIT
 0x02

	)

179 
	#MAIN_TRYLOCK
 0x03

	)

180 
	#MAIN_LOCKSUCCESS
 0x04

	)

181 
	#MAIN_QUEUING
 0x05

	)

182 
	#MAIN_RECEIVING
 0x06

	)

183 
	#MAIN_RUNNING1
 0x07

	)

184 
	#MAIN_RUNNING2
 0x08

	)

185 
	#MAIN_RUNNING3
 0x09

	)

186 
	#MAIN_WAITING
 0x0a

	)

187 
	#MAIN_SLEEPING
 0x0b

	)

188 
	#MAIN_FINISH
 0x0c

	)

189 
	#MAIN_DONE
 0x0d

	)

192 
	#BLAS_QUEUE_FINISHED
 3

	)

193 
	#BLAS_QUEUE_RUNNING
 4

	)

195 #ifde‡
TIMING


196 
BLASLONG
 
	gexô_time
[
MAX_CPU_NUMBER
];

199 
	$Àgacy_exec
(*
func
, 
mode
, 
bœs_¨g_t
 *
¨gs
, *
sb
){

201 i‡(!(
mode
 & 
BLAS_COMPLEX
)){

202 #ifde‡
EXPRECISION


203 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

205 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
xdoubÀ
,

206 
xdoubÀ
 *, 
BLASLONG
, xdouble *, BLASLONG,

207 
xdoubÀ
 *, 
BLASLONG
, *Ë
func
;

209 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

210 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[0],

211 
¨gs
 -> 
a
,árg†-> 
lda
,

212 
¨gs
 -> 
b
,árg†-> 
ldb
,

213 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

216 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

218 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

219 *, 
BLASLONG
, *, BLASLONG,

220 *, 
BLASLONG
, *Ë
func
;

222 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

223 ((*)
¨gs
 -> 
Æpha
)[0],

224 
¨gs
 -> 
a
,árg†-> 
lda
,

225 
¨gs
 -> 
b
,árg†-> 
ldb
,

226 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

227 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
){

229 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

230 *, 
BLASLONG
, *, BLASLONG,

231 *, 
BLASLONG
, *Ë
func
;

233 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

234 ((*)
¨gs
 -> 
Æpha
)[0],

235 
¨gs
 -> 
a
,árg†-> 
lda
,

236 
¨gs
 -> 
b
,árg†-> 
ldb
,

237 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

238 #ifde‡
BUILD_BFLOAT16


239 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_BFLOAT16
){

241 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
bÊﬂt16
,

242 
bÊﬂt16
 *, 
BLASLONG
, bfloat16 *, BLASLONG,

243 
bÊﬂt16
 *, 
BLASLONG
, *Ë
func
;

245 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

246 ((
bÊﬂt16
 *)
¨gs
 -> 
Æpha
)[0],

247 
¨gs
 -> 
a
,árg†-> 
lda
,

248 
¨gs
 -> 
b
,árg†-> 
ldb
,

249 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

250 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_STOBF16
){

252 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

253 *, 
BLASLONG
, 
bÊﬂt16
 *, BLASLONG,

254 *, 
BLASLONG
, *Ë
func
;

256 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

257 ((*)
¨gs
 -> 
Æpha
)[0],

258 
¨gs
 -> 
a
,árg†-> 
lda
,

259 
¨gs
 -> 
b
,árg†-> 
ldb
,

260 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

261 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DTOBF16
){

263 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

264 *, 
BLASLONG
, 
bÊﬂt16
 *, BLASLONG,

265 *, 
BLASLONG
, *Ë
func
;

267 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

268 ((*)
¨gs
 -> 
Æpha
)[0],

269 
¨gs
 -> 
a
,árg†-> 
lda
,

270 
¨gs
 -> 
b
,árg†-> 
ldb
,

271 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

277 #ifde‡
EXPRECISION


278 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

280 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
xdoubÀ
, xdouble,

281 
xdoubÀ
 *, 
BLASLONG
, xdouble *, BLASLONG,

282 
xdoubÀ
 *, 
BLASLONG
, *Ë
func
;

284 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

285 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[0],

286 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[1],

287 
¨gs
 -> 
a
,árg†-> 
lda
,

288 
¨gs
 -> 
b
,árg†-> 
ldb
,

289 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

292 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
) {

294 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, , ,

295 *, 
BLASLONG
, *, BLASLONG,

296 *, 
BLASLONG
, *Ë
func
;

298 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

299 ((*)
¨gs
 -> 
Æpha
)[0],

300 ((*)
¨gs
 -> 
Æpha
)[1],

301 
¨gs
 -> 
a
,árg†-> 
lda
,

302 
¨gs
 -> 
b
,árg†-> 
ldb
,

303 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

304 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
) {

306 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, , ,

307 *, 
BLASLONG
, *, BLASLONG,

308 *, 
BLASLONG
, *Ë
func
;

310 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

311 ((*)
¨gs
 -> 
Æpha
)[0],

312 ((*)
¨gs
 -> 
Æpha
)[1],

313 
¨gs
 -> 
a
,árg†-> 
lda
,

314 
¨gs
 -> 
b
,árg†-> 
ldb
,

315 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

320 
	}
}

322 #i‡
deföed
(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

323 
gŸobœs_£t_afföôy
();

324 
gŸobœs_£t_afföôy2
();

325 
gë_node
();

328 
	gö¸ó£d_thªads
 = 0;

330 #ifde‡
OS_LINUX


331 
›íbœs_gë_num_thªads
();

333 
	$›íbœs_£èfföôy
(
thªad_idx
, 
size_t
 
˝u£tsize
, 
˝u_£t_t
* 
˝u_£t
) {

334 c⁄° 
a˘ive_thªads
 = 
	`›íbœs_gë_num_thªads
();

336 i‡(
thªad_idx
 < 0 ||Åhªad_idx >
a˘ive_thªads
) {

337 
î∫o
 = 
EINVAL
;

341 
ABT_thªad
 
thªad
 = (
thªad_idx
 =
a˘ive_thªads
 - 1)

342 ? 
	`±hªad_£lf
()

343 : 
bœs_thªads
[
thªad_idx
];

345  
	`±hªad_£èfföôy_≈
(
thªad
, 
˝u£tsize
, 
˝u_£t
);

346 
	}
}

349 * 
	$bœs_thªad_£rvî
(*
¨g
){

352 
BLASLONG
 
˝u
 = (BLASLONG)
¨g
;

353 
œ°_tick
;

354 *
buf„r
, *
ß
, *
sb
;

355 
bœs_queue_t
 *
queue
;

357 
bœs_queue_t
 *
tscq
;

359 #ifde‡
TIMING_DEBUG


360 
°¨t
, 
°›
;

363 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

364 i‡(!
ö¸ó£d_thªads
)

365 
thªad_°©us
[
˝u
].
node
 = 
	`gŸobœs_£t_afföôy
(cpu + 1);

367 
thªad_°©us
[
˝u
].
node
 = 
	`gŸobœs_£t_afföôy
(-1);

370 #ifde‡
MONITOR


371 
maö_°©us
[
˝u
] = 
MAIN_ENTER
;

374 
buf„r
 = 
	`bœs_mem‹y_Æloc
(2);

376 #ifde‡
SMP_DEBUG


377 
	`Ârötf
(
STDERR
, "Sîvî[%2ld] Thªad ha†ju° bì¿•aw√d!\n", 
˝u
);

382 #ifde‡
MONITOR


383 
maö_°©us
[
˝u
] = 
MAIN_QUEUING
;

386 #ifde‡
TIMING


387 
exô_time
[
˝u
] = 
	`Ωcc
();

390 
œ°_tick
 = ()
	`Ωcc
();

392 
tscq
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
˝u
].
queue
);

394 !
tscq
) {

395 
YIELDING
;

397 i‡(()
	`Ωcc
(Ë- 
œ°_tick
 > 
thªad_timeout
) {

400 i‡(!
	`©omic_lﬂd_queue
(&
thªad_°©us
[
˝u
].
queue
)) {

401 
	`ABT_muãx_lock
 (
thªad_°©us
[
˝u
].
lock
);

402 
thªad_°©us
[
˝u
].
°©us
 = 
THREAD_STATUS_SLEEP
;

403 
thªad_°©us
[
˝u
].
°©us
 =
THREAD_STATUS_SLEEP
 &&

404 !
	`©omic_lﬂd_queue
(&
thªad_°©us
[
˝u
].
queue
)) {

406 #ifde‡
MONITOR


407 
maö_°©us
[
˝u
] = 
MAIN_SLEEPING
;

410 
	`ABT_c⁄d_waô
(
thªad_°©us
[
˝u
].
wakeup
,Åhªad_°©us[˝u].
lock
);

412 
	`ABT_muãx_u∆ock
(
thªad_°©us
[
˝u
].
lock
);

415 
œ°_tick
 = ()
	`Ωcc
();

418 
tscq
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
˝u
].
queue
);

422 
queue
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
˝u
].queue);

423 
MB
;

425 i‡(()
queue
 == -1) ;

427 #ifde‡
MONITOR


428 
maö_°©us
[
˝u
] = 
MAIN_RECEIVING
;

431 #ifde‡
TIMING_DEBUG


432 
°¨t
 = 
	`Ωcc
();

435 i‡(
queue
) {

436 (*
routöe
)(
bœs_¨g_t
 *, *, *, *, *, 
BLASLONG
Ë
queue
 ->Ñoutine;

438 
	`©omic_°‹e_queue
(&
thªad_°©us
[
˝u
].
queue
, (
bœs_queue_t
 *)1);

440 
ß
 = 
queue
 -> sa;

441 
sb
 = 
queue
 -> sb;

443 #ifde‡
SMP_DEBUG


444 i‡(
queue
 -> 
¨gs
) {

445 
	`Ârötf
(
STDERR
, "Server[%2ld] Calculation started. Mode = 0x%03x M = %3ld N=%3ld K=%3ld\n",

446 
˝u
, 
queue
->
mode
, queue-> 
¨gs
 ->
m
, queue->¨gs->
n
, queue->¨gs->
k
);

450 #ifde‡
CONSISTENT_FPCSR


451 
__asm__
 
	`__vﬁ©ûe__
 ("ldmxc§ %0" : : "m" (
queue
 -> 
s£_mode
));

452 
__asm__
 
	`__vﬁ©ûe__
 ("Êdcw %0" : : "m" (
queue
 -> 
x87_mode
));

455 #ifde‡
MONITOR


456 
maö_°©us
[
˝u
] = 
MAIN_RUNNING1
;

459 i‡(
ß
 =
NULL
Ëß = (*)((
BLASLONG
)
buf„r
 + 
GEMM_OFFSET_A
);

461 i‡(
sb
 =
NULL
) {

462 i‡(!(
queue
 -> 
mode
 & 
BLAS_COMPLEX
)){

463 #ifde‡
EXPRECISION


464 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

465 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
QGEMM_P
 * 
QGEMM_Q
 * (
xdoubÀ
)

466 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

469 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
) {

470 #ifde‡
BUILD_DOUBLE


471 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
DGEMM_P
 * 
DGEMM_Q
 * ()

472 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

474 } i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
) {

475 #ifde‡
BUILD_SINGLE


476 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
SGEMM_P
 * 
SGEMM_Q
 * ()

477 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

483 #ifde‡
EXPRECISION


484 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

485 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
XGEMM_P
 * 
XGEMM_Q
 * 2 * (
xdoubÀ
)

486 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

489 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

490 #ifde‡
BUILD_COMPLEX16


491 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
ZGEMM_P
 * 
ZGEMM_Q
 * 2 * ()

492 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

494 } i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
) {

495 #ifde‡
BUILD_COMPLEX


496 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
CGEMM_P
 * 
CGEMM_Q
 * 2 * ()

497 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

503 
queue
->
sb
=sb;

506 #ifde‡
MONITOR


507 
maö_°©us
[
˝u
] = 
MAIN_RUNNING2
;

510 i‡(
queue
 -> 
mode
 & 
BLAS_LEGACY
) {

511 
	`Àgacy_exec
(
routöe
, 
queue
 -> 
mode
, queuê-> 
¨gs
, 
sb
);

513 i‡(
queue
 -> 
mode
 & 
BLAS_PTHREAD
) {

514 (*
±hªadcom∑t
)(*Ë
queue
 -> 
routöe
;

515 (
±hªadcom∑t
)(
queue
 -> 
¨gs
);

517 (
routöe
)(
queue
 -> 
¨gs
, queuê-> 
ønge_m
, queuê-> 
ønge_n
, 
ß
, 
sb
, queuê-> 
posôi⁄
);

519 #ifde‡
SMP_DEBUG


520 
	`Ârötf
(
STDERR
, "Sîvî[%2ld] CÆcuœti⁄ föished!\n", 
˝u
);

523 #ifde‡
MONITOR


524 
maö_°©us
[
˝u
] = 
MAIN_FINISH
;

529 
MB
;

530 
	`©omic_°‹e_queue
(&
thªad_°©us
[
˝u
].
queue
, (
bœs_queue_t
 *)0);

535 #ifde‡
MONITOR


536 
maö_°©us
[
˝u
] = 
MAIN_DONE
;

539 #ifde‡
TIMING_DEBUG


540 
°›
 = 
	`Ωcc
();

542 
	`Ârötf
(
STDERR
, "Thªad[%ld] : %16lu %16lu (%8lu cy˛es)\n", 
˝u
 + 1,

543 
°¨t
, 
°›
,

544 
°›
 - 
°¨t
);

551 #ifde‡
SMP_DEBUG


552 
	`Ârötf
(
STDERR
, "Sîvî[%2ld] Shutdown!\n", 
˝u
);

555 
	`bœs_mem‹y_‰ì
(
buf„r
);

559  
NULL
;

560 
	}
}

562 #ifde‡
MONITOR


564 
BLASLONG
 
	gnum_su•íd
 = 0;

566 
	$bœs_m⁄ô‹
(*
¨g
){

567 
i
;

570 
i
 = 0; i < 
bœs_num_thªads
 - 1; i++){

571 
maö_°©us
[
i
]) {

572 
MAIN_ENTER
 :

573 
	`Ârötf
(
STDERR
, "THREAD[%2d] : E¡îög.\n", 
i
);

575 
MAIN_EXIT
 :

576 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Exôög.\n", 
i
);

578 
MAIN_TRYLOCK
 :

579 
	`Ârötf
(
STDERR
, "THREAD[%2d] : TryögÜock o≥øti⁄.\n", 
i
);

581 
MAIN_QUEUING
 :

582 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Queuög.\n", 
i
);

584 
MAIN_RECEIVING
 :

585 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Re˚ivög.\n", 
i
);

587 
MAIN_RUNNING1
 :

588 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Ru¬ög1.\n", 
i
);

590 
MAIN_RUNNING2
 :

591 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Ru¬ög2.\n", 
i
);

593 
MAIN_RUNNING3
 :

594 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Ru¬ög3.\n", 
i
);

596 
MAIN_WAITING
 :

597 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Waôög.\n", 
i
);

599 
MAIN_SLEEPING
 :

600 
	`Ârötf
(
STDERR
, "THREAD[%2d] : SÀïög.\n", 
i
);

602 
MAIN_FINISH
 :

603 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Föishög.\n", 
i
);

605 
MAIN_DONE
 :

606 
	`Ârötf
(
STDERR
, "THREAD[%2d] : Job i†d⁄e.\n", 
i
);

610 
	`Ârötf
(
°dîr
, "TŸÆÇumbî o‡su•íded ... %ld\n", 
num_su•íd
);

612 
	`¶ìp
(1);

616 
	}
}

620 
	$bœs_thªad_öô
(){

621 
BLASLONG
 
i
;

622 
ªt
;

623 
thªad_timeout_ív
;

624 #ifde‡
NEED_STACKATTR


625 
±hªad_©å_t
 
©å
;

628 i‡(
bœs_£rvî_avaû
)  0;

630 #ifde‡
NEED_STACKATTR


631 
	`±hªad_©å_öô
(&
©å
);

632 
	`±hªad_©å_£tgu¨dsize
(&
©å
, 0x1000U);

633 
	`±hªad_©å_£t°acksize
–&
©å
, 0x1000U);

636 
	`LOCK_COMMAND
(&
£rvî_lock
);

638 i‡(!
bœs_£rvî_avaû
){

640 
thªad_timeout_ív
=
	`›íbœs_thªad_timeout
();

641 i‡(
thªad_timeout_ív
>0) {

642 i‡(
thªad_timeout_ív
 < 4)Åhread_timeout_env = 4;

643 i‡(
thªad_timeout_ív
 > 30)Åhread_timeout_env = 30;

644 
thªad_timeout
 = (1 << 
thªad_timeout_ív
);

646 
	`ABT_x°ªam_£lf
(&
x°ªams
[0]);

647 
i
 = 1; i < 
DEFAULT_NUM_XSTREAMS
; i++) {

648 
	`ABT_x°ªam_¸óã
(
ABT_SCHED_NULL
, &
x°ªams
[
i
]);

650 
i
 = 0; i < 
DEFAULT_NUM_XSTREAMS
; i++) {

651 
	`ABT_x°ªam_gë_maö_poﬁs
(
x°ªams
[
i
], 1, &
poﬁs
[i]);

654 
i
 = 0; i < 
bœs_num_thªads
 - 1; i++){

656 
poﬁ_id
=
i
%
DEFAULT_NUM_XSTREAMS
;

657 
	`©omic_°‹e_queue
(&
thªad_°©us
[
i
].
queue
, (
bœs_queue_t
 *)0);

658 
thªad_°©us
[
i
].
°©us
 = 
THREAD_STATUS_WAKEUP
;

660 
	`ABT_muãx_¸óã
(&
thªad_°©us
[
i
].
lock
);

661 
	`ABT_c⁄d_¸óã
 (&
thªad_°©us
[
i
].
wakeup
);

663 #ifde‡
NEED_STACKATTR


666 
ªt
=
	`ABT_thªad_¸óã
(
poﬁs
[
poﬁ_id
],(*)
bœs_thªad_£rvî
, (*)
i
, &
©å
,

667 &
bœs_thªads
[
i
]);

672 
ªt
=
	`ABT_thªad_¸óã
(
poﬁs
[
poﬁ_id
],(*)
bœs_thªad_£rvî
, (*)
i
, 
ABT_THREAD_ATTR_NULL
,

673 &
bœs_thªads
[
i
]);

675 if(
ªt
!=0){

676 
æimô
 
æim
;

677 c⁄° *
msg
 = 
	`°ªº‹
(
ªt
);

678 
	`Ârötf
(
STDERR
, "O≥nBLAS bœs_thªad_öô:Öthªad_¸óã faûed f‹Åhªad %ld o‡%d: %s\n", 
i
+1,
bœs_num_thªads
,
msg
);

679 #ifde‡
RLIMIT_NPROC


680 if(0 =
	`gëæimô
(
RLIMIT_NPROC
, &
æim
)) {

681 
	`Ârötf
(
STDERR
, "OpenBLAS blas_thread_init: RLIMIT_NPROC "

682 "%ld cuºít, %ld max\n", ()(
æim
.
æim_cur
), ()‘lim.
æim_max
));

685 if(0 !
	`øi£
(
SIGINT
)) {

686 
	`Ârötf
(
STDERR
, "OpenBLAS blas_thread_init: callingÉxit(3)\n");

687 
	`exô
(
EXIT_FAILURE
);

692 #ifde‡
MONITOR


693 
	`±hªad_¸óã
(&
m⁄ô‹_thªad
, 
NULL
,

694 (*)&
bœs_m⁄ô‹
, (*)
NULL
);

697 
bœs_£rvî_avaû
 = 1;

700 
	`UNLOCK_COMMAND
(&
£rvî_lock
);

703 
	}
}

713 
BLASULONG
 
	gexec_queue_lock
 = 0;

715 
	$exec_bœs_async
(
BLASLONG
 
pos
, 
bœs_queue_t
 *
queue
){

717 #ifde‡
SMP_SERVER


719 i‡(
	`u∆ikñy
(
bœs_£rvî_avaû
 =0)Ë
	`bœs_thªad_öô
();

721 
BLASLONG
 
i
 = 0;

722 
bœs_queue_t
 *
cuºít
 = 
queue
;

723 
bœs_queue_t
 *
tsiq
,*
t•q
;

724 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
Ë&& !deföed(
PARAMTEST
)

725 
node
 = 
	`gë_node
();

726 
nodes
 = 
	`gë_num_nodes
();

729 #ifde‡
SMP_DEBUG


730 
exec_cou¡
 = 0;

731 
	`Ârötf
(
STDERR
, "Exec_bœs_asyn¯i†ˇŒed. Posôi⁄ = %d\n", 
pos
);

734 
	`bœs_lock
(&
exec_queue_lock
);

736 
queue
) {

737 
queue
 -> 
posôi⁄
 = 
pos
;

739 #ifde‡
CONSISTENT_FPCSR


740 
__asm__
 
	`__vﬁ©ûe__
 ("‚°cw %0" : "=m" (
queue
 -> 
x87_mode
));

741 
__asm__
 
	`__vﬁ©ûe__
 ("°mxc§ %0" : "=m" (
queue
 -> 
s£_mode
));

744 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
Ë&& !deföed(
PARAMTEST
)

748 i‡(
queue
 -> 
mode
 & 
BLAS_NODE
) {

752 (
thªad_°©us
[
i
].
node
 !nodê|| 
	`©omic_lﬂd_queue
(&thªad_°©us[i].
queue
)Ë&& (ò< 
bœs_num_thªads
 - 1)) i ++;

754 i‡(
i
 < 
bœs_num_thªads
 - 1) ;

756 
i
 ++;

757 i‡(
i
 >
bœs_num_thªads
 - 1) {

758 
i
 = 0;

759 
node
 ++;

760 i‡(
node
 >
nodes
)Çode = 0;

766 
tsiq
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
i
].
queue
);

767 
tsiq
) {

768 
i
 ++;

769 i‡(
i
 >
bœs_num_thªads
 - 1) i = 0;

770 
tsiq
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
i
].
queue
);

774 
tsiq
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
i
].
queue
);

775 
tsiq
) {

776 
i
 ++;

777 i‡(
i
 >
bœs_num_thªads
 - 1) i = 0;

778 
tsiq
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
i
].
queue
);

782 
queue
 -> 
assig√d
 = 
i
;

783 
MB
;

785 
	`©omic_°‹e_queue
(&
thªad_°©us
[
i
].
queue
, queue);

787 
queue
 = queuê-> 
√xt
;

788 
pos
 ++;

789 #ifde‡
SMP_DEBUG


790 
exec_cou¡
 ++;

795 
	`bœs_u∆ock
(&
exec_queue_lock
);

797 #ifde‡
SMP_DEBUG


798 
	`Ârötf
(
STDERR
, "D⁄e(Numbî o‡thªad†%2ld).\n", 
exec_cou¡
);

801 
cuºít
) {

803 
pos
 = 
cuºít
 -> 
assig√d
;

805 
t•q
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
pos
].
queue
);

807 i‡((
BLASULONG
)
t•q
 > 1) {

808 
	`ABT_muãx_lock
 (
thªad_°©us
[
pos
].
lock
);

810 i‡(
thªad_°©us
[
pos
].
°©us
 =
THREAD_STATUS_SLEEP
) {

813 #ifde‡
MONITOR


814 
num_su•íd
 ++;

817 i‡(
thªad_°©us
[
pos
].
°©us
 =
THREAD_STATUS_SLEEP
) {

818 
thªad_°©us
[
pos
].
°©us
 = 
THREAD_STATUS_WAKEUP
;

819 
	`ABT_c⁄d_sig«l
(
thªad_°©us
[
pos
].
wakeup
);

823 
	`ABT_muãx_u∆ock
(
thªad_°©us
[
pos
].
lock
);

826 
cuºít
 = cuºíà-> 
√xt
;

830 
	}
}

832 
	$exec_bœs_async_waô
(
BLASLONG
 
num
, 
bœs_queue_t
 *
queue
){

833 
bœs_queue_t
 * 
tsqq
;

835 (
num
 > 0Ë&& 
queue
) {

837 
tsqq
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
queue
->
assig√d
].queue);

840 
tsqq
) {

841 
YIELDING
;

842 
tsqq
 = 
	`©omic_lﬂd_queue
(&
thªad_°©us
[
queue
->
assig√d
].queue);

845 
queue
 = queuê-> 
√xt
;

846 
num
 --;

849 
MB
;

851 #ifde‡
SMP_DEBUG


852 
	`Ârötf
(
STDERR
, "Done.\n\n");

856 
	}
}

859 
	$exec_bœs
(
BLASLONG
 
num
, 
bœs_queue_t
 *
queue
){

861 #ifde‡
SMP_SERVER


863 i‡(
	`u∆ikñy
(
bœs_£rvî_avaû
 =0)Ë
	`bœs_thªad_öô
();

865 (*
routöe
)(
bœs_¨g_t
 *, *, *, *, *, 
BLASLONG
);

867 #ifde‡
TIMING_DEBUG


868 
BLASULONG
 
°¨t
, 
°›
;

871 i‡((
num
 <0Ë|| (
queue
 =
NULL
))  0;

873 #ifde‡
SMP_DEBUG


874 
	`Ârötf
(
STDERR
, "Exec_bœ†i†ˇŒed. Numbî o‡executögÅhªad†: %ld\n", 
num
);

877 #ifde‡
__ELF__


878 i‡(
omp_ö_∑øŒñ
 && (
num
 > 1)) {

879 i‡(
	`omp_ö_∑øŒñ
() > 0) {

880 
	`Ârötf
(
°dîr
,

887 i‡((
num
 > 1Ë&& 
queue
 -> 
√xt
Ë
	`exec_bœs_async
(1, queue ->Çext);

889 #ifde‡
TIMING_DEBUG


890 
°¨t
 = 
	`Ωcc
();

892 
	`Ârötf
(
STDERR
, "\n");

895 
routöe
 = 
queue
 ->Ñoutine;

897 i‡(
queue
 -> 
mode
 & 
BLAS_LEGACY
) {

898 
	`Àgacy_exec
(
routöe
, 
queue
 -> 
mode
, queuê-> 
¨gs
, queuê-> 
sb
);

900 i‡(
queue
 -> 
mode
 & 
BLAS_PTHREAD
) {

901 (*
±hªadcom∑t
)(*Ë
queue
 -> 
routöe
;

902 (
±hªadcom∑t
)(
queue
 -> 
¨gs
);

904 (
routöe
)(
queue
 -> 
¨gs
, queuê-> 
ønge_m
, queuê-> 
ønge_n
,

905 
queue
 -> 
ß
, queuê-> 
sb
, 0);

907 #ifde‡
TIMING_DEBUG


908 
°›
 = 
	`Ωcc
();

911 i‡((
num
 > 1Ë&& 
queue
 -> 
√xt
) {

912 
	`exec_bœs_async_waô
(
num
 - 1, 
queue
 -> 
√xt
);

915 
MB
;

918 #ifde‡
TIMING_DEBUG


919 
	`Ârötf
(
STDERR
, "Thread[0] : %16lu %16lu (%8lu cycles)\n",

920 
°¨t
, 
°›
,

921 
°›
 - 
°¨t
);

925 
	}
}

927 
	$gŸo_£t_num_thªads
(
num_thªads
) {

929 
i
;

931 #ifde‡
SMP_SERVER


933 i‡(
	`u∆ikñy
(
bœs_£rvî_avaû
 =0)Ë
	`bœs_thªad_öô
();

936 i‡(
num_thªads
 < 1Ënum_thªad†
bœs_num_thªads
;

938 #i‚de‡
NO_AFFINITY


939 i‡(
num_thªads
 == 1) {

940 i‡(
bœs_˝u_numbî
 == 1){

946 
	`gŸobœs_£t_afföôy
(-1);

951 i‡(
num_thªads
 > 
MAX_CPU_NUMBER
)Çum_threads = MAX_CPU_NUMBER;

953 i‡(
num_thªads
 > 
bœs_num_thªads
) {

955 
	`LOCK_COMMAND
(&
£rvî_lock
);

957 
ö¸ó£d_thªads
 = 1;

959 
	`ABT_x°ªam_£lf
(&
x°ªams
[0]);

960 
i
 = 1; i < 
DEFAULT_NUM_XSTREAMS
; i++) {

961 
	`ABT_x°ªam_¸óã
(
ABT_SCHED_NULL
, &
x°ªams
[
i
]);

963 
i
 = 0; i < 
DEFAULT_NUM_XSTREAMS
; i++) {

964 
	`ABT_x°ªam_gë_maö_poﬁs
(
x°ªams
[
i
], 1, &
poﬁs
[i]);

970 
i
 = 
bœs_num_thªads
 - 1; i < 
num_thªads
 - 1; i++){

971 
poﬁ_id

i
 % 
DEFAULT_NUM_XSTREAMS
;

972 
	`©omic_°‹e_queue
(&
thªad_°©us
[
i
].
queue
, (
bœs_queue_t
 *)0);

973 
thªad_°©us
[
i
].
°©us
 = 
THREAD_STATUS_WAKEUP
;

975 
	`ABT_muãx_¸óã
(&
thªad_°©us
[
i
].
lock
);

976 
	`ABT_c⁄d_¸óã
 (&
thªad_°©us
[
i
].
wakeup
);

978 #ifde‡
NEED_STACKATTR


981 
	`ABT_thªad_¸óã
(
poﬁs
[
poﬁ_id
],(*)
bœs_thªad_£rvî
, (*)
i
, &
©å
,

982 &
bœs_thªads
[
i
]);

987 
	`ABT_thªad_¸óã
(
poﬁs
[
poﬁ_id
],(*)
bœs_thªad_£rvî
, (*)
i
, 
ABT_THREAD_ATTR_NULL
,

988 &
bœs_thªads
[
i
]);

993 
bœs_num_thªads
 = 
num_thªads
;

995 
	`UNLOCK_COMMAND
(&
£rvî_lock
);

998 #i‚de‡
NO_AFFINITY


999 if(
bœs_˝u_numbî
 =1 && 
num_thªads
 > 1){

1001 
	`gŸobœs_£t_afföôy
(0);

1005 
bœs_˝u_numbî
 = 
num_thªads
;

1007 #i‡
	`deföed
(
ARCH_MIPS64
)

1008 #i‚de‡
DYNAMIC_ARCH


1010 
	`bœs_£t_∑ømëî
();

1014 
	}
}

1016 
	$›íbœs_£t_num_thªads
(
num_thªads
) {

1017 
	`gŸo_£t_num_thªads
(
num_thªads
);

1019 
	}
}

1023 
	$gŸobœs_±hªad
(
numthªads
, *
fun˘i⁄
, *
¨gs
, 
°ride
) {

1025 
bœs_queue_t
 
queue
[
MAX_CPU_NUMBER
];

1026 
i
;

1028 i‡(
numthªads
 <= 0)  0;

1030 #ifde‡
SMP


1031 i‡(
bœs_˝u_numbî
 =0Ë
	`bœs_gë_˝u_numbî
();

1032 #ifde‡
SMP_SERVER


1033 i‡(
bœs_£rvî_avaû
 =0Ë
	`bœs_thªad_öô
();

1037 
i
 = 0; i < 
numthªads
; i ++) {

1039 
queue
[
i
].
mode
 = 
BLAS_PTHREAD
;

1040 
queue
[
i
].
routöe
 = 
fun˘i⁄
;

1041 
queue
[
i
].
¨gs
 =árgs;

1042 
queue
[
i
].
ønge_m
 = 
NULL
;

1043 
queue
[
i
].
ønge_n
 = 
NULL
;

1044 
queue
[
i
].
ß
 = 
¨gs
;

1045 
queue
[
i
].
sb
 = 
¨gs
;

1046 
queue
[
i
].
√xt
 = &queue[i + 1];

1048 
¨gs
 +
°ride
;

1051 
queue
[
numthªads
 - 1].
√xt
 = 
NULL
;

1053 
	`exec_bœs
(
numthªads
, 
queue
);

1056 
	}
}

1061 
	$BLASFUNC
(
bœs_thªad_shutdown
)(){

1063 
i
;

1065 i‡(!
bœs_£rvî_avaû
)  0;

1067 
	`LOCK_COMMAND
(&
£rvî_lock
);

1069 
i
 = 0; i < 
bœs_num_thªads
 - 1; i++) {

1072 
	`ABT_muãx_lock
 (
thªad_°©us
[
i
].
lock
);

1074 
	`©omic_°‹e_queue
(&
thªad_°©us
[
i
].
queue
, (
bœs_queue_t
 *)-1);

1075 
thªad_°©us
[
i
].
°©us
 = 
THREAD_STATUS_WAKEUP
;

1076 
	`ABT_c⁄d_sig«l
 (
thªad_°©us
[
i
].
wakeup
);

1078 
	`ABT_muãx_u∆ock
(
thªad_°©us
[
i
].
lock
);

1082 
i
 = 0; i < 
bœs_num_thªads
 - 1; i++){

1083 
	`ABT_thªad_joö
(
bœs_thªads
[
i
]);

1086 
i
 = 0; i < 
bœs_num_thªads
 - 1; i++){

1087 
	`ABT_muãx_‰ì
(&
thªad_°©us
[
i
].
lock
);

1088 
	`ABT_c⁄d_‰ì
 (&
thªad_°©us
[
i
].
wakeup
);

1091 #ifde‡
NEED_STACKATTR


1092 
	`±hªad_©å_de°‹y
(&
©å
);

1095 
bœs_£rvî_avaû
 = 0;

1097 
	`UNLOCK_COMMAND
(&
£rvî_lock
);

1100 
	}
}

	@blas_server_omp.c

39 
	~<°dboﬁ.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

43 
	~"comm⁄.h
"

45 #i‚de‡
USE_OPENMP


47 
	~"bœs_£rvî.c
"

51 #i‚de‡
likñy


52 #ifde‡
__GNUC__


53 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

55 
	#likñy
(
x
Ë(x)

	)

58 #i‚de‡
u∆ikñy


59 #ifde‡
__GNUC__


60 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

62 
	#u∆ikñy
(
x
Ë(x)

	)

66 #i‚de‡
OMP_SCHED


67 
	#OMP_SCHED
 

	)

70 
	gbœs_£rvî_avaû
 = 0;

72 * 
	gbœs_thªad_buf„r
[
MAX_PARALLEL_NUMBER
][
MAX_CPU_NUMBER
];

73 #ifde‡
HAVE_C11


74 
©omic_boﬁ
 
	gbœs_buf„r_öu£
[
MAX_PARALLEL_NUMBER
];

76 
_Boﬁ
 
	gbœs_buf„r_öu£
[
MAX_PARALLEL_NUMBER
];

79 
	$adju°_thªad_buf„rs
() {

81 
i
=0, 
j
=0;

84 
i
=0; i < 
MAX_PARALLEL_NUMBER
; i++) {

85 
j
=0; j < 
bœs_˝u_numbî
; j++){

86 if(
bœs_thªad_buf„r
[
i
][
j
] =
NULL
){

87 
bœs_thªad_buf„r
[
i
][
j
] = 
	`bœs_mem‹y_Æloc
(2);

90 ; 
j
 < 
MAX_CPU_NUMBER
; j++){

91 if(
bœs_thªad_buf„r
[
i
][
j
] !
NULL
){

92 
	`bœs_mem‹y_‰ì
(
bœs_thªad_buf„r
[
i
][
j
]);

93 
bœs_thªad_buf„r
[
i
][
j
] = 
NULL
;

97 
	}
}

99 
	$gŸo_£t_num_thªads
(
num_thªads
) {

101 i‡(
num_thªads
 < 1Ënum_thªad†
bœs_num_thªads
;

103 i‡(
num_thªads
 > 
MAX_CPU_NUMBER
)Çum_threads = MAX_CPU_NUMBER;

105 i‡(
num_thªads
 > 
bœs_num_thªads
) {

106 
bœs_num_thªads
 = 
num_thªads
;

109 
bœs_˝u_numbî
 = 
num_thªads
;

111 
	`omp_£t_num_thªads
(
bœs_˝u_numbî
);

113 
	`adju°_thªad_buf„rs
();

114 #i‡
	`deföed
(
ARCH_MIPS64
)

116 
	`bœs_£t_∑ømëî
();

119 
	}
}

120 
	$›íbœs_£t_num_thªads
(
num_thªads
) {

122 
	`gŸo_£t_num_thªads
(
num_thªads
);

123 
	}
}

125 
	$bœs_thªad_öô
(){

127 
	`bœs_gë_˝u_numbî
();

129 
	`adju°_thªad_buf„rs
();

131 
bœs_£rvî_avaû
 = 1;

134 
	}
}

136 
	$BLASFUNC
(
bœs_thªad_shutdown
)(){

137 
i
=0, 
j
=0;

138 
bœs_£rvî_avaû
 = 0;

140 
i
=0; i<
MAX_PARALLEL_NUMBER
; i++) {

141 
j
=0; j<
MAX_CPU_NUMBER
; j++){

142 if(
bœs_thªad_buf„r
[
i
][
j
]!=
NULL
){

143 
	`bœs_mem‹y_‰ì
(
bœs_thªad_buf„r
[
i
][
j
]);

144 
bœs_thªad_buf„r
[
i
][
j
]=
NULL
;

150 
	}
}

152 
	$Àgacy_exec
(*
func
, 
mode
, 
bœs_¨g_t
 *
¨gs
, *
sb
){

154 i‡(!(
mode
 & 
BLAS_COMPLEX
)){

155 #ifde‡
EXPRECISION


156 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

158 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
xdoubÀ
,

159 
xdoubÀ
 *, 
BLASLONG
, xdouble *, BLASLONG,

160 
xdoubÀ
 *, 
BLASLONG
, *Ë
func
;

162 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

163 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[0],

164 
¨gs
 -> 
a
,árg†-> 
lda
,

165 
¨gs
 -> 
b
,árg†-> 
ldb
,

166 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

169 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

171 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

172 *, 
BLASLONG
, *, BLASLONG,

173 *, 
BLASLONG
, *Ë
func
;

175 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

176 ((*)
¨gs
 -> 
Æpha
)[0],

177 
¨gs
 -> 
a
,árg†-> 
lda
,

178 
¨gs
 -> 
b
,árg†-> 
ldb
,

179 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

180 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
){

182 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

183 *, 
BLASLONG
, *, BLASLONG,

184 *, 
BLASLONG
, *Ë
func
;

186 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

187 ((*)
¨gs
 -> 
Æpha
)[0],

188 
¨gs
 -> 
a
,árg†-> 
lda
,

189 
¨gs
 -> 
b
,árg†-> 
ldb
,

190 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

191 #ifde‡
BUILD_BFLOAT16


192 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_BFLOAT16
){

194 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
bÊﬂt16
,

195 
bÊﬂt16
 *, 
BLASLONG
, bfloat16 *, BLASLONG,

196 
bÊﬂt16
 *, 
BLASLONG
, *Ë
func
;

198 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

199 ((
bÊﬂt16
 *)
¨gs
 -> 
Æpha
)[0],

200 
¨gs
 -> 
a
,árg†-> 
lda
,

201 
¨gs
 -> 
b
,árg†-> 
ldb
,

202 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

203 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_STOBF16
){

205 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

206 *, 
BLASLONG
, 
bÊﬂt16
 *, BLASLONG,

207 *, 
BLASLONG
, *Ë
func
;

209 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

210 ((*)
¨gs
 -> 
Æpha
)[0],

211 
¨gs
 -> 
a
,árg†-> 
lda
,

212 
¨gs
 -> 
b
,árg†-> 
ldb
,

213 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

214 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DTOBF16
){

216 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

217 *, 
BLASLONG
, 
bÊﬂt16
 *, BLASLONG,

218 *, 
BLASLONG
, *Ë
func
;

220 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

221 ((*)
¨gs
 -> 
Æpha
)[0],

222 
¨gs
 -> 
a
,árg†-> 
lda
,

223 
¨gs
 -> 
b
,árg†-> 
ldb
,

224 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

230 #ifde‡
EXPRECISION


231 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

233 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
xdoubÀ
, xdouble,

234 
xdoubÀ
 *, 
BLASLONG
, xdouble *, BLASLONG,

235 
xdoubÀ
 *, 
BLASLONG
, *Ë
func
;

237 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

238 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[0],

239 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[1],

240 
¨gs
 -> 
a
,árg†-> 
lda
,

241 
¨gs
 -> 
b
,árg†-> 
ldb
,

242 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

245 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

247 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, , ,

248 *, 
BLASLONG
, *, BLASLONG,

249 *, 
BLASLONG
, *Ë
func
;

251 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

252 ((*)
¨gs
 -> 
Æpha
)[0],

253 ((*)
¨gs
 -> 
Æpha
)[1],

254 
¨gs
 -> 
a
,árg†-> 
lda
,

255 
¨gs
 -> 
b
,árg†-> 
ldb
,

256 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

257 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
){

259 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, , ,

260 *, 
BLASLONG
, *, BLASLONG,

261 *, 
BLASLONG
, *Ë
func
;

263 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

264 ((*)
¨gs
 -> 
Æpha
)[0],

265 ((*)
¨gs
 -> 
Æpha
)[1],

266 
¨gs
 -> 
a
,árg†-> 
lda
,

267 
¨gs
 -> 
b
,árg†-> 
ldb
,

268 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

273 
	}
}

275 
	$exec_thªads
(
bœs_queue_t
 *
queue
, 
buf_ödex
){

277 *
buf„r
, *
ß
, *
sb
;

278 
pos
=0, 
ªÀa£_Êag
=0;

280 
buf„r
 = 
NULL
;

281 
ß
 = 
queue
 -> sa;

282 
sb
 = 
queue
 -> sb;

284 #ifde‡
CONSISTENT_FPCSR


285 
__asm__
 
	`__vﬁ©ûe__
 ("ldmxc§ %0" : : "m" (
queue
 -> 
s£_mode
));

286 
__asm__
 
	`__vﬁ©ûe__
 ("Êdcw %0" : : "m" (
queue
 -> 
x87_mode
));

289 i‡((
ß
 =
NULL
Ë&& (
sb
 =NULLË&& ((
queue
 -> 
mode
 & 
BLAS_PTHREAD
) == 0)) {

291 
pos
 = 
	`omp_gë_thªad_num
();

292 
buf„r
 = 
bœs_thªad_buf„r
[
buf_ödex
][
pos
];

295 if(
buf„r
==
NULL
) {

296 
buf„r
 = 
	`bœs_mem‹y_Æloc
(2);

297 
ªÀa£_Êag
=1;

300 i‡(
ß
 =
NULL
) {

301 
ß
 = (*)((
BLASLONG
)
buf„r
 + 
GEMM_OFFSET_A
);

302 
queue
->
ß
=sa;

305 i‡(
sb
 =
NULL
) {

306 i‡(!(
queue
 -> 
mode
 & 
BLAS_COMPLEX
)){

307 #ifde‡
EXPRECISION


308 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

309 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
QGEMM_P
 * 
QGEMM_Q
 * (
xdoubÀ
)

310 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

313 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

314 #i‡
	`deföed
 ( 
BUILD_DOUBLE
Ë|| deföed (
BUILD_COMPLEX16
)

315 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
DGEMM_P
 * 
DGEMM_Q
 * ()

316 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

318 } i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
){

319 #i‡
	`deföed
 (
BUILD_SINGLE
Ë|| deföed (
BUILD_COMPLEX
)

320 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
SGEMM_P
 * 
SGEMM_Q
 * ()

321 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

327 #ifde‡
EXPRECISION


328 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

329 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
XGEMM_P
 * 
XGEMM_Q
 * 2 * (
xdoubÀ
)

330 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

333 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

334 #ifde‡
BUILD_COMPLEX16


335 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
ZGEMM_P
 * 
ZGEMM_Q
 * 2 * ()

336 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

338 
	`Ârötf
(
°dîr
,"UNHANDLED COMPLEX16\n");

340 } i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
) {

341 #ifde‡
BUILD_COMPLEX


342 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
CGEMM_P
 * 
CGEMM_Q
 * 2 * ()

343 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

345 
	`Ârötf
(
°dîr
,"UNHANDLED COMPLEX\n");

351 
queue
->
sb
=sb;

355 i‡(
queue
 -> 
mode
 & 
BLAS_LEGACY
) {

356 
	`Àgacy_exec
(
queue
 -> 
routöe
, queuê-> 
mode
, queuê-> 
¨gs
, 
sb
);

358 i‡(
queue
 -> 
mode
 & 
BLAS_PTHREAD
) {

359 (*
±hªadcom∑t
)(*Ë
queue
 -> 
routöe
;

360 (
±hªadcom∑t
)(
queue
 -> 
¨gs
);

363 (*
routöe
)(
bœs_¨g_t
 *, *, *, *, *, 
BLASLONG
Ë
queue
 ->Ñoutine;

365 (
routöe
)(
queue
 -> 
¨gs
, queuê-> 
ønge_m
, queuê-> 
ønge_n
, 
ß
, 
sb
, queuê-> 
posôi⁄
);

369 i‡(
ªÀa£_Êag
Ë
	`bœs_mem‹y_‰ì
(
buf„r
);

371 
	}
}

373 
	$exec_bœs
(
BLASLONG
 
num
, 
bœs_queue_t
 *
queue
){

376 i‡(
	`u∆ikñy
(
bœs_£rvî_avaû
 =0)Ë
	`bœs_thªad_öô
();

378 
BLASLONG
 
i
, 
buf_ödex
;

380 i‡((
num
 <0Ë|| (
queue
 =
NULL
))  0;

382 #ifde‡
CONSISTENT_FPCSR


383 
i
 = 0; i < 
num
; i ++) {

384 
__asm__
 
	`__vﬁ©ûe__
 ("‚°cw %0" : "=m" (
queue
[
i
].
x87_mode
));

385 
__asm__
 
	`__vﬁ©ûe__
 ("°mxc§ %0" : "=m" (
queue
[
i
].
s£_mode
));

389 
åue
) {

390 
i
=0; i < 
MAX_PARALLEL_NUMBER
; i++) {

391 #ifde‡
HAVE_C11


392 
_Boﬁ
 
öu£
 = 
Ál£
;

393 if(
	`©omic_com∑ª_exch™ge_wók
(&
bœs_buf„r_öu£
[
i
], &
öu£
, 
åue
)) {

395 if(
bœs_buf„r_öu£
[
i
] =
Ál£
) {

396 
bœs_buf„r_öu£
[
i
] = 
åue
;

398 
buf_ödex
 = 
i
;

402 if(
i
 !
MAX_PARALLEL_NUMBER
)

406 #¥agm®
omp
 
∑øŒñ
 
	`num_thªads
(
num
Ë
	`scheduÀ
(
OMP_SCHED
)

407 
i
 = 0; i < 
num
; i ++) {

409 #i‚de‡
USE_SIMPLE_THREADED_LEVEL3


410 
queue
[
i
].
posôi⁄
 = i;

413 
	`exec_thªads
(&
queue
[
i
], 
buf_ödex
);

416 #ifde‡
HAVE_C11


417 
	`©omic_°‹e
(&
bœs_buf„r_öu£
[
buf_ödex
], 
Ál£
);

419 
bœs_buf„r_öu£
[
buf_ödex
] = 
Ál£
;

423 
	}
}

	@blas_server_win32.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~"comm⁄.h
"

43 #i‡
deföed
(
OS_CYGWIN_NT
Ë&& !deföed(
u∆ikñy
)

44 #ifde‡
__GNUC__


45 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

47 
	#u∆ikñy
(
x
Ë(x)

	)

55 
CRITICAL_SECTION
 
	mlock
;

56 
HANDLE
 
	mfûÀd
;

57 
HANDLE
 
	mkûÀd
;

59 
bœs_queue_t
 *
	mqueue
;

60 
	mshutdown
;

62 } 
	tbœs_poﬁ_t
;

65 
	gbœs_£rvî_avaû
 = 0;

68 
BLASULONG
 
	g£rvî_lock
 = 0;

70 
bœs_poﬁ_t
 
	gpoﬁ
;

71 
HANDLE
 
	gbœs_thªads
 [
MAX_CPU_NUMBER
];

72 
DWORD
 
	gbœs_thªads_id
[
MAX_CPU_NUMBER
];

76 
	$Àgacy_exec
(*
func
, 
mode
, 
bœs_¨g_t
 *
¨gs
, *
sb
){

78 i‡(!(
mode
 & 
BLAS_COMPLEX
)){

79 #ifde‡
EXPRECISION


80 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

82 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
xdoubÀ
,

83 
xdoubÀ
 *, 
BLASLONG
, xdouble *, BLASLONG,

84 
xdoubÀ
 *, 
BLASLONG
, *Ë
func
;

86 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

87 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[0],

88 
¨gs
 -> 
a
,árg†-> 
lda
,

89 
¨gs
 -> 
b
,árg†-> 
ldb
,

90 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

93 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

95 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

96 *, 
BLASLONG
, *, BLASLONG,

97 *, 
BLASLONG
, *Ë
func
;

99 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

100 ((*)
¨gs
 -> 
Æpha
)[0],

101 
¨gs
 -> 
a
,árg†-> 
lda
,

102 
¨gs
 -> 
b
,árg†-> 
ldb
,

103 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

104 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
){

106 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

107 *, 
BLASLONG
, *, BLASLONG,

108 *, 
BLASLONG
, *Ë
func
;

110 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

111 ((*)
¨gs
 -> 
Æpha
)[0],

112 
¨gs
 -> 
a
,árg†-> 
lda
,

113 
¨gs
 -> 
b
,árg†-> 
ldb
,

114 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

115 #ifde‡
BUILD_BFLOAT16


116 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_BFLOAT16
){

118 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
bÊﬂt16
,

119 
bÊﬂt16
 *, 
BLASLONG
, bfloat16 *, BLASLONG,

120 
bÊﬂt16
 *, 
BLASLONG
, *Ë
func
;

122 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

123 ((
bÊﬂt16
 *)
¨gs
 -> 
Æpha
)[0],

124 
¨gs
 -> 
a
,árg†-> 
lda
,

125 
¨gs
 -> 
b
,árg†-> 
ldb
,

126 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

127 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_STOBF16
){

129 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

130 *, 
BLASLONG
, 
bÊﬂt16
 *, BLASLONG,

131 *, 
BLASLONG
, *Ë
func
;

133 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

134 ((*)
¨gs
 -> 
Æpha
)[0],

135 
¨gs
 -> 
a
,árg†-> 
lda
,

136 
¨gs
 -> 
b
,árg†-> 
ldb
,

137 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

138 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DTOBF16
){

140 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, ,

141 *, 
BLASLONG
, 
bÊﬂt16
 *, BLASLONG,

142 *, 
BLASLONG
, *Ë
func
;

144 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

145 ((*)
¨gs
 -> 
Æpha
)[0],

146 
¨gs
 -> 
a
,árg†-> 
lda
,

147 
¨gs
 -> 
b
,árg†-> 
ldb
,

148 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

154 #ifde‡
EXPRECISION


155 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

157 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, 
xdoubÀ
, xdouble,

158 
xdoubÀ
 *, 
BLASLONG
, xdouble *, BLASLONG,

159 
xdoubÀ
 *, 
BLASLONG
, *Ë
func
;

161 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

162 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[0],

163 ((
xdoubÀ
 *)
¨gs
 -> 
Æpha
)[1],

164 
¨gs
 -> 
a
,árg†-> 
lda
,

165 
¨gs
 -> 
b
,árg†-> 
ldb
,

166 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

169 i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

171 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, , ,

172 *, 
BLASLONG
, *, BLASLONG,

173 *, 
BLASLONG
, *Ë
func
;

175 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

176 ((*)
¨gs
 -> 
Æpha
)[0],

177 ((*)
¨gs
 -> 
Æpha
)[1],

178 
¨gs
 -> 
a
,árg†-> 
lda
,

179 
¨gs
 -> 
b
,árg†-> 
ldb
,

180 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

181 } i‡((
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
) {

183 (*
afunc
)(
BLASLONG
, BLASLONG, BLASLONG, , ,

184 *, 
BLASLONG
, *, BLASLONG,

185 *, 
BLASLONG
, *Ë
func
;

187 
	`afunc
(
¨gs
 -> 
m
,árg†-> 
n
,árg†-> 
k
,

188 ((*)
¨gs
 -> 
Æpha
)[0],

189 ((*)
¨gs
 -> 
Æpha
)[1],

190 
¨gs
 -> 
a
,árg†-> 
lda
,

191 
¨gs
 -> 
b
,árg†-> 
ldb
,

192 
¨gs
 -> 
c
,árg†-> 
ldc
, 
sb
);

197 
	}
}

202 
DWORD
 
WINAPI
 
	$bœs_thªad_£rvî
(*
¨g
){

205 #ifde‡
SMP_DEBUG


206 
BLASLONG
 
˝u
 = (BLASLONG)
¨g
;

209 *
buf„r
, *
ß
, *
sb
;

210 
bœs_queue_t
 *
queue
;

211 
DWORD
 
a˘i⁄
;

212 
HANDLE
 
h™dÀs
[] = {
poﬁ
.
fûÀd
,Öoﬁ.
kûÀd
};

215 
buf„r
 = 
	`bœs_mem‹y_Æloc
(2);

217 #ifde‡
SMP_DEBUG


218 
	`Ârötf
(
STDERR
, "Sîvî[%2ld] Thªad i†°¨ãd!\n", 
˝u
);

225 #ifde‡
SMP_DEBUG


226 
	`Ârötf
(
STDERR
, "Sîvî[%2ld] Waôög f‹ Queue.\n", 
˝u
);

230 
a˘i⁄
 = 
	`WaôF‹Mu…ùÀObje˘s
(2, 
h™dÀs
, 
FALSE
, 
INFINITE
);

231 } (
a˘i⁄
 !
WAIT_OBJECT_0
) && (action != WAIT_OBJECT_0 + 1));

233 i‡(
a˘i⁄
 =
WAIT_OBJECT_0
 + 1) ;

235 #ifde‡
SMP_DEBUG


236 
	`Ârötf
(
STDERR
, "Sîvî[%2ld] GŸ it.\n", 
˝u
);

239 
	`E¡îCrôiˇlSe˘i⁄
(&
poﬁ
.
lock
);

241 
queue
 = 
poﬁ
.queue;

242 i‡(
queue
Ë
poﬁ
.queuêqueue->
√xt
;

244 
	`LóveCrôiˇlSe˘i⁄
(&
poﬁ
.
lock
);

246 i‡(
queue
) {

247 (*
routöe
)(
bœs_¨g_t
 *, *, *, *, *, 
BLASLONG
Ë
queue
 ->Ñoutine;

249 i‡(
poﬁ
.
queue
Ë
	`SëEvít
’oﬁ.
fûÀd
);

251 
ß
 = 
queue
 -> sa;

252 
sb
 = 
queue
 -> sb;

254 #ifde‡
CONSISTENT_FPCSR


255 
__asm__
 
	`__vﬁ©ûe__
 ("ldmxc§ %0" : : "m" (
queue
 -> 
s£_mode
));

256 
__asm__
 
	`__vﬁ©ûe__
 ("Êdcw %0" : : "m" (
queue
 -> 
x87_mode
));

259 #ifde‡
SMP_DEBUG


260 
	`Ârötf
(
STDERR
, "Server[%2ld] Started. Mode = 0x%03x M = %3ld N=%3ld K=%3ld\n",

261 
˝u
, 
queue
->
mode
, queue-> 
¨gs
 ->
m
, queue->¨gs->
n
, queue->¨gs->
k
);

266 #ifde‡
MONITOR


267 
maö_°©us
[
˝u
] = 
MAIN_RUNNING1
;

270 i‡(
ß
 =
NULL
Ëß = (*)((
BLASLONG
)
buf„r
 + 
GEMM_OFFSET_A
);

272 i‡(
sb
 =
NULL
) {

273 i‡(!(
queue
 -> 
mode
 & 
BLAS_COMPLEX
)){

274 #ifde‡
EXPRECISION


275 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

276 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
XGEMM_P
 * 
XGEMM_Q
 * (
xdoubÀ
)

277 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

280 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

281 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
DGEMM_P
 * 
DGEMM_Q
 * ()

282 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

284 } i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
) {

285 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
SGEMM_P
 * 
SGEMM_Q
 * ()

286 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

291 #ifde‡
EXPRECISION


292 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_XDOUBLE
){

293 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
XGEMM_P
 * 
XGEMM_Q
 * 2 * (
xdoubÀ
)

294 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

297 i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_DOUBLE
){

298 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
ZGEMM_P
 * 
ZGEMM_Q
 * 2 * ()

299 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

300 } i‡((
queue
 -> 
mode
 & 
BLAS_PREC
Ë=
BLAS_SINGLE
) {

301 
sb
 = (*)(((
BLASLONG
)
ß
 + ((
CGEMM_P
 * 
CGEMM_Q
 * 2 * ()

302 + 
GEMM_ALIGN
Ë& ~GEMM_ALIGN)Ë+ 
GEMM_OFFSET_B
);

307 
queue
->
sb
=sb;

310 #ifde‡
MONITOR


311 
maö_°©us
[
˝u
] = 
MAIN_RUNNING2
;

314 i‡(!(
queue
 -> 
mode
 & 
BLAS_LEGACY
)) {

316 (
routöe
)(
queue
 -> 
¨gs
, queuê-> 
ønge_m
, queuê-> 
ønge_n
, 
ß
, 
sb
, queuê-> 
posôi⁄
);

318 
	`Àgacy_exec
(
routöe
, 
queue
 -> 
mode
, queuê-> 
¨gs
, 
sb
);

324 #ifde‡
SMP_DEBUG


325 
	`Ârötf
(
STDERR
, "Sîvî[%2ld] Föished!\n", 
˝u
);

328 
	`E¡îCrôiˇlSe˘i⁄
(&
queue
->
lock
);

330 
queue
 -> 
°©us
 = 
BLAS_STATUS_FINISHED
;

332 
	`LóveCrôiˇlSe˘i⁄
(&
queue
->
lock
);

334 
	`SëEvít
(
queue
->
föish
);

339 #ifde‡
SMP_DEBUG


340 
	`Ârötf
(
STDERR
, "Sîvî[%2ld] Shutdown!\n", 
˝u
);

343 
	`bœs_mem‹y_‰ì
(
buf„r
);

346 
	}
}

349 
	$bœs_thªad_öô
(){

350 
BLASLONG
 
i
;

352 i‡(
bœs_£rvî_avaû
 || (
bœs_˝u_numbî
 <= 1))  0;

354 
	`LOCK_COMMAND
(&
£rvî_lock
);

356 #ifde‡
SMP_DEBUG


357 
	`Ârötf
(
STDERR
, "Initializing Thread(Num.Åhreads = %d)\n",

358 
bœs_˝u_numbî
);

361 i‡(!
bœs_£rvî_avaû
){

363 
	`InôülizeCrôiˇlSe˘i⁄
(&
poﬁ
.
lock
);

364 
poﬁ
.
fûÀd
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

365 
poﬁ
.
kûÀd
 = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, NULL);

367 
poﬁ
.
shutdown
 = 0;

368 
poﬁ
.
queue
 = 
NULL
;

370 
i
 = 0; i < 
bœs_˝u_numbî
 - 1; i++){

371 
bœs_thªads
[
i
] = 
	`Cª©eThªad
(
NULL
, 0,

372 
bœs_thªad_£rvî
, (*)
i
,

373 0, &
bœs_thªads_id
[
i
]);

376 
bœs_£rvî_avaû
 = 1;

379 
	`UNLOCK_COMMAND
(&
£rvî_lock
);

382 
	}
}

392 
	$exec_bœs_async
(
BLASLONG
 
pos
, 
bœs_queue_t
 *
queue
){

394 #i‡
	`deföed
(
SMP_SERVER
Ë&& deföed(
OS_CYGWIN_NT
)

396 i‡(
	`u∆ikñy
(
bœs_£rvî_avaû
 =0)Ë
	`bœs_thªad_öô
();

399 
bœs_queue_t
 *
cuºít
;

401 
cuºít
 = 
queue
;

403 
cuºít
) {

404 
	`InôülizeCrôiˇlSe˘i⁄
(&
cuºít
 -> 
lock
);

405 
cuºít
 -> 
föish
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

406 
cuºít
 -> 
posôi⁄
 = 
pos
;

408 #ifde‡
CONSISTENT_FPCSR


409 
__asm__
 
	`__vﬁ©ûe__
 ("‚°cw %0" : "=m" (
cuºít
 -> 
x87_mode
));

410 
__asm__
 
	`__vﬁ©ûe__
 ("°mxc§ %0" : "=m" (
cuºít
 -> 
s£_mode
));

413 
cuºít
 = cuºíà-> 
√xt
;

414 
pos
 ++;

417 
	`E¡îCrôiˇlSe˘i⁄
(&
poﬁ
.
lock
);

419 i‡(
poﬁ
.
queue
) {

420 
cuºít
 = 
poﬁ
.
queue
;

421 
cuºít
 -> 
√xt
) current = current ->Çext;

422 
cuºít
 -> 
√xt
 = 
queue
;

424 
poﬁ
.
queue
 = queue;

427 
	`LóveCrôiˇlSe˘i⁄
(&
poﬁ
.
lock
);

429 
	`SëEvít
(
poﬁ
.
fûÀd
);

432 
	}
}

434 
	$exec_bœs_async_waô
(
BLASLONG
 
num
, 
bœs_queue_t
 *
queue
){

436 #ifde‡
SMP_DEBUG


437 
	`Ârötf
(
STDERR
, "Synchronization Waiting.\n");

440 
num
){

441 #ifde‡
SMP_DEBUG


442 
	`Ârötf
(
STDERR
, "Waiting Queue ..\n");

445 
	`WaôF‹SögÀObje˘
(
queue
->
föish
, 
INFINITE
);

447 
	`Clo£H™dÀ
(
queue
->
föish
);

448 
	`DñëeCrôiˇlSe˘i⁄
(&
queue
 -> 
lock
);

450 
queue
 = queuê-> 
√xt
;

451 
num
 --;

454 #ifde‡
SMP_DEBUG


455 
	`Ârötf
(
STDERR
, "Completely Done.\n\n");

459 
	}
}

462 
	$exec_bœs
(
BLASLONG
 
num
, 
bœs_queue_t
 *
queue
){

464 #i‡
	`deföed
(
SMP_SERVER
Ë&& deföed(
OS_CYGWIN_NT
)

466 i‡(
	`u∆ikñy
(
bœs_£rvî_avaû
 =0)Ë
	`bœs_thªad_öô
();

469 #i‚de‡
ALL_THREADED


470 (*
routöe
)(
bœs_¨g_t
 *, *, *, *, *, 
BLASLONG
);

473 i‡((
num
 <0Ë|| (
queue
 =
NULL
))  0;

475 i‡((
num
 > 1Ë&& 
queue
 -> 
√xt
Ë
	`exec_bœs_async
(1, queue ->Çext);

477 
routöe
 = 
queue
 ->Ñoutine;

479 i‡(
queue
 -> 
mode
 & 
BLAS_LEGACY
) {

480 
	`Àgacy_exec
(
routöe
, 
queue
 -> 
mode
, queuê-> 
¨gs
, queuê-> 
sb
);

482 i‡(
queue
 -> 
mode
 & 
BLAS_PTHREAD
) {

483 (*
±hªadcom∑t
)(*Ë
queue
 -> 
routöe
;

484 (
±hªadcom∑t
)(
queue
 -> 
¨gs
);

486 (
routöe
)(
queue
 -> 
¨gs
, queuê-> 
ønge_m
, queuê-> 
ønge_n
,

487 
queue
 -> 
ß
, queuê-> 
sb
, 0);

489 i‡((
num
 > 1Ë&& 
queue
 -> 
√xt
Ë
	`exec_bœs_async_waô
(num - 1, queue ->Çext);

492 
	}
}

497 
	$BLASFUNC
(
bœs_thªad_shutdown
)(){

499 
i
;

501 i‡(!
bœs_£rvî_avaû
)  0;

503 
	`LOCK_COMMAND
(&
£rvî_lock
);

505 i‡(
bœs_£rvî_avaû
){

507 
	`SëEvít
(
poﬁ
.
kûÀd
);

509 
i
 = 0; i < 
bœs_num_thªads
 - 1; i++){

511 
DWORD
 
waô_thªad_vÆue
 = 
	`WaôF‹SögÀObje˘
(
bœs_thªads
[
i
], 50);

513 #i‚de‡
OS_WINDOWSSTORE


515 i‡(
WAIT_OBJECT_0
 !
waô_thªad_vÆue
) {

516 
	`Tîmö©eThªad
(
bœs_thªads
[
i
],0);

520 
	`Clo£H™dÀ
(
bœs_thªads
[
i
]);

523 
	`Clo£H™dÀ
(
poﬁ
.
fûÀd
);

524 
	`Clo£H™dÀ
(
poﬁ
.
kûÀd
);

526 
bœs_£rvî_avaû
 = 0;

529 
	`UNLOCK_COMMAND
(&
£rvî_lock
);

532 
	}
}

534 
	$gŸo_£t_num_thªads
(
num_thªads
)

536 
i
;

538 #i‡
	`deföed
(
SMP_SERVER
Ë&& deföed(
OS_CYGWIN_NT
)

540 i‡(
	`u∆ikñy
(
bœs_£rvî_avaû
 =0)Ë
	`bœs_thªad_öô
();

543 i‡(
num_thªads
 < 1Ënum_thªad†
bœs_˝u_numbî
;

545 i‡(
num_thªads
 > 
MAX_CPU_NUMBER
)Çum_threads = MAX_CPU_NUMBER;

547 i‡(
num_thªads
 > 
bœs_num_thªads
) {

549 
	`LOCK_COMMAND
(&
£rvî_lock
);

552 i‡(!
bœs_£rvî_avaû
){

554 
	`InôülizeCrôiˇlSe˘i⁄
(&
poﬁ
.
lock
);

555 
poﬁ
.
fûÀd
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

556 
poﬁ
.
kûÀd
 = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, NULL);

558 
poﬁ
.
shutdown
 = 0;

559 
poﬁ
.
queue
 = 
NULL
;

560 
bœs_£rvî_avaû
 = 1;

563 
i
 = 
bœs_num_thªads
 - 1; i < 
num_thªads
 - 1; i++){

565 
bœs_thªads
[
i
] = 
	`Cª©eThªad
(
NULL
, 0,

566 
bœs_thªad_£rvî
, (*)
i
,

567 0, &
bœs_thªads_id
[
i
]);

570 
bœs_num_thªads
 = 
num_thªads
;

572 
	`UNLOCK_COMMAND
(&
£rvî_lock
);

575 
bœs_˝u_numbî
 = 
num_thªads
;

576 
	}
}

578 
	$›íbœs_£t_num_thªads
(
num
)

580 
	`gŸo_£t_num_thªads
(
num
);

581 
	}
}

	@divtable.c

39 
	~"comm⁄.h
"

41 #ifde‡
SMP


42 #i‡!
deföed
(
USE64BITINT
Ë|| deföed(
ARCH_X86
)

43 
	gbœs_quick_divide_èbÀ
[] = {

63 
BLASULONG
 
	gbœs_quick_divide_èbÀ
[] = {

	@dynamic.c

39 
	~"comm⁄.h
"

41 #ifde‡
_MSC_VER


42 
	#°∫ˇ£cmp
 
_°∫icmp


	)

43 
	#°rˇ£cmp
 
_°ricmp


	)

46 #ifde‡
ARCH_X86


47 
	#EXTERN
 

	)

49 
	#EXTERN


	)

52 #ifde‡
DYNAMIC_LIST


53 
gŸobœs_t
 
gŸobœs_PRESCOTT
;

55 #ifde‡
DYN_ATHLON


56 
gŸobœs_t
 
gŸobœs_ATHLON
;

58 
	#gŸobœs_ATHLON
 
gŸobœs_PRESCOTT


	)

60 #ifde‡
DYN_KATMAI


61 
gŸobœs_t
 
gŸobœs_KATMAI
;

63 
	#gŸobœs_KATMAI
 
gŸobœs_PRESCOTT


	)

65 #ifde‡
DYN_BANIAS


66 
gŸobœs_t
 
gŸobœs_BANIAS
;

68 
	#gŸobœs_BANIAS
 
gŸobœs_PRESCOTT


	)

70 #ifde‡
DYN_COPPERMINE


71 
gŸobœs_t
 
gŸobœs_COPPERMINE
;

73 
	#gŸobœs_COPPERMINE
 
gŸobœs_PRESCOTT


	)

75 #ifde‡
DYN_NORTHWOOD


76 
gŸobœs_t
 
gŸobœs_NORTHWOOD
;

78 
	#gŸobœs_NORTHWOOD
 
gŸobœs_PRESCOTT


	)

80 #ifde‡
DYN_CORE2


81 
gŸobœs_t
 
gŸobœs_CORE2
;

83 
	#gŸobœs_CORE2
 
gŸobœs_PRESCOTT


	)

85 #ifde‡
DYN_NEHALEM


86 
gŸobœs_t
 
gŸobœs_NEHALEM
;

88 
	#gŸobœs_NEHALEM
 
gŸobœs_PRESCOTT


	)

90 #ifde‡
DYN_BARCELONA


91 
gŸobœs_t
 
gŸobœs_BARCELONA
;

92 #ñi‡
deföed
(
DYN_NEHALEM
)

93 
	#gŸobœs_BARCELONA
 
gŸobœs_NEHALEM


	)

95 
	#gŸobœs_BARCELONA
 
gŸobœs_PRESCOTT


	)

97 #ifde‡
DYN_ATOM


98 
gŸobœs_t
 
gŸobœs_ATOM
;

99 
ñif
 
	$deföed
(
DYN_NEHALEM
)

100 
	#gŸobœs_ATOM
 
gŸobœs_NEHALEM


	)

102 
	#gŸobœs_ATOM
 
gŸobœs_PRESCOTT


	)

104 #ifde‡
DYN_NANO


105 
gŸobœs_t
 
gŸobœs_NANO
;

107 
	#gŸobœs_NANO
 
gŸobœs_PRESCOTT


	)

109 #ifde‡
DYN_PENRYN


110 
gŸobœs_t
 
gŸobœs_PENRYN
;

112 
	#gŸobœs_PENRYN
 
gŸobœs_PRESCOTT


	)

114 #ifde‡
DYN_DUNNINGTON


115 
gŸobœs_t
 
gŸobœs_DUNNINGTON
;

117 
	#gŸobœs_DUNNINGTON
 
gŸobœs_PRESCOTT


	)

119 #ifde‡
DYN_OPTERON


120 
gŸobœs_t
 
gŸobœs_OPTERON
;

122 
	#gŸobœs_OPTERON
 
gŸobœs_PRESCOTT


	)

124 #ifde‡
DYN_OPTERON_SSE3


125 
gŸobœs_t
 
gŸobœs_OPTERON_SSE3
;

127 
	#gŸobœs_OPTERON_SSE3
 
gŸobœs_PRESCOTT


	)

129 #ifde‡
DYN_BOBCAT


130 
gŸobœs_t
 
gŸobœs_BOBCAT
;

131 #ñi‡
	`deföed
(
DYN_NEHALEM
)

132 
	#gŸobœs_BOBCAT
 
gŸobœs_NEHALEM


	)

134 
	#gŸobœs_BOBCAT
 
gŸobœs_PRESCOTT


	)

136 #ifde‡
DYN_SANDYBRIDGE


137 
gŸobœs_t
 
gŸobœs_SANDYBRIDGE
;

138 #ñi‡
	`deföed
(
DYN_NEHALEM
)

139 
	#gŸobœs_SANDYBRIDGE
 
gŸobœs_NEHALEM


	)

141 
	#gŸobœs_SANDYBRIDGE
 
gŸobœs_PRESCOTT


	)

143 #ifde‡
DYN_BULLDOZER


144 
gŸobœs_t
 
gŸobœs_BULLDOZER
;

145 #ñi‡
	`deföed
(
DYN_SANDYBRIDGE
)

146 
	#gŸobœs_BULLDOZER
 
gŸobœs_SANDYBRIDGE


	)

147 #ñi‡
	`deföed
(
DYN_NEHALEM
)

148 
	#gŸobœs_BULLDOZER
 
gŸobœs_NEHALEM


	)

150 
	#gŸobœs_BULLDOZER
 
gŸobœs_PRESCOTT


	)

152 #ifde‡
DYN_PILEDRIVER


153 
gŸobœs_t
 
gŸobœs_PILEDRIVER
;

154 #ñi‡
	`deföed
(
DYN_SANDYBRIDGE
)

155 
	#gŸobœs_PILEDRIVER
 
gŸobœs_SANDYBRIDGE


	)

156 #ñi‡
	`deföed
(
DYN_NEHALEM
)

157 
	#gŸobœs_PILEDRIVER
 
gŸobœs_NEHALEM


	)

159 
	#gŸobœs_PILEDRIVER
 
gŸobœs_PRESCOTT


	)

161 #ifde‡
DYN_STEAMROLLER


162 
gŸobœs_t
 
gŸobœs_STEAMROLLER
;

163 #ñi‡
	`deföed
(
DYN_SANDYBRIDGE
)

164 
	#gŸobœs_STEAMROLLER
 
gŸobœs_SANDYBRIDGE


	)

165 #ñi‡
	`deföed
(
DYN_NEHALEM
)

166 
	#gŸobœs_STEAMROLLER
 
gŸobœs_NEHALEM


	)

168 
	#gŸobœs_STEAMROLLER
 
gŸobœs_PRESCOTT


	)

170 #ifde‡
DYN_EXCAVATOR


171 
gŸobœs_t
 
gŸobœs_EXCAVATOR
;

172 #ñi‡
	`deföed
(
DYN_SANDYBRIDGE
)

173 
	#gŸobœs_EXCAVATOR
 
gŸobœs_SANDYBRIDGE


	)

174 #ñi‡
	`deföed
(
DYN_NEHALEM
)

175 
	#gŸobœs_EXCAVATOR
 
gŸobœs_NEHALEM


	)

177 
	#gŸobœs_EXCAVATOR
 
gŸobœs_PRESCOTT


	)

179 #ifde‡
DYN_HASWELL


180 
gŸobœs_t
 
gŸobœs_HASWELL
;

181 #ñi‡
	`deföed
(
DYN_SANDYBRIDGE
)

182 
	#gŸobœs_HASWELL
 
gŸobœs_SANDYBRIDGE


	)

183 #ñi‡
	`deföed
(
DYN_NEHALEM
)

184 
	#gŸobœs_HASWELL
 
gŸobœs_NEHALEM


	)

186 
	#gŸobœs_HASWELL
 
gŸobœs_PRESCOTT


	)

188 #ifde‡
DYN_ZEN


189 
gŸobœs_t
 
gŸobœs_ZEN
;

190 #ñi‡
	`deföed
(
DYN_HASWELL
)

191 
	#gŸobœs_ZEN
 
gŸobœs_HASWELL


	)

192 #ñi‡
	`deföed
(
DYN_SANDYBRIDGE
)

193 
	#gŸobœs_ZEN
 
gŸobœs_SANDYBRIDGE


	)

194 #ñi‡
	`deföed
(
DYN_NEHALEM
)

195 
	#gŸobœs_ZEN
 
gŸobœs_NEHALEM


	)

197 
	#gŸobœs_ZEN
 
gŸobœs_PRESCOTT


	)

199 #ifde‡
DYN_SKYLAKEX


200 
gŸobœs_t
 
gŸobœs_SKYLAKEX
;

201 #ñi‡
	`deföed
(
DYN_HASWELL
)

202 
	#gŸobœs_SKYLAKEX
 
gŸobœs_HASWELL


	)

203 #ñi‡
	`deföed
(
DYN_SANDYBRIDGE
)

204 
	#gŸobœs_SKYLAKEX
 
gŸobœs_SANDYBRIDGE


	)

205 #ñi‡
	`deföed
(
DYN_NEHALEM
)

206 
	#gŸobœs_SKYLAKEX
 
gŸobœs_NEHALEM


	)

208 
	#gŸobœs_SKYLAKEX
 
gŸobœs_PRESCOTT


	)

210 #ifde‡
DYN_COOPERLAKE


211 
gŸobœs_t
 
gŸobœs_COOPERLAKE
;

212 #ñi‡
	`deföed
(
DYN_SKYLAKEX
)

213 
	#gŸobœs_COOPERLAKE
 
gŸobœs_SKYLAKEX


	)

214 #ñi‡
	`deföed
(
DYN_HASWELL
)

215 
	#gŸobœs_COOPERLAKE
 
gŸobœs_HASWELL


	)

216 #ñi‡
	`deföed
(
DYN_SANDYBRIDGE
)

217 
	#gŸobœs_COOPERLAKE
 
gŸobœs_SANDYBRIDGE


	)

218 #ñi‡
	`deföed
(
DYN_NEHALEM
)

219 
	#gŸobœs_COOPERLAKE
 
gŸobœs_NEHALEM


	)

221 
	#gŸobœs_COOPERLAKE
 
gŸobœs_PRESCOTT


	)

226 
EXTERN
 
gŸobœs_t
 
gŸobœs_KATMAI
;

227 
EXTERN
 
gŸobœs_t
 
gŸobœs_COPPERMINE
;

228 
EXTERN
 
gŸobœs_t
 
gŸobœs_NORTHWOOD
;

229 
EXTERN
 
gŸobœs_t
 
gŸobœs_BANIAS
;

230 
EXTERN
 
gŸobœs_t
 
gŸobœs_ATHLON
;

232 
gŸobœs_t
 
gŸobœs_PRESCOTT
;

233 
gŸobœs_t
 
gŸobœs_CORE2
;

234 
gŸobœs_t
 
gŸobœs_NEHALEM
;

235 
gŸobœs_t
 
gŸobœs_BARCELONA
;

236 #ifde‡
DYNAMIC_OLDER


237 
gŸobœs_t
 
gŸobœs_ATOM
;

238 
gŸobœs_t
 
gŸobœs_NANO
;

239 
gŸobœs_t
 
gŸobœs_PENRYN
;

240 
gŸobœs_t
 
gŸobœs_DUNNINGTON
;

241 
gŸobœs_t
 
gŸobœs_OPTERON
;

242 
gŸobœs_t
 
gŸobœs_OPTERON_SSE3
;

243 
gŸobœs_t
 
gŸobœs_BOBCAT
;

245 
	#gŸobœs_ATOM
 
gŸobœs_NEHALEM


	)

246 
	#gŸobœs_NANO
 
gŸobœs_NEHALEM


	)

247 
	#gŸobœs_PENRYN
 
gŸobœs_CORE2


	)

248 
	#gŸobœs_DUNNINGTON
 
gŸobœs_CORE2


	)

249 
	#gŸobœs_OPTERON
 
gŸobœs_CORE2


	)

250 
	#gŸobœs_OPTERON_SSE3
 
gŸobœs_CORE2


	)

251 
	#gŸobœs_BOBCAT
 
gŸobœs_CORE2


	)

254 #i‚de‡
NO_AVX


255 
gŸobœs_t
 
gŸobœs_SANDYBRIDGE
;

256 
gŸobœs_t
 
gŸobœs_BULLDOZER
;

257 
gŸobœs_t
 
gŸobœs_PILEDRIVER
;

258 
gŸobœs_t
 
gŸobœs_STEAMROLLER
;

259 
gŸobœs_t
 
gŸobœs_EXCAVATOR
;

260 #ifde‡
NO_AVX2


261 
	#gŸobœs_HASWELL
 
gŸobœs_SANDYBRIDGE


	)

262 
	#gŸobœs_SKYLAKEX
 
gŸobœs_SANDYBRIDGE


	)

263 
	#gŸobœs_COOPERLAKE
 
gŸobœs_SANDYBRIDGE


	)

264 
	#gŸobœs_ZEN
 
gŸobœs_SANDYBRIDGE


	)

266 
gŸobœs_t
 
gŸobœs_HASWELL
;

267 
gŸobœs_t
 
gŸobœs_ZEN
;

268 #i‚de‡
NO_AVX512


269 
gŸobœs_t
 
gŸobœs_SKYLAKEX
;

270 
gŸobœs_t
 
gŸobœs_COOPERLAKE
;

272 
	#gŸobœs_SKYLAKEX
 
gŸobœs_HASWELL


	)

273 
	#gŸobœs_COOPERLAKE
 
gŸobœs_HASWELL


	)

278 
	#gŸobœs_SANDYBRIDGE
 
gŸobœs_NEHALEM


	)

279 
	#gŸobœs_HASWELL
 
gŸobœs_NEHALEM


	)

280 
	#gŸobœs_SKYLAKEX
 
gŸobœs_NEHALEM


	)

281 
	#gŸobœs_COOPERLAKE
 
gŸobœs_NEHALEM


	)

282 
	#gŸobœs_BULLDOZER
 
gŸobœs_BARCELONA


	)

283 
	#gŸobœs_PILEDRIVER
 
gŸobœs_BARCELONA


	)

284 
	#gŸobœs_STEAMROLLER
 
gŸobœs_BARCELONA


	)

285 
	#gŸobœs_EXCAVATOR
 
gŸobœs_BARCELONA


	)

286 
	#gŸobœs_ZEN
 
gŸobœs_BARCELONA


	)

291 
	#VENDOR_INTEL
 1

	)

292 
	#VENDOR_AMD
 2

	)

293 
	#VENDOR_CENTAUR
 3

	)

294 
	#VENDOR_HYGON
 4

	)

295 
	#VENDOR_UNKNOWN
 99

	)

297 
	#BITMASK
(
a
, 
b
, 
c
Ë(((◊Ë>> (b)Ë& (c)))

	)

299 #i‚de‡
NO_AVX


300 
ölöe
 
	$xgëbv
(
›
, * 
óx
, * 
edx
){

302 
__asm__
 
__vﬁ©ûe__


303 (".byã 0x0f, 0x01, 0xd0": "˜" (*
óx
), "=d" (*
edx
Ë: "c" (
›
) : "cc");

304 
	}
}

307 
	$suµ‹t_avx
(){

308 #i‚de‡
NO_AVX


309 
óx
, 
ebx
, 
ecx
, 
edx
;

310 
ªt
=0;

312 
	`˝uid
(1, &
óx
, &
ebx
, &
ecx
, &
edx
);

313 i‡((
ecx
 & (1 << 28)) != 0 && (ecx & (1 << 27)) != 0 && (ecx & (1 << 26)) != 0){

314 
	`xgëbv
(0, &
óx
, &
edx
);

315 if((
óx
 & 6) == 6){

316 
ªt
=1;

319  
ªt
;

323 
	}
}

325 
	$suµ‹t_avx2
(){

326 #i‚de‡
NO_AVX2


327 
óx
, 
ebx
, 
ecx
=0, 
edx
;

328 
ªt
=0;

330 i‡(!
	`suµ‹t_avx
())

332 
	`˝uid
(7, &
óx
, &
ebx
, &
ecx
, &
edx
);

333 if((
ebx
 & (1<<5)) != 0)

334 
ªt
=1;

335  
ªt
;

339 
	}
}

341 
	$suµ‹t_avx512
(){

342 #i‡!
	`deföed
(
NO_AVX
Ë&& !deföed(
NO_AVX512
)

343 
óx
, 
ebx
, 
ecx
, 
edx
;

344 
ªt
=0;

346 i‡(!
	`suµ‹t_avx
())

348 
	`˝uid
(7, &
óx
, &
ebx
, &
ecx
, &
edx
);

349 if((
ebx
 & (1<<5)) == 0){

350 
ªt
=0;

352 if((
ebx
 & (1<<31)) != 0){

353 
	`xgëbv
(0, &
óx
, &
edx
);

354 if((
óx
 & 0xe0) == 0xe0)

355 
ªt
=1;

357  
ªt
;

361 
	}
}

363 
	$suµ‹t_avx512_bf16
(){

364 #i‡!
	`deföed
(
NO_AVX
Ë&& !deföed(
NO_AVX512
)

365 
óx
, 
ebx
, 
ecx
, 
edx
;

366 
ªt
=0;

368 i‡(!
	`suµ‹t_avx512
())

370 
	`˝uid_cou¡
(7, 1, &
óx
, &
ebx
, &
ecx
, &
edx
);

371 if((
óx
 & 32) == 32){

372 
ªt
=1;

374  
ªt
;

378 
	}
}

380 
›íbœs_w¨nög
(
vîbo£
, c⁄° * 
msg
);

381 
	#FALLBACK_VERBOSE
 1

	)

382 
	#NEHALEM_FALLBACK
 "O≥nBLAS : You∏OS d€†nŸ suµ‹àAVX in°ru˘i⁄s. O≥nBLAS i†usög NehÆem kî√l†a†®ÁŒback, which may givêpo‹îÖîf‹m™˚.\n"

	)

383 
	#SANDYBRIDGE_FALLBACK
 "O≥nBLAS : You∏OS d€†nŸ suµ‹àAVX2 in°ru˘i⁄s. O≥nBLAS i†usög S™dybridgêkî√l†a†®ÁŒback, which may givêpo‹îÖîf‹m™˚.\n"

	)

384 
	#HASWELL_FALLBACK
 "O≥nBLAS : You∏OS d€†nŸ suµ‹àAVX512VL in°ru˘i⁄s. O≥nBLAS i†usög Haswñ»kî√l†a†®ÁŒback, which may givêpo‹îÖîf‹m™˚.\n"

	)

385 
	#BARCELONA_FALLBACK
 "O≥nBLAS : You∏OS d€†nŸ suµ‹àAVX in°ru˘i⁄s. O≥nBLAS i†usög B¨˚l⁄®kî√l†a†®ÁŒback, which may givêpo‹îÖîf‹m™˚.\n"

	)

387 
	$gë_víd‹
(){

388 
óx
, 
ebx
, 
ecx
, 
edx
;

392 
vch¨
[16];

393 
vöt
[4];

394 } 
víd‹
;

396 
	`˝uid
(0, &
óx
, &
ebx
, &
ecx
, &
edx
);

398 *(&
víd‹
.
vöt
[0]Ë
ebx
;

399 *(&
víd‹
.
vöt
[1]Ë
edx
;

400 *(&
víd‹
.
vöt
[2]Ë
ecx
;

402 
víd‹
.
vch¨
[12] = '\0';

404 i‡(!
	`°rcmp
(
víd‹
.
vch¨
, "GíuöeI¡ñ")Ë 
VENDOR_INTEL
;

405 i‡(!
	`°rcmp
(
víd‹
.
vch¨
, "AuthíticAMD")Ë 
VENDOR_AMD
;

406 i‡(!
	`°rcmp
(
víd‹
.
vch¨
, "CíèurHauls")Ë 
VENDOR_CENTAUR
;

407 i‡(!
	`°rcmp
(
víd‹
.
vch¨
, "Hyg⁄Gíuöe")Ë 
VENDOR_HYGON
;

409 i‡((
óx
 =0Ë|| (”ax & 0x500Ë!0)Ë 
VENDOR_INTEL
;

411  
VENDOR_UNKNOWN
;

412 
	}
}

414 
gŸobœs_t
 *
	$gë_c‹ëy≥
(){

416 
óx
, 
ebx
, 
ecx
, 
edx
;

417 
Ámûy
, 
exÁmûy
, 
modñ
, 
víd‹
, 
exmodñ
;

419 
	`˝uid
(1, &
óx
, &
ebx
, &
ecx
, &
edx
);

421 
Ámûy
 = 
	`BITMASK
(
óx
, 8, 0x0f);

422 
exÁmûy
 = 
	`BITMASK
(
óx
, 20, 0xff);

423 
modñ
 = 
	`BITMASK
(
óx
, 4, 0x0f);

424 
exmodñ
 = 
	`BITMASK
(
óx
, 16, 0x0f);

426 
víd‹
 = 
	`gë_víd‹
();

428 i‡(
víd‹
 =
VENDOR_INTEL
){

429 
Ámûy
) {

431 
exmodñ
) {

433 i‡(
modñ
 <0x7Ë &
gŸobœs_KATMAI
;

434 i‡((
modñ
 =0x8Ë|| (modñ =0xaË|| (modñ =0xb)Ë &
gŸobœs_COPPERMINE
;

435 i‡((
modñ
 =0x9Ë|| (modñ =0xd)Ë &
gŸobœs_BANIAS
;

436 i‡(
modñ
 =14Ë &
gŸobœs_BANIAS
;

437 i‡(
modñ
 =15Ë &
gŸobœs_CORE2
;

438  
NULL
;

441 i‡(
modñ
 =6Ë &
gŸobœs_CORE2
;

442 i‡(
modñ
 =7Ë &
gŸobœs_PENRYN
;

443 i‡(
modñ
 =13Ë &
gŸobœs_DUNNINGTON
;

444 i‡((
modñ
 =10Ë|| (modñ =11Ë|| (modñ =14Ë|| (modñ =15)Ë &
gŸobœs_NEHALEM
;

445 i‡(
modñ
 =12Ë &
gŸobœs_ATOM
;

446  
NULL
;

452 i‡(
modñ
 =5Ë &
gŸobœs_NEHALEM
;

457 i‡(
modñ
 =12 || modñ =14 || modñ =15Ë &
gŸobœs_NEHALEM
;

461 i‡(
modñ
 == 10 || model == 13) {

462 if(
	`suµ‹t_avx
())

463  &
gŸobœs_SANDYBRIDGE
;

465 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

466  &
gŸobœs_NEHALEM
;

469  
NULL
;

472 i‡(
modñ
 == 10 || model == 14) {

473 if(
	`suµ‹t_avx
())

474  &
gŸobœs_SANDYBRIDGE
;

476 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

477  &
gŸobœs_NEHALEM
;

481 i‡(
modñ
 == 12 || model == 15) {

482 if(
	`suµ‹t_avx2
())

483  &
gŸobœs_HASWELL
;

484 if(
	`suµ‹t_avx
()) {

485 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

486  &
gŸobœs_SANDYBRIDGE
;

488 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

489  &
gŸobœs_NEHALEM
;

493 i‡(
modñ
 == 13) {

494 if(
	`suµ‹t_avx2
())

495  &
gŸobœs_HASWELL
;

496 if(
	`suµ‹t_avx
()) {

497 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

498  &
gŸobœs_SANDYBRIDGE
;

500 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

501  &
gŸobœs_NEHALEM
;

504 i‡(
modñ
 =7Ë &
gŸobœs_ATOM
;

505  
NULL
;

508 i‡(
modñ
 == 5 || model == 6) {

509 if(
	`suµ‹t_avx2
())

510  &
gŸobœs_HASWELL
;

511 if(
	`suµ‹t_avx
()) {

512 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

513  &
gŸobœs_SANDYBRIDGE
;

515 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

516  &
gŸobœs_NEHALEM
;

520 i‡(
modñ
 == 7 || model == 15) {

521 if(
	`suµ‹t_avx2
())

522  &
gŸobœs_HASWELL
;

523 if(
	`suµ‹t_avx
()) {

524 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

525  &
gŸobœs_SANDYBRIDGE
;

527 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

528  &
gŸobœs_NEHALEM
;

532 i‡(
modñ
 == 14) {

533 if(
	`suµ‹t_avx2
())

534  &
gŸobœs_HASWELL
;

535 if(
	`suµ‹t_avx
()) {

536 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

537  &
gŸobœs_SANDYBRIDGE
;

539 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

540  &
gŸobœs_NEHALEM
;

544 i‡(
modñ
 == 12 || model == 13) {

545  &
gŸobœs_NEHALEM
;

547  
NULL
;

550 i‡(
modñ
 == 6) {

551 if(
	`suµ‹t_avx2
())

552  &
gŸobœs_HASWELL
;

553 if(
	`suµ‹t_avx
()) {

554 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

555  &
gŸobœs_SANDYBRIDGE
;

557 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

558  &
gŸobœs_NEHALEM
;

561 i‡(
modñ
 == 5) {

563 if(
	`suµ‹t_avx512_bf16
())

564  &
gŸobœs_COOPERLAKE
;

566 i‡(
	`suµ‹t_avx512
())

567  &
gŸobœs_SKYLAKEX
;

568 if(
	`suµ‹t_avx2
()){

569 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
HASWELL_FALLBACK
);

570  &
gŸobœs_HASWELL
;

572 if(
	`suµ‹t_avx
()) {

573 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

574  &
gŸobœs_SANDYBRIDGE
;

576 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

577  &
gŸobœs_NEHALEM
;

581 i‡(
modñ
 == 14) {

582 if(
	`suµ‹t_avx2
())

583  &
gŸobœs_HASWELL
;

584 if(
	`suµ‹t_avx
()) {

585 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

586  &
gŸobœs_SANDYBRIDGE
;

588 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

589  &
gŸobœs_NEHALEM
;

593 i‡(
modñ
 == 7) {

594 if(
	`suµ‹t_avx2
()){

595 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
HASWELL_FALLBACK
);

596  &
gŸobœs_HASWELL
;

598 if(
	`suµ‹t_avx
()) {

599 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

600  &
gŸobœs_SANDYBRIDGE
;

602 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

603  &
gŸobœs_NEHALEM
;

607 i‡(
modñ
 == 12 || model == 15) {

608  &
gŸobœs_NEHALEM
;

610  
NULL
;

612 i‡(
modñ
 == 6) {

614 if(
	`suµ‹t_avx2
())

615  &
gŸobœs_HASWELL
;

616 if(
	`suµ‹t_avx
()) {

617 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

618  &
gŸobœs_SANDYBRIDGE
;

620 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

621  &
gŸobœs_NEHALEM
;

624  
NULL
;

626 i‡(
modñ
 == 10)

627  &
gŸobœs_NEHALEM
;

628 i‡(
modñ
 == 14) {

630 i‡(
	`suµ‹t_avx512
())

631  &
gŸobœs_SKYLAKEX
;

632 if(
	`suµ‹t_avx2
()){

633 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
HASWELL_FALLBACK
);

634  &
gŸobœs_HASWELL
;

636 if(
	`suµ‹t_avx
()) {

637 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

638  &
gŸobœs_SANDYBRIDGE
;

640 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

641  &
gŸobœs_NEHALEM
;

644  
NULL
;

647 i‡(
modñ
 == 14 ) {

648 if(
	`suµ‹t_avx2
())

649  &
gŸobœs_HASWELL
;

650 if(
	`suµ‹t_avx
()) {

651 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

652  &
gŸobœs_SANDYBRIDGE
;

654 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

655  &
gŸobœs_NEHALEM
;

659 i‡(
modñ
 == 5 || model == 6) {

660 if(
	`suµ‹t_avx2
())

661  &
gŸobœs_HASWELL
;

662 if(
	`suµ‹t_avx
()) {

663 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
SANDYBRIDGE_FALLBACK
);

664  &
gŸobœs_SANDYBRIDGE
;

666 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
NEHALEM_FALLBACK
);

667  &
gŸobœs_NEHALEM
;

670  
NULL
;

673 i‡(
modñ
 <0x2Ë &
gŸobœs_NORTHWOOD
;

674  &
gŸobœs_PRESCOTT
;

678 i‡(
víd‹
 =
VENDOR_AMD
 || víd‹ =
VENDOR_HYGON
){

679 i‡(
Ámûy
 <= 0xe) {

681 
	`˝uid
(0x80000000, &
óx
, &
ebx
, &
ecx
, &
edx
);

682 i‡–(
óx
 & 0xffff) >= 0x01) {

683 
	`˝uid
(0x80000001, &
óx
, &
ebx
, &
ecx
, &
edx
);

684 i‡((
edx
 & (1 << 30)) == 0 || (edx & (1u << 31)) == 0)

685  
NULL
;

688  
NULL
;

690  &
gŸobœs_ATHLON
;

692 i‡(
Ámûy
 == 0xf){

693 i‡((
exÁmûy
 == 0) || (exfamily == 2)) {

694 i‡(
ecx
 & (1 << 0)Ë &
gŸobœs_OPTERON_SSE3
;

695  &
gŸobœs_OPTERON
;

696 } i‡(
exÁmûy
 == 5 ||Éxfamily == 7) {

697  &
gŸobœs_BOBCAT
;

698 } i‡(
exÁmûy
 == 6) {

699 if(
modñ
 == 1){

701 if(
	`suµ‹t_avx
())

702  &
gŸobœs_BULLDOZER
;

704 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

705  &
gŸobœs_BARCELONA
;

707 }if(
modñ
 == 2 || model == 3){

709 if(
	`suµ‹t_avx
())

710  &
gŸobœs_PILEDRIVER
;

712 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

713  &
gŸobœs_BARCELONA
;

715 }if(
modñ
 == 5){

716 if(
	`suµ‹t_avx
())

717  &
gŸobœs_EXCAVATOR
;

719 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

720  &
gŸobœs_BARCELONA
;

722 }if(
modñ
 == 0 || model == 8){

723 i‡(
exmodñ
 == 1) {

725 if(
	`suµ‹t_avx
())

726  &
gŸobœs_PILEDRIVER
;

728 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

729  &
gŸobœs_BARCELONA
;

731 }i‡(
exmodñ
 == 3) {

733 if(
	`suµ‹t_avx
())

734  &
gŸobœs_STEAMROLLER
;

736 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

737  &
gŸobœs_BARCELONA
;

739 }i‡(
exmodñ
 == 6) {

740 if(
	`suµ‹t_avx
())

741  &
gŸobœs_EXCAVATOR
;

743 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

744  &
gŸobœs_BARCELONA
;

749 } i‡(
exÁmûy
 == 8) {

751 if(
	`suµ‹t_avx
())

752  &
gŸobœs_ZEN
;

754 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

755  &
gŸobœs_BARCELONA
;

758 } i‡(
exÁmûy
 == 9) {

759 if(
	`suµ‹t_avx
())

760  &
gŸobœs_ZEN
;

762 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

763  &
gŸobœs_BARCELONA
;

765 } i‡(
exÁmûy
 == 10) {

766 if(
	`suµ‹t_avx
())

767  &
gŸobœs_ZEN
;

769 
	`›íbœs_w¨nög
(
FALLBACK_VERBOSE
, 
BARCELONA_FALLBACK
);

770  &
gŸobœs_BARCELONA
;

773  &
gŸobœs_BARCELONA
;

779 i‡(
víd‹
 =
VENDOR_CENTAUR
) {

780 
Ámûy
) {

782  &
gŸobœs_NANO
;

786  
NULL
;

787 
	}
}

789 *
	gc‹íame
[] = {

818 *
	$gŸobœs_c‹íame
() {

820 i‡(
gŸobœs
 =&
gŸobœs_KATMAI
Ë 
c‹íame
[ 1];

821 i‡(
gŸobœs
 =&
gŸobœs_COPPERMINE
Ë 
c‹íame
[ 2];

822 i‡(
gŸobœs
 =&
gŸobœs_NORTHWOOD
Ë 
c‹íame
[ 3];

823 i‡(
gŸobœs
 =&
gŸobœs_PRESCOTT
Ë 
c‹íame
[ 4];

824 i‡(
gŸobœs
 =&
gŸobœs_BANIAS
Ë 
c‹íame
[ 5];

825 i‡(
gŸobœs
 =&
gŸobœs_ATOM
)

826 #ifde‡
DYNAMIC_OLDER


827  
c‹íame
[ 6];

829  
c‹íame
[10];

831 i‡(
gŸobœs
 =&
gŸobœs_CORE2
Ë 
c‹íame
[ 7];

832 i‡(
gŸobœs
 =&
gŸobœs_PENRYN
)

833 #ifde‡
DYNAMIC_OLDER


834  
c‹íame
[ 8];

836  
c‹íame
[7];

838 i‡(
gŸobœs
 =&
gŸobœs_DUNNINGTON
)

839 #ifde‡
DYNAMIC_OLDER


840  
c‹íame
[ 9];

842  
c‹íame
[7];

844 i‡(
gŸobœs
 =&
gŸobœs_NEHALEM
Ë 
c‹íame
[10];

845 i‡(
gŸobœs
 =&
gŸobœs_ATHLON
Ë 
c‹íame
[11];

846 i‡(
gŸobœs
 =&
gŸobœs_OPTERON_SSE3
)

847 #ifde‡
DYNAMIC_OLDER


848  
c‹íame
[12];

850  
c‹íame
[7];

852 i‡(
gŸobœs
 =&
gŸobœs_OPTERON
)

853 #ifde‡
DYNAMIC_OLDER


854  
c‹íame
[13];

856  
c‹íame
[7];

858 i‡(
gŸobœs
 =&
gŸobœs_BARCELONA
Ë 
c‹íame
[14];

859 i‡(
gŸobœs
 =&
gŸobœs_NANO
)

860 #ifde‡
DYNAMIC_OLDER


861  
c‹íame
[15];

863  
c‹íame
[10];

865 i‡(
gŸobœs
 =&
gŸobœs_SANDYBRIDGE
Ë 
c‹íame
[16];

866 i‡(
gŸobœs
 =&
gŸobœs_BOBCAT
)

867 #ifde‡
DYNAMIC_OLDER


868  
c‹íame
[17];

870  
c‹íame
[7];

872 i‡(
gŸobœs
 =&
gŸobœs_BULLDOZER
Ë 
c‹íame
[18];

873 i‡(
gŸobœs
 =&
gŸobœs_PILEDRIVER
Ë 
c‹íame
[19];

874 i‡(
gŸobœs
 =&
gŸobœs_HASWELL
Ë 
c‹íame
[20];

875 i‡(
gŸobœs
 =&
gŸobœs_STEAMROLLER
Ë 
c‹íame
[21];

876 i‡(
gŸobœs
 =&
gŸobœs_EXCAVATOR
Ë 
c‹íame
[22];

877 i‡(
gŸobœs
 =&
gŸobœs_ZEN
Ë 
c‹íame
[23];

878 i‡(
gŸobœs
 =&
gŸobœs_SKYLAKEX
Ë 
c‹íame
[24];

879 i‡(
gŸobœs
 =&
gŸobœs_COOPERLAKE
Ë 
c‹íame
[25];

880  
c‹íame
[0];

881 
	}
}

885 
gŸobœs_t
 *
	$f‹˚_c‹ëy≥
(*
c‹ëy≥
){

887 
i
 ;

888 
found
 = -1;

889 
mesßge
[128];

892  
i
=1 ; i <= 24; i++)

894 i‡(!
	`°∫ˇ£cmp
(
c‹ëy≥
,
c‹íame
[
i
],20))

896 
found
 = 
i
;

900 i‡(
found
 < 0)

903 
	`¢¥ötf
(
mesßge
, 128, "C‹ênŸ found: %s\n",
c‹ëy≥
);

904 
	`›íbœs_w¨nög
(1, 
mesßge
);

905 (
NULL
);

908 
found
)

910 25:  (&
gŸobœs_COOPERLAKE
);

911 24:  (&
gŸobœs_SKYLAKEX
);

912 23:  (&
gŸobœs_ZEN
);

913 22:  (&
gŸobœs_EXCAVATOR
);

914 21:  (&
gŸobœs_STEAMROLLER
);

915 20:  (&
gŸobœs_HASWELL
);

916 19:  (&
gŸobœs_PILEDRIVER
);

917 18:  (&
gŸobœs_BULLDOZER
);

918 17:  (&
gŸobœs_BOBCAT
);

919 16:  (&
gŸobœs_SANDYBRIDGE
);

920 15:  (&
gŸobœs_NANO
);

921 14:  (&
gŸobœs_BARCELONA
);

922 13:  (&
gŸobœs_OPTERON
);

923 12:  (&
gŸobœs_OPTERON_SSE3
);

924 11:  (&
gŸobœs_ATHLON
);

925 10:  (&
gŸobœs_NEHALEM
);

926 9:  (&
gŸobœs_DUNNINGTON
);

927 8:  (&
gŸobœs_PENRYN
);

928 7:  (&
gŸobœs_CORE2
);

929 6:  (&
gŸobœs_ATOM
);

930 5:  (&
gŸobœs_BANIAS
);

931 4:  (&
gŸobœs_PRESCOTT
);

932 3:  (&
gŸobœs_NORTHWOOD
);

933 2:  (&
gŸobœs_COPPERMINE
);

934 1:  (&
gŸobœs_KATMAI
);

936 (
NULL
);

938 
	}
}

943 
	$gŸobœs_dy«mic_öô
() {

945 
c‹emsg
[128];

946 
c‹í
[22];

947 *
p
;

950 i‡(
gŸobœs
) ;

952 
p
 = 
	`gëív
("OPENBLAS_CORETYPE");

953 i‡–
p
 )

955 
gŸobœs
 = 
	`f‹˚_c‹ëy≥
(
p
);

959 
gŸobœs
 = 
	`gë_c‹ëy≥
();

962 #ifde‡
ARCH_X86


963 i‡(
gŸobœs
 =
NULL
ËgŸobœ†&
gŸobœs_KATMAI
;

965 i‡(
gŸobœs
 =
NULL
ËgŸobœ†&
gŸobœs_PRESCOTT
;

968 i‡(
gŸobœs
 =&
gŸobœs_KATMAI
 ||

969 
gŸobœs
 =&
gŸobœs_COPPERMINE
 ||

970 
gŸobœs
 =&
gŸobœs_NORTHWOOD
 ||

971 
gŸobœs
 =&
gŸobœs_BANIAS
 ||

972 
gŸobœs
 =&
gŸobœs_ATHLON
)

973 
gŸobœs
 = &
gŸobœs_PRESCOTT
;

977 i‡(
gŸobœs
 && gŸobœ†-> 
öô
) {

978 
	`°∫˝y
(
c‹í
,
	`gŸobœs_c‹íame
(),20);

979 
	`•rötf
(
c‹emsg
, "C‹e: %s\n",
c‹í
);

980 
	`›íbœs_w¨nög
(2, 
c‹emsg
);

981 
gŸobœs
 -> 
	`öô
();

983 
	`›íbœs_w¨nög
(0, "OpenBLAS : Architecture Initialization failed. No initialization function found.\n");

984 
	`exô
(1);

987 
	}
}

989 
	$gŸobœs_dy«mic_quô
() {

991 
gŸobœs
 = 
NULL
;

993 
	}
}

	@dynamic_arm64.c

39 
	~"comm⁄.h
"

40 #i‡(
deföed
 
OS_LINUX
 || deföed 
OS_ANDROID
)

41 
	~<asm/hwˇp.h
>

42 
	~<sys/auxv.h
>

45 
gŸobœs_t
 
gŸobœs_ARMV8
;

46 
gŸobœs_t
 
gŸobœs_CORTEXA53
;

47 
gŸobœs_t
 
gŸobœs_CORTEXA57
;

48 
gŸobœs_t
 
gŸobœs_CORTEXA72
;

49 
gŸobœs_t
 
gŸobœs_CORTEXA73
;

50 
gŸobœs_t
 
gŸobœs_FALKOR
;

51 
gŸobœs_t
 
gŸobœs_THUNDERX
;

52 
gŸobœs_t
 
gŸobœs_THUNDERX2T99
;

53 
gŸobœs_t
 
gŸobœs_TSV110
;

54 
gŸobœs_t
 
gŸobœs_EMAG8180
;

55 
gŸobœs_t
 
gŸobœs_NEOVERSEN1
;

56 
gŸobœs_t
 
gŸobœs_THUNDERX3T110
;

58 
›íbœs_w¨nög
(
vîbo£
, c⁄° * 
msg
);

60 
	#NUM_CORETYPES
 12

	)

66 #i‚de‡
HWCAP_CPUID


67 
	#HWCAP_CPUID
 (1 << 11)

	)

70 
	#gë_˝u_·r
(
id
, 
v¨
) ({ \

71 
	`__asm__
("mr†%0, "#id : "Ù" (
v¨
)); \

72 })

	)

74 *
	gc‹íame
[] = {

90 *
	$gŸobœs_c‹íame
() {

91 i‡(
gŸobœs
 =&
gŸobœs_ARMV8
Ë 
c‹íame
[ 0];

92 i‡(
gŸobœs
 =&
gŸobœs_CORTEXA53
Ë 
c‹íame
[ 1];

93 i‡(
gŸobœs
 =&
gŸobœs_CORTEXA57
Ë 
c‹íame
[ 2];

94 i‡(
gŸobœs
 =&
gŸobœs_CORTEXA72
Ë 
c‹íame
[ 3];

95 i‡(
gŸobœs
 =&
gŸobœs_CORTEXA73
Ë 
c‹íame
[ 4];

96 i‡(
gŸobœs
 =&
gŸobœs_FALKOR
Ë 
c‹íame
[ 5];

97 i‡(
gŸobœs
 =&
gŸobœs_THUNDERX
Ë 
c‹íame
[ 6];

98 i‡(
gŸobœs
 =&
gŸobœs_THUNDERX2T99
Ë 
c‹íame
[ 7];

99 i‡(
gŸobœs
 =&
gŸobœs_TSV110
Ë 
c‹íame
[ 8];

100 i‡(
gŸobœs
 =&
gŸobœs_EMAG8180
Ë 
c‹íame
[ 9];

101 i‡(
gŸobœs
 =&
gŸobœs_NEOVERSEN1
Ë 
c‹íame
[10];

102 i‡(
gŸobœs
 =&
gŸobœs_THUNDERX3T110
Ë 
c‹íame
[11];

103  
c‹íame
[
NUM_CORETYPES
];

104 
	}
}

106 
gŸobœs_t
 *
	$f‹˚_c‹ëy≥
(*
c‹ëy≥
) {

107 
i
 ;

108 
found
 = -1;

109 
mesßge
[128];

111  
i
=0 ; i < 
NUM_CORETYPES
; i++)

113 i‡(!
	`°∫ˇ£cmp
(
c‹ëy≥
, 
c‹íame
[
i
], 20))

115 
found
 = 
i
;

120 
found
)

122 0:  (&
gŸobœs_ARMV8
);

123 1:  (&
gŸobœs_CORTEXA53
);

124 2:  (&
gŸobœs_CORTEXA57
);

125 3:  (&
gŸobœs_CORTEXA72
);

126 4:  (&
gŸobœs_CORTEXA73
);

127 5:  (&
gŸobœs_FALKOR
);

128 6:  (&
gŸobœs_THUNDERX
);

129 7:  (&
gŸobœs_THUNDERX2T99
);

130 8:  (&
gŸobœs_TSV110
);

131 9:  (&
gŸobœs_EMAG8180
);

132 10:  (&
gŸobœs_NEOVERSEN1
);

133 11:  (&
gŸobœs_THUNDERX3T110
);

135 
	`¢¥ötf
(
mesßge
, 128, "C‹ênŸ found: %s\n", 
c‹ëy≥
);

136 
	`›íbœs_w¨nög
(1, 
mesßge
);

137  
NULL
;

138 
	}
}

140 
gŸobœs_t
 *
	$gë_c‹ëy≥
() {

141 
im∂emíãr
, 
v¨ü¡
, 
∑π
, 
¨ch
, 
ªvisi⁄
, 
midr_ñ1
;

142 
c‹emsg
[128];

144 #i‡(!
deföed
 
OS_LINUX
 && !deföed 
OS_ANDROID
)

145  
NULL
;

148 i‡(!(
	`gëauxvÆ
(
AT_HWCAP
Ë& 
HWCAP_CPUID
)) {

149 #ifde‡
__löux


150 
FILE
 *
öfûe
;

151 
buf„r
[512], *
p
, *
˝u_∑π
 = 
NULL
, *
˝u_im∂emíãr
 = NULL;

152 
p
 = (*Ë
NULL
 ;

153 
öfûe
 = 
	`f›í
("/sys/devices/system/cpu/cpu0/regs/identification/midr_el1","r");

154 i‡(!
öfûe
Ë 
NULL
;

155 
	`fgës
(
buf„r
, (buf„r), 
öfûe
);

156 
midr_ñ1
=
	`°πoul
(
buf„r
,
NULL
,16);

157 
	`f˛o£
(
öfûe
);

159 
	`¢¥ötf
(
c‹emsg
, 128, "KernelÜacks cpuid feature support. Auto detection of coreÅype failed !!!\n");

160 
	`›íbœs_w¨nög
(1, 
c‹emsg
);

161  
NULL
;

164 
	`gë_˝u_·r
(
MIDR_EL1
, 
midr_ñ1
);

174 
im∂emíãr
 = (
midr_ñ1
 >> 24) & 0xFF;

175 
∑π
 = (
midr_ñ1
 >> 4) & 0xFFF;

177 
im∂emíãr
)

180 
∑π
)

183  &
gŸobœs_CORTEXA53
;

185  &
gŸobœs_CORTEXA57
;

187  &
gŸobœs_CORTEXA72
;

189  &
gŸobœs_CORTEXA73
;

191  &
gŸobœs_NEOVERSEN1
;

195 
∑π
)

198  &
gŸobœs_THUNDERX2T99
;

202 
∑π
)

205  &
gŸobœs_THUNDERX
;

207  &
gŸobœs_THUNDERX2T99
;

209  &
gŸobœs_THUNDERX3T110
;

213 
∑π
)

216  &
gŸobœs_TSV110
;

220 
∑π
)

223  &
gŸobœs_EMAG8180
;

227 
∑π
)

230  &
gŸobœs_FALKOR
;

234 
	`¢¥ötf
(
c‹emsg
, 128, "Unknow¿CPU modñ - im∂emíã∏%xÖ¨à%x\n",
im∂emíãr
,
∑π
);

235 
	`›íbœs_w¨nög
(1, 
c‹emsg
);

237  
NULL
;

239 
	}
}

241 
	$gŸobœs_dy«mic_öô
() {

243 
c‹emsg
[128];

244 
c‹í
[22];

245 *
p
;

247 i‡(
gŸobœs
) ;

249 
p
 = 
	`gëív
("OPENBLAS_CORETYPE");

250 i‡–
p
 )

252 
gŸobœs
 = 
	`f‹˚_c‹ëy≥
(
p
);

256 
gŸobœs
 = 
	`gë_c‹ëy≥
();

259 i‡(
gŸobœs
 =
NULL
)

261 
	`¢¥ötf
(
c‹emsg
, 128, "Falling backÅo generic ARMV8 core\n");

262 
	`›íbœs_w¨nög
(1, 
c‹emsg
);

263 
gŸobœs
 = &
gŸobœs_ARMV8
;

266 i‡(
gŸobœs
 && gŸobœs->
öô
) {

267 
	`°∫˝y
(
c‹í
, 
	`gŸobœs_c‹íame
(), 20);

268 
	`•rötf
(
c‹emsg
, "C‹e: %s\n", 
c‹í
);

269 
	`›íbœs_w¨nög
(2, 
c‹emsg
);

270 
gŸobœs
 -> 
	`öô
();

272 
	`›íbœs_w¨nög
(0, "OpenBLAS : Architecture Initialization failed. No initialization function found.\n");

273 
	`exô
(1);

276 
	}
}

278 
	$gŸobœs_dy«mic_quô
() {

279 
gŸobœs
 = 
NULL
;

280 
	}
}

	@dynamic_mips64.c

33 
	~<sys/waô.h
>

34 
	~<°dio.h
>

35 
	~<uni°d.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<sys/ªsour˚.h
>

39 
	~"comm⁄.h
"

41 
gŸobœs_t
 
gŸobœs_LOONGSON3R3
;

42 
gŸobœs_t
 
gŸobœs_LOONGSON3R4
;

44 
›íbœs_w¨nög
(
vîbo£
, c⁄° * 
msg
);

46 
	#NUM_CORETYPES
 2

	)

48 *
	gc‹íame
[] = {

54 *
	$gŸobœs_c‹íame
() {

55 i‡(
gŸobœs
 =&
gŸobœs_LOONGSON3R3
Ë 
c‹íame
[0];

56 i‡(
gŸobœs
 =&
gŸobœs_LOONGSON3R4
Ë 
c‹íame
[1];

57  
c‹íame
[
NUM_CORETYPES
];

58 
	}
}

60 
gŸobœs_t
 *
	$f‹˚_c‹ëy≥
(*
c‹ëy≥
) {

61 
i
;

62 
found
 = -1;

63 
mesßge
[128];

65  
i
=0 ; i < 
NUM_CORETYPES
; i++)

67 i‡(!
	`°∫ˇ£cmp
(
c‹ëy≥
, 
c‹íame
[
i
], 20))

69 
found
 = 
i
;

74 
found
)

76 0:  (&
gŸobœs_LOONGSON3R3
);

77 1:  (&
gŸobœs_LOONGSON3R4
);

79 
	`¢¥ötf
(
mesßge
, 128, "C‹ênŸ found: %s\n", 
c‹ëy≥
);

80 
	`›íbœs_w¨nög
(1, 
mesßge
);

81  
NULL
;

82 
	}
}

84 
	#MMI_MASK
 0x00000010

	)

85 
	#MSA_MASK
 0x00000020

	)

87 
	gfd
[2];

88 
	gsuµ‹t_˝ucfg
;

90 
	$h™dÀr
(
signum
)

92 
	`˛o£
(
fd
[1]);

93 
	`exô
(1);

94 
	}
}

100 
	$˝ucfg_ã°
() {

101 
pid_t
 
pid
;

102 
°©us
 = 0;

104 
suµ‹t_˝ucfg
 = 0;

105 
	`pùe
(
fd
);

106 
pid
 = 
	`f‹k
();

107 i‡(
pid
 == 0) {

108 
siga˘i⁄
 
a˘
;

109 
	`˛o£
(
fd
[0]);

111 
a˘
.
ß_h™dÀr
 = 
h™dÀr
;

112 
	`siga˘i⁄
(
SIGILL
,&
a˘
,
NULL
);

115 
__asm__
 volatile(

120 
suµ‹t_˝ucfg
 = 1;

121 
	`wrôe
(
fd
[1],&
suµ‹t_˝ucfg
,(support_cpucfg));

122 
	`˛o£
(
fd
[1]);

123 
	`exô
(0);

124 } i‡(
pid
 > 0){

125 
	`˛o£
(
fd
[1]);

126 i‡((
	`waôpid
(
pid
,&
°©us
,0) <= 0) ||

127 (
	`ªad
(
fd
[0],&
suµ‹t_˝ucfg
,(support_cpucfg)) <= 0))

128 
suµ‹t_˝ucfg
 = 0;

129 
	`˛o£
(
fd
[0]);

131 
suµ‹t_˝ucfg
 = 0;

134  
suµ‹t_˝ucfg
;

135 
	}
}

137 
gŸobœs_t
 *
	$gë_c‹ëy≥_‰om_˝ucfg
() {

138 
Êag
 = 0;

139 
__asm__
 volatile(

145 : "r"(&
Êag
)

148 i‡(
Êag
 & 
MSA_MASK
)

149  (&
gŸobœs_LOONGSON3R4
);

150 i‡(
Êag
 & 
MMI_MASK
)

151  (&
gŸobœs_LOONGSON3R3
);

152  
NULL
;

153 
	}
}

155 
gŸobœs_t
 *
	$gë_c‹ëy≥_‰om_˝uöfo
() {

156 #ifde‡
löux


157 
FILE
 *
öfûe
;

158 
buf„r
[512], *
p
;

160 
p
 = (*)
NULL
;

162 
öfûe
 = 
	`f›í
("/proc/cpuinfo", "r");

163 
	`fgës
(
buf„r
, (buf„r), 
öfûe
)){

164 i‡(!
	`°∫cmp
("modñÇame", 
buf„r
, 10)){

165 
p
 = 
	`°rchr
(
buf„r
, ':') + 2;

169 
	`f˛o£
(
öfûe
);

170 if(
p
 !
NULL
){

171 i‡(
	`°r°r
(
p
, "Loongson-3A3000") || strstr(p, "Loongson-3B3000"))

172  (&
gŸobœs_LOONGSON3R3
);

173 if(
	`°r°r
(
p
, "Loongson-3A4000") || strstr(p, "Loongson-3B4000"))

174  (&
gŸobœs_LOONGSON3R4
);

176  
NULL
;

179  
NULL
;

180 
	}
}

182 
gŸobœs_t
 *
	$gë_c‹ëy≥
() {

183 
ªt
 = 0;

185 
ªt
 = 
	`˝ucfg_ã°
();

186 i‡(
ªt
 == 1)

187  
	`gë_c‹ëy≥_‰om_˝ucfg
();

189  
	`gë_c‹ëy≥_‰om_˝uöfo
();

190 
	}
}

192 
	$gŸobœs_dy«mic_öô
() {

193 
c‹emsg
[128];

194 
c‹í
[22];

195 *
p
;

197 i‡(
gŸobœs
) ;

199 
p
 = 
	`gëív
("OPENBLAS_CORETYPE");

200 i‡–
p
 )

202 
gŸobœs
 = 
	`f‹˚_c‹ëy≥
(
p
);

206 
gŸobœs
 = 
	`gë_c‹ëy≥
();

209 i‡(
gŸobœs
 =
NULL
)

211 
	`¢¥ötf
(
c‹emsg
, 128, "Falling backÅoÜoongson3r3 core\n");

212 
	`›íbœs_w¨nög
(1, 
c‹emsg
);

213 
gŸobœs
 = &
gŸobœs_LOONGSON3R3
;

216 i‡(
gŸobœs
 && gŸobœs->
öô
) {

217 
	`°∫˝y
(
c‹í
, 
	`gŸobœs_c‹íame
(), 20);

218 
	`•rötf
(
c‹emsg
, "C‹e: %s\n", 
c‹í
);

219 
	`›íbœs_w¨nög
(2, 
c‹emsg
);

220 
gŸobœs
 -> 
	`öô
();

222 
	`›íbœs_w¨nög
(0, "OpenBLAS : Architecture Initialization failed. No initialization function found.\n");

223 
	`exô
(1);

226 
	}
}

228 
	$gŸobœs_dy«mic_quô
() {

229 
gŸobœs
 = 
NULL
;

230 
	}
}

	@dynamic_power.c

2 
	~"comm⁄.h
"

4 
gŸobœs_t
 
gŸobœs_POWER6
;

5 
gŸobœs_t
 
gŸobœs_POWER8
;

6 #i‡(!
deföed
 
__GNUC__
) || ( __GNUC__ >= 6)

7 
gŸobœs_t
 
gŸobœs_POWER9
;

13 #ifde‡
HAVE_P10_SUPPORT


14 
gŸobœs_t
 
gŸobœs_POWER10
;

17 
›íbœs_w¨nög
(
vîbo£
, c⁄° *
msg
);

19 *
	gc‹íame
[] = {

27 
	#NUM_CORETYPES
 4

	)

29 *
	$gŸobœs_c‹íame
() {

30 #i‚de‡
C_PGI


31 i‡(
gŸobœs
 =&
gŸobœs_POWER6
Ë 
c‹íame
[1];

33 i‡(
gŸobœs
 =&
gŸobœs_POWER8
Ë 
c‹íame
[2];

34 #i‡(!
deföed
 
__GNUC__
) || ( __GNUC__ >= 6)

35 i‡(
gŸobœs
 =&
gŸobœs_POWER9
Ë 
c‹íame
[3];

37 #ifde‡
HAVE_P10_SUPPORT


38 i‡(
gŸobœs
 =&
gŸobœs_POWER10
Ë 
c‹íame
[4];

40  
c‹íame
[0];

41 
	}
}

43 #ifde‡
C_PGI


53 
	~<°rög.h
>

61 
	#CPU_UNKNOWN
 0

	)

62 
	#CPU_POWER5
 5

	)

63 
	#CPU_POWER6
 6

	)

64 
	#CPU_POWER8
 8

	)

65 
	#CPU_POWER9
 9

	)

66 
	#CPU_POWER10
 10

	)

69 
uöt32_t
 
	mpvr_mask
;

70 
uöt32_t
 
	mpvr_vÆue
;

71 c⁄° * 
	m˝u_«me
;

72 
uöt32_t
 
	m˝u_ty≥
;

73 } 
	gpvrPOWER
 [] = {

76 .
pvr_mask
 = 0xffffffff,

77 .
	gpvr_vÆue
 = 0x0f000001,

78 .
	g˝u_«me
 = "POWER5+",

79 .
	g˝u_ty≥
 = 
CPU_POWER5
,

83 .
	gpvr_mask
 = 0xffff0000,

84 .
	gpvr_vÆue
 = 0x003e0000,

85 .
	g˝u_«me
 = "POWER6 (raw)",

86 .
	g˝u_ty≥
 = 
CPU_POWER6
,

90 .
	gpvr_mask
 = 0xffff0000,

91 .
	gpvr_vÆue
 = 0x003f0000,

92 .
	g˝u_«me
 = "POWER7 (raw)",

93 .
	g˝u_ty≥
 = 
CPU_POWER6
,

97 .
	gpvr_mask
 = 0xffff0000,

98 .
	gpvr_vÆue
 = 0x004A0000,

99 .
	g˝u_«me
 = "POWER7+ (raw)",

100 .
	g˝u_ty≥
 = 
CPU_POWER6
,

104 .
	gpvr_mask
 = 0xffff0000,

105 .
	gpvr_vÆue
 = 0x004b0000,

106 .
	g˝u_«me
 = "POWER8E (raw)",

107 .
	g˝u_ty≥
 = 
CPU_POWER8
,

111 .
	gpvr_mask
 = 0xffff0000,

112 .
	gpvr_vÆue
 = 0x004c0000,

113 .
	g˝u_«me
 = "POWER8NVL (raw)",

114 .
	g˝u_ty≥
 = 
CPU_POWER8
,

118 .
	gpvr_mask
 = 0xffff0000,

119 .
	gpvr_vÆue
 = 0x004d0000,

120 .
	g˝u_«me
 = "POWER8 (raw)",

121 .
	g˝u_ty≥
 = 
CPU_POWER8
,

125 .
	gpvr_mask
 = 0xffffefff,

126 .
	gpvr_vÆue
 = 0x004e0200,

127 .
	g˝u_«me
 = "POWER9 (raw)",

128 .
	g˝u_ty≥
 = 
CPU_POWER9
,

132 .
	gpvr_mask
 = 0xffffefff,

133 .
	gpvr_vÆue
 = 0x004e0201,

134 .
	g˝u_«me
 = "POWER9 (raw)",

135 .
	g˝u_ty≥
 = 
CPU_POWER9
,

139 .
	gpvr_mask
 = 0xffff0000,

140 .
	gpvr_vÆue
 = 0x004e0000,

141 .
	g˝u_«me
 = "POWER9 (raw)",

142 .
	g˝u_ty≥
 = 
CPU_POWER9
,

146 .
	gpvr_mask
 = 0xffff0000,

147 .
	gpvr_vÆue
 = 0x00800000,

148 .
	g˝u_«me
 = "POWER10 (raw)",

149 .
	g˝u_ty≥
 = 
CPU_POWER10
,

153 .
	gpvr_mask
 = 0x0,

154 .
	gpvr_vÆue
 = 0x0,

155 .
	g˝u_«me
 = "Unknown",

156 .
	g˝u_ty≥
 = 
CPU_UNKNOWN
,

160 
	$__buûtö_˝u_is
(c⁄° *
˝u
) {

161 
i
;

162 
uöt32_t
 
pvr
;

163 
uöt32_t
 
˝u_ty≥
;

165 
	`asm
("mÂv∏ %0" : "Ù"(
pvr
));

167 
i
 = 0 ; i <  
pvrPOWER
 /  *pvrPOWER ; ++i) {

168 i‡((
pvr
 & 
pvrPOWER
[
i
].
pvr_mask
Ë=pvrPOWER[i].
pvr_vÆue
) {

173 #i‡
	`deföed
(
DEBUG
)

174 
	`¥ötf
("%s:Ñëu∫ög CPU=%s, cpu_ty≥=%p\n", 
__func__
,

175 
pvrPOWER
[
i
].
˝u_«me
,ÖvrPOWER[i].
˝u_ty≥
);

177 
˝u_ty≥
 = 
pvrPOWER
[
i
].cpu_type;

179 i‡(!
	`°rcmp
(
˝u
, "power8"))

180  
˝u_ty≥
 =
CPU_POWER8
;

181 i‡(!
	`°rcmp
(
˝u
, "power9"))

182  
˝u_ty≥
 =
CPU_POWER9
;

184 
	}
}

188 
gŸobœs_t
 *
	$gë_c‹ëy≥
() {

190 #i‚de‡
C_PGI


191 i‡(
	`__buûtö_˝u_is
("power6") || __builtin_cpu_is("power6x"))

192  &
gŸobœs_POWER6
;

194 i‡(
	`__buûtö_˝u_is
("power8"))

195  &
gŸobœs_POWER8
;

196 #i‡(!
deföed
 
__GNUC__
) || ( __GNUC__ >= 6)

197 i‡(
	`__buûtö_˝u_is
("power9"))

198  &
gŸobœs_POWER9
;

200 #ifde‡
HAVE_P10_SUPPORT


201 i‡(
	`__buûtö_˝u_suµ‹ts
 ("arch_3_1") && __builtin_cpu_supports ("mma"))

202  &
gŸobœs_POWER10
;

205 #i‡(!
deföed
 
__GNUC__
) || ( __GNUC__ >= 6)

206 i‡(
	`__buûtö_˝u_is
("power10"))

207  &
gŸobœs_POWER9
;

209  
NULL
;

210 
	}
}

212 
gŸobœs_t
 *
	$f‹˚_c‹ëy≥
(* 
c‹ëy≥
) {

214 
i
 ;

215 
found
 = -1;

216 
mesßge
[128];

218  
i
 = 0 ; i < 
NUM_CORETYPES
; i++)

220 i‡(!
	`°∫ˇ£cmp
(
c‹ëy≥
, 
c‹íame
[
i
], 20))

222 
found
 = 
i
;

227 
found
)

229 #i‚de‡
C_PGI


230 1:  (&
gŸobœs_POWER6
);

232 2:  (&
gŸobœs_POWER8
);

233 #i‡(!
deföed
 
__GNUC__
) || ( __GNUC__ >= 6)

234 3:  (&
gŸobœs_POWER9
);

236 #ifde‡
HAVE_P10_SUPPORT


237 4:  (&
gŸobœs_POWER10
);

239 :  
NULL
;

241 
	`¢¥ötf
(
mesßge
, 128, "C‹ênŸ found: %s\n", 
c‹ëy≥
);

242 
	`›íbœs_w¨nög
(1, 
mesßge
);

243 
	}
}

245 
	$gŸobœs_dy«mic_öô
() {

247 
c‹emsg
[128];

248 
c‹í
[22];

249 *
p
;

252 i‡(
gŸobœs
) ;

254 
p
 = 
	`gëív
("OPENBLAS_CORETYPE");

255 i‡–
p
 )

257 
gŸobœs
 = 
	`f‹˚_c‹ëy≥
(
p
);

261 
gŸobœs
 = 
	`gë_c‹ëy≥
();

264 i‡(
gŸobœs
 =
NULL
)

266 
	`¢¥ötf
(
c‹emsg
, 128, "Falling backÅo POWER8 core\n");

267 
	`›íbœs_w¨nög
(1, 
c‹emsg
);

268 
gŸobœs
 = &
gŸobœs_POWER8
;

271 i‡(
gŸobœs
 && gŸobœ†-> 
öô
) {

272 
	`°∫˝y
(
c‹í
,
	`gŸobœs_c‹íame
(),20);

273 
	`•rötf
(
c‹emsg
, "C‹e: %s\n",
c‹í
);

274 
	`›íbœs_w¨nög
(2, 
c‹emsg
);

275 
gŸobœs
 -> 
	`öô
();

277 
	`›íbœs_w¨nög
(0, "OpenBLAS : Architecture Initialization failed. No initialization function found.\n");

278 
	`exô
(1);

280 
	}
}

282 
	$gŸobœs_dy«mic_quô
() {

283 
gŸobœs
 = 
NULL
;

284 
	}
}

	@dynamic_zarch.c

1 
	~"comm⁄.h
"

2 
	~<°dboﬁ.h
>

5 #ifde‡
__GLIBC__


6 
	~<„©uªs.h
>

7 #i‡
__GLIBC_PREREQ
(2, 16)

8 
	~<sys/auxv.h
>

9 
	#HAVE_GETAUXVAL
 1

	)

11 
	$gë_hwˇp
()

13 
hwˇp
 = 
	`gëauxvÆ
(
AT_HWCAP
);

14 *
maskív
;

17 
maskív
 = 
	`gëív
("LD_HWCAP_MASK");

18 i‡(
maskív
)

19 
hwˇp
 &
	`°πoul
(
maskív
, 
NULL
, 0);

21  
hwˇp
;

24 
	}
}

29 
	$gë_hwˇp
() {

33 
	}
}

37 
gŸobœs_t
 
gŸobœs_ZARCH_GENERIC
;

38 #ifde‡
DYN_Z13


39 
gŸobœs_t
 
gŸobœs_Z13
;

41 #ifde‡
DYN_Z14


42 
gŸobœs_t
 
gŸobœs_Z14
;

45 
	#NUM_CORETYPES
 4

	)

47 
›íbœs_w¨nög
(
vîbo£
, c⁄° * 
msg
);

49 * 
	gc‹íame
[] = {

56 * 
	$gŸobœs_c‹íame
() {

57 #ifde‡
DYN_Z13


58 i‡(
gŸobœs
 =&
gŸobœs_Z13
Ë 
c‹íame
[1];

60 #ifde‡
DYN_Z14


61 i‡(
gŸobœs
 =&
gŸobœs_Z14
Ë 
c‹íame
[2];

63 i‡(
gŸobœs
 =&
gŸobœs_ZARCH_GENERIC
Ë 
c‹íame
[3];

65  
c‹íame
[0];

66 
	}
}

68 #i‚de‡
HWCAP_S390_VXE


69 
	#HWCAP_S390_VXE
 8192

	)

80 
gŸobœs_t
* 
	$gë_c‹ëy≥
() {

82 
hwˇp
 
	`__©åibuã__
((
unu£d
)Ë
	`gë_hwˇp
();

84 #ifde‡
DYN_Z14


87 i‡((
hwˇp
 & 
HWCAP_S390_VX
Ë&& (hwˇ∞& 
HWCAP_S390_VXE
))

88  &
gŸobœs_Z14
;

91 #ifde‡
DYN_Z13


93 i‡(
hwˇp
 & 
HWCAP_S390_VX
)

94  &
gŸobœs_Z13
;

100  &
gŸobœs_ZARCH_GENERIC
;

101 
	}
}

103 
gŸobœs_t
* 
	$f‹˚_c‹ëy≥
(* 
c‹ëy≥
) {

105 
i
;

106 
found
 = -1;

107 
mesßge
[128];

109 
i
 = 0; i < 
NUM_CORETYPES
; i++)

111 i‡(!
	`°∫ˇ£cmp
(
c‹ëy≥
, 
c‹íame
[
i
], 20))

113 
found
 = 
i
;

118 i‡(
found
 == 1) {

119 #ifde‡
DYN_Z13


120  &
gŸobœs_Z13
;

122 
	`›íbœs_w¨nög
(1, "Z13 supportÇot compiled in");

123  
NULL
;

125 } i‡(
found
 == 2) {

126 #ifde‡
DYN_Z14


127  &
gŸobœs_Z14
;

129 
	`›íbœs_w¨nög
(1, "Z14 supportÇot compiled in");

130  
NULL
;

132 } i‡(
found
 == 3) {

133  &
gŸobœs_ZARCH_GENERIC
;

136 
	`¢¥ötf
(
mesßge
, 128, "C‹ênŸ found: %s\n", 
c‹ëy≥
);

137 
	`›íbœs_w¨nög
(1, 
mesßge
);

138  
NULL
;

139 
	}
}

141 
	$gŸobœs_dy«mic_öô
() {

143 
c‹emsg
[128];

144 
c‹í
[22];

145 * 
p
;

148 i‡(
gŸobœs
) ;

150 
p
 = 
	`gëív
("OPENBLAS_CORETYPE");

151 i‡(
p
)

153 
gŸobœs
 = 
	`f‹˚_c‹ëy≥
(
p
);

157 
gŸobœs
 = 
	`gë_c‹ëy≥
();

160 i‡(
gŸobœs
 =
NULL
)

162 
	`¢¥ötf
(
c‹emsg
, 128, "FailedÅo detect system, falling backÅo generic z support.\n");

163 
	`›íbœs_w¨nög
(1, 
c‹emsg
);

164 
gŸobœs
 = &
gŸobœs_ZARCH_GENERIC
;

167 i‡(
gŸobœs
 && gŸobœs->
öô
) {

168 
	`°∫˝y
(
c‹í
, 
	`gŸobœs_c‹íame
(), 20);

169 
	`•rötf
(
c‹emsg
, "C‹e: %s\n", 
c‹í
);

170 
	`›íbœs_w¨nög
(2, 
c‹emsg
);

171 
gŸobœs
->
	`öô
();

174 
	`›íbœs_w¨nög
(0, "OpenBLAS : Architecture Initialization failed. No initialization function found.\n");

175 
	`exô
(1);

177 
	}
}

179 
	$gŸobœs_dy«mic_quô
() {

180 
gŸobœs
 = 
NULL
;

181 
	}
}

	@init.c

73 
	~"comm⁄.h
"

75 #i‡
deföed
(
OS_LINUX
Ë&& deföed(
SMP
)

77 
	#_GNU_SOURCE


	)

79 
	~<sys/sysöfo.h
>

80 
	~<sys/sysˇŒ.h
>

81 
	~<sys/ty≥s.h
>

82 
	~<î∫o.h
>

83 
	~<sys/shm.h
>

84 
	~<f˙é.h
>

85 
	~<sched.h
>

86 
	~<dúít.h
>

87 
	~<dlf˙.h
>

88 
	~<uni°d.h
>

89 
	~<°rög.h
>

91 #i‡
deföed
(
BIGNUMA
)

96 
	#MAX_NODES
 128

	)

97 
	#MAX_CPUS
 1024

	)

99 
	#MAX_NODES
 16

	)

100 
	#MAX_CPUS
 256

	)

103 
	#NCPUBITS
 (8*())

	)

104 
	#MAX_BITMASK_LEN
 (
MAX_CPUS
/
NCPUBITS
)

	)

105 
	#CPUELT
(
˝u
Ë((˝uË/ 
NCPUBITS
)

	)

106 
	#CPUMASK
(
˝u
Ë((Ë1UL << ((˝uË% 
NCPUBITS
))

	)

109 
	#SH_MAGIC
 0x510510

	)

111 
	#CPUMAP_NAME
 "/sys/devi˚s/sy°em/node/node%d/˝um≠"

	)

112 
	#SHARE_NAME
 "/sys/devi˚s/sy°em/˝u/˝u%d/ˇche/ödex%d/sh¨ed_˝u_m≠"

	)

113 
	#NODE_DIR
 "/sys/devi˚s/sy°em/node"

	)

119 
	mlock
;

120 
	mmagic
;

121 
	mshmid
;

123 
	mnum_nodes
;

124 
	mnum_¥ocs
;

125 
	mföÆ_num_¥ocs
;

126 
	mavaû
 [
MAX_BITMASK_LEN
];

127 
	mavaû_cou¡
;

128 
	m˝u_öfo
 [
MAX_CPUS
];

129 
	mnode_öfo
 [
MAX_NODES
][
MAX_BITMASK_LEN
];

130 
	m˝u_u£
[
MAX_CPUS
];

132 } 
	tshm_t
;

134 
˝u_£t_t
 
	g˝u_‹ig_mask
[4];

136 
	g˝u_m≠pög
[
MAX_CPUS
];

137 
	gnode_m≠pög
[
MAX_CPUS
 * 4];

138 
	g˝u_sub_m≠pög
[
MAX_CPUS
];

139 
	gdißbÀ_m≠pög
;

142 
	gnode_˝u
[
MAX_NODES
];

143 
	gnode_equÆ
 = 0;

145 
shm_t
 *
	gcomm⁄
 = (*)-1;

146 
	gshmid
, 
	gpshmid
;

147 *
	g∑ddr
;

149 
	gÕrocmask
[
MAX_BITMASK_LEN
], 
	g odemask
;

150 
	gÕrocmask_cou¡
 = 0;

151 
	gnum¥ocs
 = 1;

152 
	gnumnodes
 = 1;

155 
	#READ_CPU
(
x
Ë–(xË& 0xff)

	)

156 
	#READ_NODE
(
x
Ë(((xË>> 8Ë& 0xff)

	)

157 
	#READ_CORE
(
x
Ë(((xË>> 16Ë& 0xff)

	)

159 
	#WRITE_CPU
(
x
Ë(x)

	)

160 
	#WRITE_NODE
(
x
Ë((xË<< 8)

	)

161 
	#WRITE_CORE
(
x
Ë((xË<< 16)

	)

163 
	#READ_CPU
(
x
Ë–(xË& 0xff)

	)

164 
	#READ_CORE
(
x
Ë(((xË>> 8Ë& 0xff)

	)

165 
	#READ_NODE
(
x
Ë(((xË>> 16Ë& 0xff)

	)

167 
	#WRITE_CPU
(
x
Ë(x)

	)

168 
	#WRITE_CORE
(
x
Ë((xË<< 8)

	)

169 
	#WRITE_NODE
(
x
Ë((xË<< 16)

	)

172 
ölöe
 
	$p›cou¡
(
numbî
) {

174 
cou¡
 = 0;

176 
numbî
 > 0) {

177 i‡(
numbî
 & 1Ë
cou¡
 ++;

178 
numbî
 >>= 1;

181  
cou¡
;

182 
	}
}

184 
ölöe
 
	$rcou¡
(
numbî
) {

186 
cou¡
 = -1;

188 (
numbî
 > 0) && ((number & 0)) == 0) {

189 
cou¡
 ++;

190 
numbî
 >>= 1;

193  
cou¡
;

194 
	}
}

201 
ölöe
 
	$gë_˝um≠
(
node
, * 
node_öfo
) {

203 
öfûe
;

204 
afföôy
[32];

205 
«me
[160];

206 
˝um≠
[160];

207 *
dummy
;

208 
i
=0;

209 
cou¡
=0;

210 
k
=0;

212 
	`•rötf
(
«me
, 
CPUMAP_NAME
, 
node
);

214 
öfûe
 = 
	`›í
(
«me
, 
O_RDONLY
);

215 
i
=0; i<32; i++){

216 
afföôy
[
i
] = 0;

219 i‡(
öfûe
 != -1) {

221 
	`ªad
(
öfûe
, 
˝um≠
, (cpumap));

223 
i
=0; i<160; i++){

224 if(
˝um≠
[
i
] == '\n')

226 if(
˝um≠
[
i
] != ','){

227 
«me
[
k
++]=
˝um≠
[
i
];

230 if(
k
 >
NCPUBITS
/4){

231 
afföôy
[
cou¡
++] = 
	`°πoul
(
«me
, &
dummy
, 16);

232 
k
=0;

237 if(
k
!=0){

238 
«me
[
k
]='\0';

239 
afföôy
[
cou¡
++] = 
	`°πoul
(
«me
, &
dummy
, 16);

244 
i
=0; i<
cou¡
 && i<
MAX_BITMASK_LEN
; i++){

245 
node_öfo
[
i
]=
afföôy
[
cou¡
-i-1];

247 
	`˛o£
(
öfûe
);

251 
	}
}

253 
ölöe
 
	$gë_sh¨e
(
˝u
, 
Àvñ
, * 
sh¨e
) {

255 
öfûe
;

256 
afföôy
[32];

257 
˝um≠
[160];

258 
«me
[160];

259 *
dummy
;

260 
cou¡
=0;

261 
i
=0,
k
=0;

262 
bômask_idx
 = 0;

264 
	`•rötf
(
«me
, 
SHARE_NAME
, 
˝u
, 
Àvñ
);

266 
öfûe
 = 
	`›í
(
«me
, 
O_RDONLY
);

269 
i
=0; i<
MAX_BITMASK_LEN
; i++){

270 
sh¨e
[
i
]=0;

272 
bômask_idx
 = 
	`CPUELT
(
˝u
);

273 
sh¨e
[
bômask_idx
] = 
	`CPUMASK
(
˝u
);

275 i‡(
öfûe
 != -1) {

277 
	`ªad
(
öfûe
, 
˝um≠
, (cpumap));

279 
i
=0; i<160; i++){

280 if(
˝um≠
[
i
] == '\n')

282 if(
˝um≠
[
i
] != ','){

283 
«me
[
k
++]=
˝um≠
[
i
];

286 if(
k
 >
NCPUBITS
/4){

287 
afföôy
[
cou¡
++] = 
	`°πoul
(
«me
, &
dummy
, 16);

288 
k
=0;

293 if(
k
!=0){

294 
«me
[
k
]='\0';

295 
afföôy
[
cou¡
++] = 
	`°πoul
(
«me
, &
dummy
, 16);

300 
i
=0; i<
cou¡
 && i<
MAX_BITMASK_LEN
; i++){

301 
sh¨e
[
i
]=
afföôy
[
cou¡
-i-1];

305 
	`˛o£
(
öfûe
);

309 
	}
}

311 
	$numa_check
() {

313 
DIR
 *
dp
;

314 
dúít
 *
dú
;

315 
node
;

316 
j
;

318 
comm⁄
 -> 
num_nodes
 = 0;

320 
dp
 = 
	`›ídú
(
NODE_DIR
);

322 i‡(
dp
 =
NULL
) {

323 
comm⁄
 -> 
num_nodes
 = 1;

327 
node
 = 0;Çodê< 
MAX_NODES
;Çode ++) {

328 
j
 = 0; j<
MAX_BITMASK_LEN
; j++Ë
comm⁄
 -> 
node_öfo
[
node
][j] = 0;

331 (
dú
 = 
	`ªaddú
(
dp
)Ë!
NULL
) {

332 i‡(
	`°∫cmp
(
dú
->
d_«me
, "node", 4)==0) {

334 
node
 = 
	`©oi
(&
dú
 -> 
d_«me
[4]);

336 i‡(
node
 > 
MAX_NODES
) {

337 
	`Ârötf
(
°dîr
, "\nOpenBLAS Warning : MAX_NODES (NUMA) isÅoo small. Terminated.\n");

338 
	`exô
(1);

341 
comm⁄
 -> 
num_nodes
 ++;

342 
	`gë_˝um≠
(
node
, 
comm⁄
->
node_öfo
[node]);

347 
	`˛o£dú
(
dp
);

349 i‡(
comm⁄
 -> 
num_nodes
 == 1)  1;

351 #ifde‡
DEBUG


352 
	`Ârötf
(
°dîr
, "Num®found :Çumbî o‡Node†%2d\n", 
comm⁄
 -> 
num_nodes
);

354 
node
 = 0;Çodê< 
comm⁄
 -> 
num_nodes
;Çode ++)

355 
	`Ârötf
(
°dîr
, "MASK (%2dË: %08lx\n", 
node
, 
comm⁄
 -> 
node_öfo
[node][0]);

358  
comm⁄
 -> 
num_nodes
;

359 
	}
}

361 #i‡
deföed
(
__GLIBC_PREREQ
)

362 #i‡!
__GLIBC_PREREQ
(2, 6)

363 
	$sched_gë˝u
()

365 
˝u
;

366 
FILE
 *
Â
 = 
NULL
;

367 i‡–(
Â
 = 
	`f›í
("/¥oc/£lf/°©", "r")Ë=
NULL
)

369 i‡–
	`fsˇnf
–
Â
, "%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%d", &
˝u
) != 1) {

370 
	`f˛o£
 (
Â
);

373 
	`f˛o£
 (
Â
);

374 (
˝u
);

375 
	}
}

379 
	$numa_m≠pög
() {

381 
node
, 
˝u
, 
c‹e
;

382 
i
, 
j
, 
h
;

383 
w‹k
, 
bô
;

384 
cou¡
 = 0;

385 
bômask_idx
 = 0;

386 
cuºít_˝u
;

387 
cuºít_node
 = 0;

388 
˝u_cou¡
 = 0;

390 
node
 = 0;Çodê< 
comm⁄
 -> 
num_nodes
;Çode ++) {

391 
c‹e
 = 0;

392 
˝u
 = 0; cpu < 
comm⁄
 -> 
num_¥ocs
; cpu ++) {

393 
bômask_idx
 = 
	`CPUELT
(
˝u
);

394 i‡(
comm⁄
 -> 
node_öfo
[
node
][
bômask_idx
] & comm⁄ -> 
avaû
[bômask_idx] & 
	`CPUMASK
(
˝u
)) {

395 
comm⁄
 -> 
˝u_öfo
[
cou¡
] = 
	`WRITE_CORE
(
c‹e
Ë| 
	`WRITE_NODE
(
node
Ë| 
	`WRITE_CPU
(
˝u
);

396 
cou¡
 ++;

397 
c‹e
 ++;

403 #ifde‡
DEBUG


404 
	`Ârötf
(
°dîr
, "\nFrom /sys ...\n\n");

406 
˝u
 = 0; cpu < 
cou¡
; cpu++)

407 
	`Ârötf
(
°dîr
, "CPU (%2dË: %08lx\n", 
˝u
, 
comm⁄
 -> 
˝u_öfo
[cpu]);

410 
cuºít_˝u
 = 
	`sched_gë˝u
();

411 
˝u
 = 0; cpu < 
cou¡
; cpu++) {

412 i‡(
	`READ_CPU
(
comm⁄
 -> 
˝u_öfo
[
˝u
]Ë=
cuºít_˝u
) {

413 
cuºít_node
 = 
	`READ_NODE
(
comm⁄
 -> 
˝u_öfo
[
˝u
]);

417 
i
 = 0; i < 
MAX_BITMASK_LEN
; i++)

418 
˝u_cou¡
 +
	`p›cou¡
(
comm⁄
 -> 
node_öfo
[
cuºít_node
][
i
] & comm⁄ -> 
avaû
[i]);

425 i‡(
num¥ocs
 <
˝u_cou¡
) {

431 
i
 = 0; i < 
cou¡
; i++) {

432 
j
 = 0; j < 
cou¡
 - 1; j++) {

433 
node_1
, 
node_2
;

434 
c‹e_1
, 
c‹e_2
;

435 
sw≠
 = 0;

437 
node_1
 = 
	`READ_NODE
(
comm⁄
 -> 
˝u_öfo
[
j
]);

438 
node_2
 = 
	`READ_NODE
(
comm⁄
 -> 
˝u_öfo
[
j
 + 1]);

439 
c‹e_1
 = 
	`READ_CORE
(
comm⁄
 -> 
˝u_öfo
[
j
]);

440 
c‹e_2
 = 
	`READ_CORE
(
comm⁄
 -> 
˝u_öfo
[
j
 + 1]);

442 i‡(
node_1
 =
node_2
) {

443 i‡(
c‹e_1
 > 
c‹e_2
)

444 
sw≠
 = 1;

446 i‡((
node_2
 =
cuºít_node
) ||

447 ((
node_1
 !
cuºít_node
Ë&& (node_1 > 
node_2
)))

448 
sw≠
 = 1;

450 i‡(
sw≠
) {

451 
ãmp
;

453 
ãmp
 = 
comm⁄
->
˝u_öfo
[
j
];

454 
comm⁄
->
˝u_öfo
[
j
] = common->cpu_info[j + 1];

455 
comm⁄
->
˝u_öfo
[
j
 + 1] = 
ãmp
;

460 
h
 = 1;

462 
h
 < 
cou¡
) h = 2 * h + 1;

464 
h
 > 1) {

465 
h
 /= 2;

466 
i
 = 
h
; i < 
cou¡
; i++) {

467 
w‹k
 = 
comm⁄
 -> 
˝u_öfo
[
i
];

468 
bô
 = 
	`CPU_ISSET
(
i
, &
˝u_‹ig_mask
[0]);

469 
j
 = 
i
 - 
h
;

470 
w‹k
 < 
comm⁄
 -> 
˝u_öfo
[
j
]) {

471 
comm⁄
 -> 
˝u_öfo
[
j
 + 
h
] = common -> cpu_info[j];

472 i‡(
	`CPU_ISSET
(
j
, &
˝u_‹ig_mask
[0])) {

473 
	`CPU_SET
(
j
 + 
h
, &
˝u_‹ig_mask
[0]);

475 
	`CPU_CLR
(
j
 + 
h
, &
˝u_‹ig_mask
[0]);

477 
j
 -
h
;

478 i‡(
j
 < 0) ;

480 
comm⁄
 -> 
˝u_öfo
[
j
 + 
h
] = 
w‹k
;

481 i‡(
bô
) {

482 
	`CPU_SET
(
j
 + 
h
, &
˝u_‹ig_mask
[0]);

484 
	`CPU_CLR
(
j
 + 
h
, &
˝u_‹ig_mask
[0]);

491 #ifde‡
DEBUG


492 
	`Ârötf
(
°dîr
, "\nSorting ...\n\n");

494 
˝u
 = 0; cpu < 
cou¡
; cpu++)

495 
	`Ârötf
(
°dîr
, "CPUINFO (%2dË: %08lx (CPU=%3lu CORE=%3lu NODE=%3lu)\n", 
˝u
, 
comm⁄
 -> 
˝u_öfo
[cpu],

496 
	`READ_CPU
(
comm⁄
 -> 
˝u_öfo
[
˝u
]),

497 
	`READ_CORE
(
comm⁄
 -> 
˝u_öfo
[
˝u
]),

498 
	`READ_NODE
(
comm⁄
 -> 
˝u_öfo
[
˝u
]));

501 
	}
}

503 
	$dißbÀ_hy≥πhªad
() {

505 
sh¨e
[
MAX_BITMASK_LEN
];

506 
˝u
;

507 
bômask_idx
 = 0;

508 
i
=0, 
cou¡
=0;

509 
bômask_idx
 = 
	`CPUELT
(
comm⁄
 -> 
num_¥ocs
);

511 
i
=0; i< 
bômask_idx
; i++){

512 
comm⁄
 -> 
avaû
[
cou¡
++] = 0xFFFFFFFFFFFFFFFFUL;

514 if(
	`CPUMASK
(
comm⁄
 -> 
num_¥ocs
) != 1){

515 
comm⁄
 -> 
avaû
[
cou¡
++] = 
	`CPUMASK
(comm⁄ -> 
num_¥ocs
) - 1;

517 
comm⁄
 -> 
avaû_cou¡
 = 
cou¡
;

527 #ifde‡
DEBUG


528 
	`Ârötf
(
°dîr
, "\nAvail CPUs : ");

529 
i
=0; i<
cou¡
; i++)

530 
	`Ârötf
(
°dîr
, "%04lx ", 
comm⁄
 -> 
avaû
[
i
]);

531 
	`Ârötf
(
°dîr
, ".\n");

534 
˝u
 = 0; cpu < 
comm⁄
 -> 
num_¥ocs
; cpu ++) {

536 
	`gë_sh¨e
(
˝u
, 1, 
sh¨e
);

539 
i
 = 0; i < 
cou¡
 ; i++){

541 
sh¨e
[
i
] &
comm⁄
->
avaû
[i];

543 i‡(
	`p›cou¡
(
sh¨e
[
i
]) > 1) {

545 #ifde‡
DEBUG


546 
	`Ârötf
(
°dîr
, "Detected Hyper Threading on CPU %4x; disabled CPU %04lx.\n",

547 
˝u
, 
sh¨e
[
i
] & ~(
	`CPUMASK
(cpu)));

550 
comm⁄
 -> 
avaû
[
i
] &~((
sh¨e
[i] & ~ 
	`CPUMASK
(
˝u
)));

554 
	}
}

556 
	$dißbÀ_afföôy
() {

557 
i
=0;

558 
bômask_idx
=0;

559 
cou¡
=0;

560 #ifde‡
DEBUG


561 
	`Ârötf
(
°dîr
, "FöÆáŒávaûabÀ CPU† : %04lx.\n\n", 
comm⁄
 -> 
avaû
[0]);

562 
	`Ârötf
(
°dîr
, "CPU mask : %04lx.\n\n", *(*)&
˝u_‹ig_mask
[0]);

573 
bômask_idx
 = 
	`CPUELT
(
comm⁄
 -> 
föÆ_num_¥ocs
);

575 
i
=0; i< 
bômask_idx
; i++){

576 
Õrocmask
[
cou¡
++] = 0xFFFFFFFFFFFFFFFFUL;

578 if(
	`CPUMASK
(
comm⁄
 -> 
föÆ_num_¥ocs
) != 1){

579 
Õrocmask
[
cou¡
++] = 
	`CPUMASK
(
comm⁄
 -> 
föÆ_num_¥ocs
) - 1;

581 
Õrocmask_cou¡
 = 
cou¡
;

583 #i‚de‡
USE_OPENMP


584 
i
=0; i< 
cou¡
; i++){

585 
Õrocmask
[
i
] &
comm⁄
->
avaû
[i];

589 #ifde‡
DEBUG


590 
	`Ârötf
(
°dîr
, "I choo£Åhe£ CPU† : %04lx.\n\n", 
Õrocmask
[0]);

593 
	}
}

595 
	$£tup_mempﬁicy
() {

597 
˝u
, 
mynode
, 
max˝u
;

599 
˝u
 = 0; cpu < 
MAX_NODES
; cpu ++Ë
node_˝u
[cpu] = 0;

601 
max˝u
 = 0;

603 
˝u
 = 0; cpu < 
num¥ocs
; cpu ++) {

604 
mynode
 = 
	`READ_NODE
(
comm⁄
 -> 
˝u_öfo
[
˝u_sub_m≠pög
[
˝u
]]);

606 
 odemask
 |(1UL << 
mynode
);

608 
node_˝u
[
mynode
] ++;

610 i‡(
max˝u
 < 
node_˝u
[
mynode
]) maxcpu =Çode_cpu[mynode];

613 
node_equÆ
 = 1;

615 
˝u
 = 0; cpu < 
MAX_NODES
; cpu ++Ëi‡((
node_˝u
[˝u] !0Ë&& (node_˝u[˝u] !
max˝u
)Ë
node_equÆ
 = 0;

617 i‡(
 odemask
) {

619 #ifde‡
DEBUG


620 
	`Ârötf
(
°dîr
, "Nodêmask = %lx\n", 
 odemask
);

623 
	`my_£t_mempﬁicy
(
MPOL_INTERLEAVE
, &
 odemask
, (lnodemask) * 8);

625 
numnodes
 = 
	`p›cou¡
(
 odemask
);

627 
	}
}

629 
ölöe
 
	$is_dód
(
id
) {

631 
shmid_ds
 
ds
;

633  
	`shm˘l
(
id
, 
IPC_STAT
, &
ds
);

634 
	}
}

636 
	$›í_shmem
() {

638 
åy
 = 0;

640 
îr
 = 0;

644 #i‡
	`deföed
(
BIGNUMA
)

646 
shmid
 = 
	`shmgë
(
SH_MAGIC
, 32768, 0666);

648 
shmid
 = 
	`shmgë
(
SH_MAGIC
, 4096, 0666);

651 i‡(
shmid
 == -1) {

652 #i‡
	`deföed
(
BIGNUMA
)

653 
shmid
 = 
	`shmgë
(
SH_MAGIC
, 32768, 
IPC_CREAT
 | 0666);

655 
shmid
 = 
	`shmgë
(
SH_MAGIC
, 4096, 
IPC_CREAT
 | 0666);

659 i‡(
shmid
 =-1Ë
îr
 = 
î∫o
;

661 
åy
 ++;

663 } (
åy
 < 10Ë&& (
shmid
 == -1));

665 i‡(
shmid
 == -1) {

666 
	`Ârötf
 (
°dîr
, "Obèöög sh¨ed mem‹y segmíàÁûed i¿›í_shmem: %s\n",
	`°ªº‹
(
îr
));

667 
	`Ârötf
 (
°dîr
, "Setting CPUáffinityÇotÖossible without shared memoryáccess.\n");

671 i‡(
shmid
 != -1) {

672 i‡–(
comm⁄
 = 
	`shm©
(
shmid
, 
NULL
, 0)) == (*)-1) {

673 
	`≥º‹
 ("Attaching shared memory segment failed in open_shmem");

674 
	`Ârötf
 (
°dîr
, "Setting CPUáffinityÇotÖossible without shared memoryáccess.\n");

678 #ifde‡
DEBUG


679 
	`Ârötf
(
°dîr
, "Sh¨ed Mem‹y id = %x Addªs†%p\n", 
shmid
, 
comm⁄
);

682 
	}
}

684 
	$¸óã_pshmem
() {

686 
pshmid
 = 
	`shmgë
(
IPC_PRIVATE
, 4096, 
IPC_CREAT
 | 0666);

688 i‡(
pshmid
 == -1) {

689 
	`≥º‹
 ("Obtaining shared memory segment failed in create_pshmem");

690 
	`Ârötf
 (
°dîr
, "Setting CPUáffinityÇotÖossible without shared memoryáccess.\n");

694 i‡–(
∑ddr
 = 
	`shm©
(
pshmid
, 
NULL
, 0)) == (*)-1) {

695 
	`≥º‹
 ("Attaching shared memory segment failed in create_pshmem");

696 
	`Ârötf
 (
°dîr
, "Setting CPUáffinityÇotÖossible without shared memoryáccess.\n");

700 i‡(
	`shm˘l
(
pshmid
, 
IPC_RMID
, 0) == -1)  (1);

702 #ifde‡
DEBUG


703 
	`Ârötf
(
°dîr
, "Priv©êSh¨ed Mem‹y id = %x Addªs†%p\n", 
pshmid
, 
∑ddr
);

706 
	}
}

708 
	$loˇl_˝u_m≠
() {

710 
˝u
, 
id
, 
m≠pög
;

711 
bômask_idx
 = 0;

712 
˝u
 = 0;

713 
m≠pög
 = 0;

716 
id
 = 
comm⁄
 -> 
˝u_u£
[
˝u
];

718 i‡(
id
 > 0) {

719 i‡(
	`is_dód
(
id
)Ë
comm⁄
 -> 
˝u_u£
[
˝u
] = 0;

722 
bômask_idx
 = 
	`CPUELT
(
˝u
);

723 i‡((
comm⁄
 -> 
˝u_u£
[
˝u
] =0Ë&& (
Õrocmask
[
bômask_idx
] & 
	`CPUMASK
(cpu))) {

725 
comm⁄
 -> 
˝u_u£
[
˝u
] = 
pshmid
;

726 
˝u_m≠pög
[
m≠pög
] = 
	`READ_CPU
(
comm⁄
 -> 
˝u_öfo
[
˝u
]);

727 
˝u_sub_m≠pög
[
m≠pög
] = 
˝u
;

729 
m≠pög
 ++;

732 
˝u
 ++;

734 } (
m≠pög
 < 
num¥ocs
Ë&& (
˝u
 < 
comm⁄
 -> 
föÆ_num_¥ocs
));

736 
dißbÀ_m≠pög
 = 0;

738 i‡((
m≠pög
 < 
num¥ocs
) || (numprocs == 1)) {

739 
˝u
 = 0; cpu < 
comm⁄
 -> 
föÆ_num_¥ocs
; cpu ++) {

740 i‡(
comm⁄
 -> 
˝u_u£
[
˝u
] =
pshmid
) common -> cpu_use[cpu] = 0;

742 
dißbÀ_m≠pög
 = 1;

745 #ifde‡
DEBUG


746 
˝u
 = 0; cpu < 
num¥ocs
; cpu ++) {

747 
	`Ârötf
(
°dîr
, "Loˇ»M≠pög : %2d --> %2d (%2d)\n", 
˝u
, 
˝u_m≠pög
[˝u], 
˝u_sub_m≠pög
[cpu]);

750 
	}
}

754 
	$gë_num_¥ocs
(Ë{  
num¥ocs
; 
	}
}

755 
	$gë_num_nodes
(Ë{  
numnodes
; 
	}
}

756 
	$gë_node_equÆ
() {

758  (((
bœs_˝u_numbî
 % 
numnodes
Ë=0Ë&& 
node_equÆ
);

760 
	}
}

762 
	$gŸobœs_£t_afföôy
(
pos
) {

764 
˝u_£t_t
 
˝u_mask
;

766 
mynode
 = 1;

769 i‡(
pos
 < 0) {

770 
	`sched_£èfföôy
(0, (
˝u_‹ig_mask
), &cpu_orig_mask[0]);

774 i‡(!
dißbÀ_m≠pög
) {

776 
mynode
 = 
	`READ_NODE
(
comm⁄
 -> 
˝u_öfo
[
˝u_sub_m≠pög
[
pos
]]);

778 #ifde‡
DEBUG


779 
	`Ârötf
(
°dîr
, "Givög Afföôy[%4d %3d] --> %3d MyÇodê%3d\n", 
	`gëpid
(), 
pos
, 
˝u_m≠pög
[pos], 
mynode
);

782 
	`CPU_ZERO
(&
˝u_mask
);

783 
	`CPU_SET
 (
˝u_m≠pög
[
pos
], &
˝u_mask
);

785 
	`sched_£èfföôy
(0, (
˝u_mask
), &cpu_mask);

787 
node_m≠pög
[
	`WhîeAmI
()] = 
mynode
;

791  
mynode
;

792 
	}
}

794 
	$gë_node
() {

796 i‡(!
dißbÀ_m≠pög
Ë 
node_m≠pög
[
	`WhîeAmI
()];

799 
	}
}

801 
	göôülized
 = 0;

803 
	$gŸobœs_afföôy_öô
() {

805 
˝u
, 
num_avaû
;

806 #i‚de‡
USE_OPENMP


807 
˝u_£t_t
 
˝u_mask
;

809 
i
;

811 i‡(
öôülized
) ;

813 
öôülized
 = 1;

815 
	`sched_gëafföôy
(0, (
˝u_‹ig_mask
), &cpu_orig_mask[0]);

817 #ifde‡
USE_OPENMP


818 
num¥ocs
 = 0;

820 
num¥ocs
 = 
	`ªadív_©oi
("OPENBLAS_NUM_THREADS");

821 i‡(
num¥ocs
 =0Ënum¥oc†
	`ªadív_©oi
("GOTO_NUM_THREADS");

824 i‡(
num¥ocs
 =0Ënum¥oc†
	`ªadív_©oi
("OMP_NUM_THREADS");

826 
numnodes
 = 1;

828 i‡(
num¥ocs
 == 1) {

829 
dißbÀ_m≠pög
 = 1;

833 i‡(
	`¸óã_pshmem
() != 0) {

834 
dißbÀ_m≠pög
 = 1;

838 i‡(
	`›í_shmem
() != 0) {

839 
dißbÀ_m≠pög
 = 1;

843 (
comm⁄
 -> 
lock
Ë&& (comm⁄ -> 
magic
 !
SH_MAGIC
)) {

844 i‡(
	`is_dód
(
comm⁄
 -> 
shmid
)) {

845 
comm⁄
 -> 
lock
 = 0;

846 
comm⁄
 -> 
shmid
 = 0;

847 
comm⁄
 -> 
magic
 = 0;

849 
YIELDING
;

853 
	`bœs_lock
(&
comm⁄
 -> 
lock
);

855 i‡((
comm⁄
 -> 
shmid
Ë&& 
	`is_dód
(comm⁄ -> shmid)Ëcomm⁄ -> 
magic
 = 0;

857 
comm⁄
 -> 
shmid
 = 
pshmid
;

859 i‡(
comm⁄
 -> 
magic
 !
SH_MAGIC
) {

861 #i‡
	`deföed
(
__GLIBC_PREREQ
)

862 #i‡
	`__GLIBC_PREREQ
(2, 7)

863 
˝u_£t_t
 *
˝u£ç
;

865 
˝u_£t_t
 
˝u£t
;

868 
nums
;

869 
ªt
;

871 #ifde‡
DEBUG


872 
	`Ârötf
(
°dîr
, "Shared Memory Initialization.\n");

877 
nums
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

879 #i‡!
	`deföed
(
__GLIBC_PREREQ
)

880 
comm⁄
->
num_¥ocs
 = 
nums
;

883 #i‡!
	`__GLIBC_PREREQ
(2, 3)

884 
comm⁄
->
num_¥ocs
 = 
nums
;

885 #ñi‡
	`__GLIBC_PREREQ
(2, 7)

886 
˝u£ç
 = 
	`CPU_ALLOC
(
nums
);

887 i‡(
˝u£ç
 =
NULL
) {

888 
comm⁄
->
num_¥ocs
 = 
nums
;

890 
size_t
 
size
;

891 
size
 = 
	`CPU_ALLOC_SIZE
(
nums
);

892 
ªt
 = 
	`sched_gëafföôy
(0,
size
,
˝u£ç
);

893 i‡(
ªt
!=0)

894 
comm⁄
->
num_¥ocs
 = 
nums
;

896 
comm⁄
->
num_¥ocs
 = 
	`CPU_COUNT_S
(
size
,
˝u£ç
);

898 
	`CPU_FREE
(
˝u£ç
);

900 
ªt
 = 
	`sched_gëafföôy
(0,(
˝u_£t_t
), &
˝u£t
);

901 i‡(
ªt
!=0) {

902 
comm⁄
->
num_¥ocs
 = 
nums
;

904 #i‡!
	`__GLIBC_PREREQ
(2, 6)

905 
i
;

906 
n
 = 0;

907 
i
=0;i<
nums
;i++)

908 i‡(
	`CPU_ISSET
(
i
,&
˝u£t
)Ë
n
++;

909 
comm⁄
->
num_¥ocs
 = 
n
;

912 
comm⁄
->
num_¥ocs
 = 
	`CPU_COUNT
(&
˝u£t
);

918 if(
comm⁄
 -> 
num_¥ocs
 > 
MAX_CPUS
) {

919 
	`Ârötf
(
°dîr
, "\nO≥nBLAS W¨nög : Thênumbî o‡CPU/C‹es(%dËi†bey⁄dÅhêlimô(%d). Tîmö©ed.\n", 
comm⁄
->
num_¥ocs
, 
MAX_CPUS
);

920 
	`exô
(1);

923 
˝u
 = 0; cpu < 
comm⁄
 -> 
num_¥ocs
; cpu++Ëcomm⁄ -> 
˝u_öfo
[cpu] = cpu;

925 
	`numa_check
();

927 
	`dißbÀ_hy≥πhªad
();

929 i‡(
comm⁄
 -> 
num_nodes
 > 1Ë
	`numa_m≠pög
();

931 
comm⁄
 -> 
föÆ_num_¥ocs
 = 0;

932 
i
 = 0; i < 
comm⁄
 -> 
avaû_cou¡
; i++Ëcomm⁄ -> 
föÆ_num_¥ocs
 +
	`rcou¡
(comm⁄ -> 
avaû
[i]) + 1;

934 
˝u
 = 0; cpu < 
comm⁄
 -> 
föÆ_num_¥ocs
; cpu ++Ëcomm⁄ -> 
˝u_u£
[cpu] = 0;

936 
comm⁄
 -> 
magic
 = 
SH_MAGIC
;

940 
	`dißbÀ_afföôy
();

942 
num_avaû
 = 0;

943 
i
=0; i<
Õrocmask_cou¡
; i++Ë
num_avaû
 +
	`p›cou¡
(
Õrocmask
[i]);

945 i‡((
num¥ocs
 <0Ë|| (num¥oc†> 
num_avaû
))Çumprocs =Çum_avail;

947 #ifde‡
DEBUG


948 
	`Ârötf
(
°dîr
, "Numbî o‡thªad†%d\n", 
num¥ocs
);

951 
	`loˇl_˝u_m≠
();

953 
	`bœs_u∆ock
(&
comm⁄
 -> 
lock
);

955 #i‚de‡
USE_OPENMP


956 i‡(!
dißbÀ_m≠pög
) {

958 #ifde‡
DEBUG


959 
	`Ârötf
(
°dîr
, "Givög Afföôy[%3d] --> %3d\n", 0, 
˝u_m≠pög
[0]);

962 
	`CPU_ZERO
(&
˝u_mask
);

963 
	`CPU_SET
 (
˝u_m≠pög
[0], &
˝u_mask
);

965 
	`sched_£èfföôy
(0, (
˝u_mask
), &cpu_mask);

967 
node_m≠pög
[
	`WhîeAmI
()] = 
	`READ_NODE
(
comm⁄
 -> 
˝u_öfo
[
˝u_sub_m≠pög
[0]]);

969 
	`£tup_mempﬁicy
();

971 i‡(
	`ªadív_©oi
("OPENBLAS_MAIN_FREE") ||Ñeadenv_atoi("GOTOBLAS_MAIN_FREE")) {

972 
	`sched_£èfföôy
(0, (
˝u_‹ig_mask
), &cpu_orig_mask[0]);

978 #ifde‡
DEBUG


979 
	`Ârötf
(
°dîr
, "Initialization is done.\n");

981 
	}
}

983 
	$gŸobœs_afföôy_quô
() {

985 
i
;

986 
shmid_ds
 
ds
;

988 #ifde‡
DEBUG


989 
	`Ârötf
(
°dîr
, "Terminating ..\n");

992 i‡((
num¥ocs
 =1Ë|| (
öôülized
 == 0)) ;

994 i‡(!
dißbÀ_m≠pög
) {

996 
	`bœs_lock
(&
comm⁄
 -> 
lock
);

998 
i
 = 0; i < 
num¥ocs
; i ++Ë
comm⁄
 -> 
˝u_u£
[
˝u_m≠pög
[i]] = -1;

1000 
	`bœs_u∆ock
(&
comm⁄
 -> 
lock
);

1004 
	`shm˘l
(
shmid
, 
IPC_STAT
, &
ds
);

1006 i‡(
ds
.
shm_«âch
 =1Ë
	`shm˘l
(
shmid
, 
IPC_RMID
, 0);

1008 
	`shmdt
(
comm⁄
);

1010 
	`shmdt
(
∑ddr
);

1012 
öôülized
 = 0;

1013 
	}
}

1017 
	$gŸobœs_afföôy_öô
(Ë{
	}
};

1019 
	$gŸobœs_£t_afföôy
(
thªads
Ë{
	}
};

1021 
	$gŸobœs_£t_afföôy2
(
thªads
Ë{
	}
};

1023 
	$gŸobœs_afföôy_ªscheduÀ
(Ë{
	}
};

1025 
	$gë_num_¥ocs
(Ë{  
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
); 
	}
}

1027 
	$gë_num_nodes
(Ë{  1; 
	}
}

1029 
	$gë_node
(Ë{  1;
	}
}

	@lamc3.c

39 
	~"comm⁄.h
"

41 #ifde‡
NEED_F2CCONV


44 
	gFLOAT


46 
	$NAME
(
FLOAT
 *
a
, FLOAT *
b
){

48  *
a
 + *
b
;

50 
	}
}

	@lamch.c

39 
	~"comm⁄.h
"

42 
FLOAT
 
	ghd©a
[] 
__©åibuã__
((
Æig√d
(128))) = {

43 #ifde‡
XDOUBLE


44 +0x1.0000000000000000
P
-00064L,

45 +0x1.0000000000000000
P
-16382L,

46 +0x1.0000000000000000
P
+00001L,

47 +0x1.0000000000000000
P
-00063L,

48 +0x1.0000000000000000
P
+00006L,

49 +0x1.0000000000000000
P
+00000L,

50 -0x1.f„8000000000000
P
+00013L,

51 +0x1.0000000000000000
P
-16382L,

52 +0x1.0004000000000000
P
+00014L,

53 +0x1.ffffffffffffff„
P
+16383L,

54 #ñi‡
deföed
 
DOUBLE


55 +0x1.0000000000000
P
-0053,

56 +0x1.0000000000000
P
-1022,

57 +0x1.0000000000000
P
+0001,

58 +0x1.0000000000000
P
-0052,

59 +0x1.a800000000000
P
+0005,

60 +0x1.0000000000000
P
+0000,

61 -0x1.„80000000000
P
+0009,

62 +0x1.0000000000000
P
-1022,

63 +0x1.0000000000000
P
+0010,

64 +0x1.fffffffffffff
P
+1023,

66 +0x1.000000
P
-024f,

67 +0x1.000000
P
-126f,

68 +0x1.000000
P
+001f,

69 +0x1.000000
P
-023f,

70 +0x1.800000
P
+004f,

71 +0x1.000000
P
+000f,

72 -0x1.f40000
P
+006f,

73 +0x1.000000
P
-126f,

74 +0x1.000000
P
+007f,

75 +0x1.ffff„
P
+127f,

81 
	gid©a
[] 
__©åibuã__
((
Æig√d
(128))) = {

83 #i‡ 
deföed
 
XDOUBLE


84 #i‚de‡
__BIG_ENDIAN__


108 #ñi‡
deföed
 
DOUBLE


109 #i‚de‡
__BIG_ENDIAN__


149 #ifde‡
NEED_F2CCONV


152 
	gFLOAT


154 
	$NAME
(*
P
){

156 
p
 = *
P
;

157 
pos
;

158 
FLOAT
 *
hd©a
 = (FLOAT *)
id©a
;

160 
	`TOUPPER
(
p
);

162 
p
) {

164 
pos
 = 0;

167 
pos
 = 1;

170 
pos
 = 2;

173 
pos
 = 3;

176 
pos
 = 4;

179 
pos
 = 5;

182 
pos
 = 6;

185 
pos
 = 7;

188 
pos
 = 8;

191 
pos
 = 9;

194 
pos
 = 0;

198  
hd©a
[
pos
];

200 
	}
}

	@lsame.c

39 
	~<˘y≥.h
>

41 
	$NAME
(*
A
, *
B
){

43 
a
 = *
A
;

44 
b
 = *
B
;

46 i‡(
a
 > 96)á -= 32;

47 i‡(
b
 > 96) b -= 32;

49  (
a
 =
b
);

50 
	}
}

	@memory.c

74 
	~"comm⁄.h
"

76 #i‡
deföed
(
USE_TLS
Ë&& deföed(
SMP
)

77 
	#COMPILE_TLS


	)

79 #i‡
USE_TLS
 != 1

80 #unde‡
COMPILE_TLS


83 #i‡
deföed
(
__GLIBC_PREREQ
)

84 #i‡!
__GLIBC_PREREQ
(2,20)

85 #unde‡
COMPILE_TLS


91 
	#XSTR
(
x
Ë
	`STR
(x)

	)

92 
	#STR
(
x
Ë#x

	)

93 #i‡
BUFFER_SIZE
 < (
SGEMM_DEFAULT_P
 * 
SGEMM_DEFAULT_Q
 * 4 * 2) || \

94 
	gBUFFER_SIZE
 < (
SGEMM_DEFAULT_P
 * 
	gSGEMM_DEFAULT_R
 * 4 * 2) || \

95 
	gBUFFER_SIZE
 < (
SGEMM_DEFAULT_R
 * 
	gSGEMM_DEFAULT_Q
 * 4 * 2)

96 #w¨nög 
BUFFER_SIZE
 
is
 
too
 
smÆl
 
P
, 
Q
, 
™d
 
R
 
of
 
SGEMM
 - 
œrge
 
ˇlcuœti⁄s
 
may
 
¸ash
 !

98 #i‡
BUFFER_SIZE
 < (
DGEMM_DEFAULT_P
 * 
DGEMM_DEFAULT_Q
 * 8 * 2) || \

99 
	gBUFFER_SIZE
 < (
DGEMM_DEFAULT_P
 * 
	gDGEMM_DEFAULT_R
 * 8 * 2) || \

100 
	gBUFFER_SIZE
 < (
DGEMM_DEFAULT_R
 * 
	gDGEMM_DEFAULT_Q
 * 8 * 2)

101 #w¨nög 
BUFFER_SIZE
 
is
 
too
 
smÆl
 
P
, 
Q
, 
™d
 
R
 
of
 
DGEMM
 - 
œrge
 
ˇlcuœti⁄s
 
may
 
¸ash
 !

103 #i‡
BUFFER_SIZE
 < (
CGEMM_DEFAULT_P
 * 
CGEMM_DEFAULT_Q
 * 8 * 2) || \

104 
	gBUFFER_SIZE
 < (
CGEMM_DEFAULT_P
 * 
	gCGEMM_DEFAULT_R
 * 8 * 2) || \

105 
	gBUFFER_SIZE
 < (
CGEMM_DEFAULT_R
 * 
	gCGEMM_DEFAULT_Q
 * 8 * 2)

106 #w¨nög 
BUFFER_SIZE
 
is
 
too
 
smÆl
 
P
, 
Q
, 
™d
 
R
 
of
 
CGEMM
 - 
œrge
 
ˇlcuœti⁄s
 
may
 
¸ash
 !

108 #i‡
BUFFER_SIZE
 < (
ZGEMM_DEFAULT_P
 * 
ZGEMM_DEFAULT_Q
 * 16 * 2) || \

109 
	gBUFFER_SIZE
 < (
ZGEMM_DEFAULT_P
 * 
	gZGEMM_DEFAULT_R
 * 16 * 2) || \

110 
	gBUFFER_SIZE
 < (
ZGEMM_DEFAULT_R
 * 
	gZGEMM_DEFAULT_Q
 * 16 * 2)

111 #w¨nög 
BUFFER_SIZE
 
is
 
too
 
smÆl
 
P
, 
Q
, 
™d
 
R
 
of
 
ZGEMM
 - 
œrge
 
ˇlcuœti⁄s
 
may
 
¸ash
 !

114 #i‡
deföed
(
COMPILE_TLS
)

116 
	~<î∫o.h
>

118 #i‡
deföed
(
OS_WINDOWS
Ë&& !deföed(
OS_CYGWIN_NT
)

119 
	#ALLOC_WINDOWS


	)

120 #i‚de‡
MEM_LARGE_PAGES


121 
	#MEM_LARGE_PAGES
 0x20000000

	)

124 
	#ALLOC_MMAP


	)

125 
	#ALLOC_MALLOC


	)

128 
	~<°dlib.h
>

129 
	~<°dio.h
>

130 
	~<f˙é.h
>

132 #i‡!
deföed
(
OS_WINDOWS
Ë|| deföed(
OS_CYGWIN_NT
)

133 
	~<sys/mm™.h
>

134 #i‚de‡
NO_SYSV_IPC


135 
	~<sys/shm.h
>

137 
	~<sys/ùc.h
>

140 
	~<sys/ty≥s.h
>

142 #ifde‡
OS_LINUX


143 
	~<sys/sysöfo.h
>

144 
	~<sched.h
>

145 
	~<î∫o.h
>

146 
	~<löux/uni°d.h
>

147 
	~<sys/sysˇŒ.h
>

148 
	~<sys/time.h
>

149 
	~<sys/ªsour˚.h
>

152 #ifde‡
OS_HAIKU


153 
	~<uni°d.h
>

156 #i‡
deföed
(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
)

157 
	~<sys/sys˘l.h
>

158 
	~<sys/ªsour˚.h
>

161 #i‡
deföed
(
OS_WINDOWS
Ë&& (deföed(
__MINGW32__
Ë|| deföed(
__MINGW64__
))

162 
	~<c⁄io.h
>

163 #unde‡
¥ötf


164 
	#¥ötf
 
_˝rötf


	)

167 #ifde‡
OS_LINUX


169 #i‚de‡
MPOL_PREFERRED


170 
	#MPOL_PREFERRED
 1

	)

175 #i‡(
deföed
(
PPC440
Ë|| !deföed(
OS_LINUX
Ë|| deföed(
HPL
)Ë&& !deföed(
NO_WARMUP
)

176 
	#NO_WARMUP


	)

179 #i‚de‡
SHM_HUGETLB


180 
	#SHM_HUGETLB
 04000

	)

183 #i‚de‡
FIXED_PAGESIZE


184 
	#FIXED_PAGESIZE
 4096

	)

187 
	#BITMASK
(
a
, 
b
, 
c
Ë(((◊Ë>> (b)Ë& (c)))

	)

189 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
)

190 
	#CONSTRUCTOR
 
__cde˛


	)

191 
	#DESTRUCTOR
 
__cde˛


	)

192 #ñi‡(
deföed
(
OS_DARWIN
Ë|| deföed(
OS_SUNOS
)Ë&& deföed(
C_GCC
)

193 
	#CONSTRUCTOR
 
	`__©åibuã__
 ((
c⁄°ru˘‹
))

	)

194 
	#DESTRUCTOR
 
	`__©åibuã__
 ((
de°ru˘‹
))

	)

195 #ñi‡
__GNUC__
 && 
INIT_PRIORITY
 && ((
GCC_VERSION
 >40300Ë|| (
CLANG_VERSION
 >= 20900))

196 
	#CONSTRUCTOR
 
	`__©åibuã__
 ((
	`c⁄°ru˘‹
(101)))

	)

197 
	#DESTRUCTOR
 
	`__©åibuã__
 ((
	`de°ru˘‹
(101)))

	)

199 
	#CONSTRUCTOR
 
	`__©åibuã__
 ((
c⁄°ru˘‹
))

	)

200 
	#DESTRUCTOR
 
	`__©åibuã__
 ((
de°ru˘‹
))

	)

203 #ifde‡
DYNAMIC_ARCH


204 
gŸobœs_t
 *
	ggŸobœs
 = 
NULL
;

206 
›íbœs_w¨nög
(
vîbo£
, c⁄° * 
msg
);

208 #i‚de‡
SMP


210 
	#bœs_˝u_numbî
 1

	)

211 
	#bœs_num_thªads
 1

	)

214 
	$gŸo_gë_num_¥ocs
 (Ë{  1;
	}
};

215 
	$gŸo_£t_num_thªads
(
num_thªads
Ë{
	}
};

219 #i‡
deföed
(
OS_LINUX
Ë|| deföed(
OS_SUNOS
)

220 #i‚de‡
NO_AFFINITY


221 
gë_num_¥ocs
();

223 
	$gë_num_¥ocs
() {

224 
nums
 = 0;

225 
˝u_£t_t
 
˝u£t
,*
˝u£ç
;

226 
size_t
 
size
;

227 
ªt
;

229 #i‡
	`deföed
(
__GLIBC_PREREQ
)

230 #i‡!
	`__GLIBC_PREREQ
(2, 7)

231 
i
;

232 #i‡!
	`__GLIBC_PREREQ
(2, 6)

233 
n
;

238 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

239 #i‡!
	`deföed
(
OS_LINUX
)

240  
nums
;

243 #i‡!
	`deföed
(
__GLIBC_PREREQ
)

244  
nums
;

246 #i‡!
	`__GLIBC_PREREQ
(2, 3)

247  
nums
;

250 #i‡!
	`__GLIBC_PREREQ
(2, 7)

251 
ªt
 = 
	`sched_gëafföôy
(0,(
˝u£t
), &cpuset);

252 i‡(
ªt
!=0Ë 
nums
;

253 
n
=0;

254 #i‡!
	`__GLIBC_PREREQ
(2, 6)

255 
i
=0;i<
nums
;i++)

256 i‡(
	`CPU_ISSET
(
i
,&
˝u£t
)Ë
n
++;

257 
nums
=
n
;

259 
nums
 = 
	`CPU_COUNT
((
˝u£t
),&cpuset);

261  
nums
;

263 i‡(
nums
 >
CPU_SETSIZE
) {

264 
˝u£ç
 = 
	`CPU_ALLOC
(
nums
);

265 i‡(
˝u£ç
 =
NULL
) {

266  
nums
;

268 
size
 = 
	`CPU_ALLOC_SIZE
(
nums
);

269 
ªt
 = 
	`sched_gëafföôy
(0,
size
,
˝u£ç
);

270 i‡(
ªt
!=0) {

271 
	`CPU_FREE
(
˝u£ç
);

272  
nums
;

274 
ªt
 = 
	`CPU_COUNT_S
(
size
,
˝u£ç
);

275 i‡(
ªt
 > 0 &&Ñë < 
nums
)Çums =Ñet;

276 
	`CPU_FREE
(
˝u£ç
);

277  
nums
;

279 
ªt
 = 
	`sched_gëafföôy
(0,(
˝u£t
),&cpuset);

280 i‡(
ªt
!=0) {

281  
nums
;

283 
ªt
 = 
	`CPU_COUNT
(&
˝u£t
);

284 i‡(
ªt
 > 0 &&Ñë < 
nums
)Çums =Ñet;

285  
nums
;

289 
	}
}

293 #ifde‡
OS_ANDROID


294 
	$gë_num_¥ocs
() {

295 
nums
 = 0;

296 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

297  
nums
;

298 
	}
}

301 #ifde‡
OS_HAIKU


302 
	$gë_num_¥ocs
() {

303 
nums
 = 0;

304 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

305  
nums
;

306 
	}
}

309 #ifde‡
OS_AIX


310 
	$gë_num_¥ocs
() {

311 
nums
 = 0;

312 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

313  
nums
;

314 
	}
}

319 #ifde‡
OS_WINDOWS


321 
	$gë_num_¥ocs
() {

323 
nums
 = 0;

325 i‡(
nums
 == 0) {

327 
SYSTEM_INFO
 
sysöfo
;

329 
	`GëSy°emInfo
(&
sysöfo
);

331 
nums
 = 
sysöfo
.
dwNumbîOfPro˚ss‹s
;

334  
nums
;

335 
	}
}

339 #i‡
deföed
(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
)

341 
	$gë_num_¥ocs
() {

343 
nums
 = 0;

345 
m
[2];

346 
size_t
 
Àn
;

348 i‡(
nums
 == 0) {

349 
m
[0] = 
CTL_HW
;

350 
m
[1] = 
HW_NCPU
;

351 
Àn
 = ();

352 
	`sys˘l
(
m
, 2, &
nums
, &
Àn
, 
NULL
, 0);

355  
nums
;

356 
	}
}

360 #i‡
deföed
(
OS_DARWIN
)

361 
	$gë_num_¥ocs
() {

362 
nums
 = 0;

363 
size_t
 
Àn
;

364 i‡(
nums
 == 0){

365 
Àn
 = ();

366 
	`sys˘lby«me
("hw.physiˇl˝u", &
nums
, &
Àn
, 
NULL
, 0);

368  
nums
;

369 
	}
}

396 
	gbœs_˝u_numbî
 = 0;

401 
	gbœs_num_thªads
 = 0;

403 
	$gŸo_gë_num_¥ocs
 () {

404  
bœs_˝u_numbî
;

405 
	}
}

407 
bœs_mem‹y_öô
();

409 
	$›íbœs_f‹k_h™dÀr
()

418 #i‡!((
	`deföed
(
OS_WINDOWS
Ë&& !deföed(
OS_CYGWIN_NT
)Ë|| deföed(
OS_ANDROID
)Ë&& deföed(
SMP_SERVER
)

419 
îr
;

420 
îr
 = 
	`±hªad_©f‹k
 (((*)()Ë
	`BLASFUNC
(
bœs_thªad_shutdown
), 
NULL
, 
bœs_mem‹y_öô
);

421 if(
îr
 != 0)

422 
	`›íbœs_w¨nög
(0, "OpenBLAS Warning ... cannot install fork handler. You may meet hangáfter fork.\n");

424 
	}
}

426 
›íbœs_num_thªads_ív
();

427 
›íbœs_gŸo_num_thªads_ív
();

428 
›íbœs_omp_num_thªads_ív
();

430 
	$bœs_gë_˝u_numbî
(){

431 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

432 
max_num
;

434 
bœs_gŸo_num
 = 0;

435 
bœs_omp_num
 = 0;

437 i‡(
bœs_num_thªads
)  blas_num_threads;

439 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

440 
max_num
 = 
	`gë_num_¥ocs
();

444 #i‚de‡
USE_OPENMP_UNUSED


445 
bœs_gŸo_num
=
	`›íbœs_num_thªads_ív
();

446 i‡(
bœs_gŸo_num
 < 0) blas_goto_num = 0;

448 i‡(
bœs_gŸo_num
 == 0) {

449 
bœs_gŸo_num
=
	`›íbœs_gŸo_num_thªads_ív
();

450 i‡(
bœs_gŸo_num
 < 0) blas_goto_num = 0;

456 
bœs_omp_num
=
	`›íbœs_omp_num_thªads_ív
();

457 i‡(
bœs_omp_num
 < 0) blas_omp_num = 0;

459 i‡(
bœs_gŸo_num
 > 0Ë
bœs_num_thªads
 = blas_goto_num;

460 i‡(
bœs_omp_num
 > 0Ë
bœs_num_thªads
 = blas_omp_num;

461 
bœs_num_thªads
 = 
MAX_CPU_NUMBER
;

463 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

464 i‡(
bœs_num_thªads
 > 
max_num
) blas_num_threads = max_num;

467 i‡(
bœs_num_thªads
 > 
MAX_CPU_NUMBER
) blas_num_threads = MAX_CPU_NUMBER;

469 #ifde‡
DEBUG


470 
	`¥ötf
–"Adju°edÇumbî o‡thªad†: %3d\n", 
bœs_num_thªads
);

473 
bœs_˝u_numbî
 = 
bœs_num_thªads
;

475  
bœs_num_thªads
;

476 
	}
}

480 
	$›íbœs_gë_num_¥ocs
() {

481 #i‚de‡
SMP


484  
	`gë_num_¥ocs
();

486 
	}
}

488 
	$›íbœs_gë_num_thªads
() {

489 #i‚de‡
SMP


493 
	`bœs_gë_˝u_numbî
();

494  
bœs_˝u_numbî
;

496 
	}
}

498 
	ghugëlb_Æloˇãd
 = 0;

500 #i‡
deföed
(
OS_WINDOWS
)

501 
	#LIKELY_ONE
(
x
Ë(x)

	)

503 
	#LIKELY_ONE
(
x
Ë(
	`__buûtö_ex≥˘
(x, 1))

	)

507 
	sÆloc_t
 {

509 
	mu£d
;

511 
	m©å
;

513 (*
	mªÀa£_func
)(
	mÆloc_t
 *);

515 
	m∑d
[64 - 2 * () - ((*))];

519 
	#STORE_RELEASE_FUNC
(
addªss
, 
func
) \

520 i‡(
addªss
 != (*)-1) { \

521 
Æloc_t
 *
Æloc_öfo
 = (Æloc_à*)
addªss
; \

522 
Æloc_öfo
->
ªÀa£_func
 = 
func
; \

523 }

	)

525 
	#STORE_RELEASE_FUNC_WITH_ATTR
(
addªss
, 
func
, 
©å
) \

526 i‡(
addªss
 != (*)-1) { \

527 
Æloc_t
 *
Æloc_öfo
 = (Æloc_à*)
addªss
; \

528 
Æloc_öfo
->
ªÀa£_func
 = 
func
; \

529 
Æloc_öfo
->
©å
 =áttr; \

530 }

	)

536 c⁄° 
	gÆloˇti⁄_block_size
 = 
BUFFER_SIZE
 + (
Æloc_t
);

538 #i‡
deföed
(
SMP
)

539 #i‡
deföed
(
OS_WINDOWS
)

540 
DWORD
 
	gloˇl_°‹age_key
 = 0;

541 
DWORD
 
	glsk
;

544 
±hªad_key_t
 
	gloˇl_°‹age_key
 = 0;

545 
±hªad_key_t
 
	glsk
;

549 #i‡
deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

550 
	ghŸ_Æloc
 = 0;

555 #i‡ 
deföed
(
USE_PTHREAD_LOCK
)

556 
±hªad_muãx_t
 
	gÆloc_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

557 #ñi‡
deföed
(
USE_PTHREAD_SPINLOCK
)

558 
±hªad_•ölock_t
 
	gÆloc_lock
 = 0;

560 
BLASULONG
 
	gÆloc_lock
 = 0UL;

563 #i‡ 
deföed
(
USE_PTHREAD_LOCK
)

564 
±hªad_muãx_t
 
	gkey_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

565 #ñi‡
deföed
(
USE_PTHREAD_SPINLOCK
)

566 
±hªad_•ölock_t
 
	gkey_lock
 = 0;

568 
BLASULONG
 
	gkey_lock
 = 0UL;

572 
__ölöe
 
Æloc_t
 ** 
	$gë_mem‹y_èbÀ
() {

573 #i‡
	`deföed
(
SMP
)

574 
	`LOCK_COMMAND
(&
key_lock
);

575 
lsk
=
loˇl_°‹age_key
;

576 
	`UNLOCK_COMMAND
(&
key_lock
);

577 i‡(!
lsk
) {

578 
	`bœs_mem‹y_öô
();

580 #i‡
	`deföed
(
OS_WINDOWS
)

581 
Æloc_t
 ** 
loˇl_mem‹y_èbÀ
 = (Æloc_à**)
	`TlsGëVÆue
(
loˇl_°‹age_key
);

583 
Æloc_t
 ** 
loˇl_mem‹y_èbÀ
 = (Æloc_à**)
	`±hªad_gë•ecific
(
loˇl_°‹age_key
);

586 
Æloc_t
 ** 
loˇl_mem‹y_èbÀ
 = 
NULL
;

588 #i‡
	`deföed
 (
SMP
)

589 
	`LOCK_COMMAND
(&
key_lock
);

590 
lsk
=
loˇl_°‹age_key
;

591 
	`UNLOCK_COMMAND
(&
key_lock
);

592 i‡(
lsk
 && !
loˇl_mem‹y_èbÀ
) {

594 i‡(!
loˇl_mem‹y_èbÀ
) {

596 
loˇl_mem‹y_èbÀ
 = (
Æloc_t
 **)
	`mÆloc
((Æloc_à*Ë* 
NUM_BUFFERS
);

597 
	`mem£t
(
loˇl_mem‹y_èbÀ
, 0, (
Æloc_t
 *Ë* 
NUM_BUFFERS
);

598 #i‡
	`deföed
(
SMP
)

599 #i‡
	`deföed
(
OS_WINDOWS
)

600 
	`LOCK_COMMAND
(&
key_lock
);

601 
	`TlsSëVÆue
(
loˇl_°‹age_key
, (*)
loˇl_mem‹y_èbÀ
);

602 
	`UNLOCK_COMMAND
(&
key_lock
);

604 
	`LOCK_COMMAND
(&
key_lock
);

605 
	`±hªad_£t•ecific
(
loˇl_°‹age_key
, (*)
loˇl_mem‹y_èbÀ
);

606 
	`UNLOCK_COMMAND
(&
key_lock
);

610  
loˇl_mem‹y_èbÀ
;

611 
	}
}

613 #ifde‡
ALLOC_MMAP


615 
	$Æloc_mm≠_‰ì
(
Æloc_t
 *
Æloc_öfo
){

617 i‡(
	`munm≠
(
Æloc_öfo
, 
Æloˇti⁄_block_size
)) {

618 
	`¥ötf
("OpenBLAS : munmap failed\n");

620 
	}
}

624 #ifde‡
NO_WARMUP


626 *
	$Æloc_mm≠
(*
addªss
){

627 *
m≠_addªss
;

629 i‡(
addªss
){

630 
m≠_addªss
 = 
	`mm≠
(
addªss
,

631 
Æloˇti⁄_block_size
,

632 
MMAP_ACCESS
, 
MMAP_POLICY
 | 
MAP_FIXED
, -1, 0);

634 
m≠_addªss
 = 
	`mm≠
(
addªss
,

635 
Æloˇti⁄_block_size
,

636 
MMAP_ACCESS
, 
MMAP_POLICY
, -1, 0);

639 
	`STORE_RELEASE_FUNC
(
m≠_addªss
, 
Æloc_mm≠_‰ì
);

641 #ifde‡
OS_LINUX


642 
	`my_mböd
(
m≠_addªss
, 
Æloˇti⁄_block_size
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

645  
m≠_addªss
;

646 
	}
}

650 
	#BENCH_ITERATION
 4

	)

651 
	#SCALING
 2

	)

653 
ölöe
 
BLASULONG
 
	$run_bích
(
BLASULONG
 
addªss
, BLASULONG 
size
) {

655 
BLASULONG
 
‹igöÆ
, *
p
;

656 
BLASULONG
 
°¨t
, 
°›
, 
mö
;

657 
ôî
, 
i
, 
cou¡
;

659 
mö
 = (
BLASULONG
)-1;

661 
‹igöÆ
 = *(
BLASULONG
 *)(
addªss
 + 
size
 - 
PAGESIZE
);

663 *(
BLASULONG
 *)(
addªss
 + 
size
 - 
PAGESIZE
) = (BLASULONG)address;

665 
ôî
 = 0; iã∏< 
BENCH_ITERATION
; iter ++ ) {

667 
p
 = (
BLASULONG
 *)
addªss
;

669 
cou¡
 = 
size
 / 
PAGESIZE
;

671 
°¨t
 = 
	`Ωcc
();

673 
i
 = 0; i < 
cou¡
; i ++) {

674 
p
 = (
BLASULONG
 *)(*p);

677 
°›
 = 
	`Ωcc
();

679 i‡(
mö
 > 
°›
 - 
°¨t
) min = stop - start;

682 *(
BLASULONG
 *)(
addªss
 + 
size
 - 
PAGESIZE
 + 0Ë
‹igöÆ
;

683 *(
BLASULONG
 *)(
addªss
 + 
size
 - 
PAGESIZE
 + 8Ë(BLASULONG)
p
;

685  
mö
;

686 
	}
}

688 *
	$Æloc_mm≠
(*
addªss
){

689 *
m≠_addªss
, *
be°_addªss
;

690 
BLASULONG
 
be°
, 
°¨t
, 
cuºít
, 
‹igöÆ
;

691 
BLASULONG
 
Ælocsize
;

693 i‡(
addªss
){

695 
m≠_addªss
 = 
	`mm≠
(
addªss
, 
Æloˇti⁄_block_size
, 
MMAP_ACCESS
, 
MMAP_POLICY
 | 
MAP_FIXED
, -1, 0);

697 #ifde‡
OS_LINUX


698 
	`my_mböd
(
m≠_addªss
, 
Æloˇti⁄_block_size
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

702 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

703 i‡(
hŸ_Æloc
 == 0) {

704 
m≠_addªss
 = 
	`mm≠
(
NULL
, 
Æloˇti⁄_block_size
, 
MMAP_ACCESS
, 
MMAP_POLICY
, -1, 0);

706 #ifde‡
OS_LINUX


707 
	`my_mböd
(
m≠_addªss
, 
Æloˇti⁄_block_size
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

713 
m≠_addªss
 = 
	`mm≠
(
NULL
, 
Æloˇti⁄_block_size
 * 
SCALING
,

714 
MMAP_ACCESS
, 
MMAP_POLICY
, -1, 0);

716 i‡(
m≠_addªss
 != (*)-1) {

718 #ifde‡
OS_LINUX


719 #ifde‡
DEBUG


720 
ªt
=0;

721 
ªt
=
	`my_mböd
(
m≠_addªss
, 
Æloˇti⁄_block_size
 * 
SCALING
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

722 if(
ªt
==-1){

723 
îrsv
=
î∫o
;

724 
	`≥º‹
("OpenBLASálloc_mmap:");

725 
	`¥ötf
("îr‹ code=%d,\tm≠_addªss=%lx\n",
îrsv
,
m≠_addªss
);

729 
	`my_mböd
(
m≠_addªss
, 
Æloˇti⁄_block_size
 * 
SCALING
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

734 
Ælocsize
 = 
DGEMM_P
 * 
DGEMM_Q
 * ();

736 
°¨t
 = (
BLASULONG
)
m≠_addªss
;

737 
cuºít
 = (
SCALING
 - 1Ë* 
Æloˇti⁄_block_size
;

738 
‹igöÆ
 = 
cuºít
;

740 
cuºít
 > 0 && cuºíà<
‹igöÆ
) {

741 *(
BLASLONG
 *)
°¨t
 = (BLASLONG)°¨à+ 
PAGESIZE
;

742 
°¨t
 +
PAGESIZE
;

743 
cuºít
 -
PAGESIZE
;

746 *(
BLASLONG
 *)(
°¨t
 - 
PAGESIZE
Ë(
BLASULONG
)
m≠_addªss
;

748 
°¨t
 = (
BLASULONG
)
m≠_addªss
;

750 
be°
 = (
BLASULONG
)-1;

751 
be°_addªss
 = 
m≠_addªss
;

753 (
°¨t
 + 
Ælocsize
 < (
BLASULONG
)
m≠_addªss
 + (
SCALING
 - 1Ë* 
Æloˇti⁄_block_size
)) {

755 
cuºít
 = 
	`run_bích
(
°¨t
, 
Ælocsize
);

757 i‡(
be°
 > 
cuºít
) {

758 
be°
 = 
cuºít
;

759 
be°_addªss
 = (*)
°¨t
;

762 
°¨t
 +
PAGESIZE
;

766 i‡((
BLASULONG
)
be°_addªss
 > (BLASULONG)
m≠_addªss
)

767 
	`munm≠
(
m≠_addªss
, (
BLASULONG
)
be°_addªss
 - (BLASULONG)map_address);

769 
	`munm≠
((*)((
BLASULONG
)
be°_addªss
 + 
Æloˇti⁄_block_size
), (
SCALING
 - 1Ë*áŒoˇti⁄_block_sizê+ (BLASULONG)
m≠_addªss
 - (BLASULONG)best_address);

771 
m≠_addªss
 = 
be°_addªss
;

773 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

774 
hŸ_Æloc
 = 2;

778 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

782 
	`STORE_RELEASE_FUNC
(
m≠_addªss
, 
Æloc_mm≠_‰ì
);

784  
m≠_addªss
;

785 
	}
}

792 #ifde‡
ALLOC_MALLOC


794 
	$Æloc_mÆloc_‰ì
(
Æloc_t
 *
Æloc_öfo
){

796 
	`‰ì
(
Æloc_öfo
);

798 
	}
}

800 *
	$Æloc_mÆloc
(*
addªss
){

802 *
m≠_addªss
;

804 
m≠_addªss
 = (*)
	`mÆloc
(
Æloˇti⁄_block_size
 + 
FIXED_PAGESIZE
);

806 i‡(
m≠_addªss
 =(*)
NULL
) map_address = (*)-1;

808 
	`STORE_RELEASE_FUNC
(
m≠_addªss
, 
Æloc_mÆloc_‰ì
);

810  
m≠_addªss
;

812 
	}
}

816 #ifde‡
ALLOC_QALLOC


818 *
qÆloc
(
Êags
, 
size_t
 
byãs
);

819 *
q‰ì
 (*
addªss
);

821 
	#QNONCACHE
 0x1

	)

822 
	#QCOMMS
 0x2

	)

823 
	#QFAST
 0x4

	)

825 
	$Æloc_qÆloc_‰ì
(
Æloc_t
 *
Æloc_öfo
){

827 
	`q‰ì
(
Æloc_öfo
);

829 
	}
}

831 *
	$Æloc_qÆloc
(*
addªss
){

832 *
m≠_addªss
;

834 
m≠_addªss
 = (*)
	`qÆloc
(
QCOMMS
 | 
QFAST
, 
Æloˇti⁄_block_size
 + 
FIXED_PAGESIZE
);

836 i‡(
m≠_addªss
 =(*)
NULL
) map_address = (*)-1;

838 
	`STORE_RELEASE_FUNC
(
m≠_addªss
, 
Æloc_qÆloc_‰ì
);

840  (*)(((
BLASULONG
)
m≠_addªss
 + 
FIXED_PAGESIZE
 - 1) & ~(FIXED_PAGESIZE - 1));

841 
	}
}

845 #ifde‡
ALLOC_WINDOWS


847 
	$Æloc_wödows_‰ì
(
Æloc_t
 *
Æloc_öfo
){

849 
	`VútuÆFªe
(
Æloc_öfo
, 0, 
MEM_RELEASE
);

851 
	}
}

853 *
	$Æloc_wödows
(*
addªss
){

854 *
m≠_addªss
;

856 
m≠_addªss
 = 
	`VútuÆAŒoc
(
addªss
,

857 
Æloˇti⁄_block_size
,

858 
MEM_RESERVE
 | 
MEM_COMMIT
,

859 
PAGE_READWRITE
);

861 i‡(
m≠_addªss
 =(*)
NULL
) map_address = (*)-1;

863 
	`STORE_RELEASE_FUNC
(
m≠_addªss
, 
Æloc_wödows_‰ì
);

865  
m≠_addªss
;

866 
	}
}

870 #ifde‡
ALLOC_DEVICEDRIVER


871 #i‚de‡
DEVICEDRIVER_NAME


872 
	#DEVICEDRIVER_NAME
 "/dev/m≠≥r"

	)

875 
	$Æloc_devi˚dúvî_‰ì
(
Æloc_t
 *
Æloc_öfo
){

877 
©å
 = 
Æloc_öfo
 ->áttr;

878 i‡(
	`munm≠
(
addªss
, 
Æloˇti⁄_block_size
)) {

879 
	`¥ötf
("OpenBLAS : Bugphysarea unmap failed.\n");

882 i‡(
	`˛o£
(
©å
)) {

883 
	`¥ötf
("OpenBLAS : Bugphysarea close failed.\n");

886 
	}
}

888 *
	$Æloc_devi˚dúvî
(*
addªss
){

890 
fd
;

891 *
m≠_addªss
;

893 i‡((
fd
 = 
	`›í
(
DEVICEDRIVER_NAME
, 
O_RDWR
 | 
O_SYNC
)) < 0) {

899 
m≠_addªss
 = 
	`mm≠
(
addªss
, 
Æloˇti⁄_block_size
,

900 
PROT_READ
 | 
PROT_WRITE
,

901 
MAP_FILE
 | 
MAP_SHARED
,

902 
fd
, 0);

904 
	`STORE_RELEASE_FUNC_WITH_ATTR
(
m≠_addªss
, 
Æloc_devi˚dúvî_‰ì
, 
fd
);

906  
m≠_addªss
;

907 
	}
}

911 #ifde‡
ALLOC_SHM


913 
	$Æloc_shm_‰ì
(
Æloc_t
 *
Æloc_öfo
){

915 i‡(
	`shmdt
(
Æloc_öfo
)) {

916 
	`¥ötf
("OpenBLAS : Shared memory unmap failed.\n");

918 
	}
}

920 *
	$Æloc_shm
(*
addªss
){

921 *
m≠_addªss
;

922 
shmid
;

924 
shmid
 = 
	`shmgë
(
IPC_PRIVATE
, 
Æloˇti⁄_block_size
,
IPC_CREAT
 | 0600);

926 
m≠_addªss
 = (*)
	`shm©
(
shmid
, 
addªss
, 0);

928 i‡(
m≠_addªss
 != (*)-1){

930 #ifde‡
OS_LINUX


931 
	`my_mböd
(
m≠_addªss
, 
Æloˇti⁄_block_size
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

934 
	`shm˘l
(
shmid
, 
IPC_RMID
, 0);

936 
Æloc_t
 *
Æloc_öfo
 = (Æloc_à*)
m≠_addªss
;

937 
Æloc_öfo
->
ªÀa£_func
 = 
Æloc_shm_‰ì
;

938 
Æloc_öfo
->
©å
 = 
shmid
;

941  
m≠_addªss
;

942 
	}
}

944 #i‡
deföed
 
OS_LINUX
 || deföed 
OS_AIX
 || deföed 
__sun__
 || deföed 
OS_WINDOWS


946 
	$Æloc_hugëlb_‰ì
(
Æloc_t
 *
Æloc_öfo
){

948 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_AIX
)

949 i‡(
	`shmdt
(
Æloc_öfo
)) {

950 
	`¥ötf
("OpenBLAS : Hugepage unmap failed.\n");

954 #ifde‡
__sun__


956 
	`munm≠
(
Æloc_öfo
, 
Æloˇti⁄_block_size
);

960 #ifde‡
OS_WINDOWS


962 
	`VútuÆFªe
(
Æloc_öfo
, 0, 
MEM_LARGE_PAGES
 | 
MEM_RELEASE
);

966 
	}
}

968 *
	$Æloc_hugëlb
(*
addªss
){

970 *
m≠_addªss
 = (*)-1;

972 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_AIX
)

973 
shmid
;

975 
shmid
 = 
	`shmgë
(
IPC_PRIVATE
, 
Æloˇti⁄_block_size
,

976 #ifde‡
OS_LINUX


977 
SHM_HUGETLB
 |

979 #ifde‡
OS_AIX


980 
SHM_LGPAGE
 | 
SHM_PIN
 |

982 
IPC_CREAT
 | 
SHM_R
 | 
SHM_W
);

984 i‡(
shmid
 != -1) {

985 
m≠_addªss
 = (*)
	`shm©
(
shmid
, 
addªss
, 
SHM_RND
);

987 #ifde‡
OS_LINUX


988 
	`my_mböd
(
m≠_addªss
, 
Æloˇti⁄_block_size
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

991 i‡(
m≠_addªss
 != (*)-1){

992 
	`shm˘l
(
shmid
, 
IPC_RMID
, 0);

997 #ifde‡
__sun__


998 
mem˙é_mha
 
mha
;

1000 
mha
.
mha_cmd
 = 
MHA_MAPSIZE_BSSBRK
;

1001 
mha
.
mha_Êags
 = 0;

1002 
mha
.
mha_∑gesize
 = 
HUGE_PAGESIZE
;

1003 
	`mem˙é
(
NULL
, 0, 
MC_HAT_ADVISE
, (*)&
mha
, 0, 0);

1005 
m≠_addªss
 = (
BLASULONG
)
	`memÆign
(
HUGE_PAGESIZE
, 
Æloˇti⁄_block_size
);

1008 #ifde‡
OS_WINDOWS


1010 
HANDLE
 
hTokí
;

1011 
TOKEN_PRIVILEGES
 
ç
;

1013 i‡(
	`O≥nPro˚ssTokí
(
	`GëCuºítPro˚ss
(), 
TOKEN_ADJUST_PRIVILEGES
, &
hTokí
Ë!
TRUE
)  (*) -1;

1015 
ç
.
PrivûegeCou¡
 = 1;

1016 
ç
.
Privûeges
[0].
Aâribuãs
 = 
SE_PRIVILEGE_ENABLED
;

1018 i‡(
	`LookupPrivûegeVÆue
(
NULL
, 
SE_LOCK_MEMORY_NAME
, &
ç
.
Privûeges
[0].
Luid
Ë!
TRUE
) {

1019 
	`Clo£H™dÀ
(
hTokí
);

1023 i‡(
	`Adju°TokíPrivûeges
(
hTokí
, 
FALSE
, &
ç
, 0, 
NULL
, NULLË!
TRUE
) {

1024 
	`Clo£H™dÀ
(
hTokí
);

1028 
m≠_addªss
 = (*)
	`VútuÆAŒoc
(
addªss
,

1029 
Æloˇti⁄_block_size
,

1030 
MEM_LARGE_PAGES
 | 
MEM_RESERVE
 | 
MEM_COMMIT
,

1031 
PAGE_READWRITE
);

1033 
ç
.
Privûeges
[0].
Aâribuãs
 = 0;

1034 
	`Adju°TokíPrivûeges
(
hTokí
, 
FALSE
, &
ç
, 0, 
NULL
, NULL);

1036 i‡(
m≠_addªss
 =(*)
NULL
) map_address = (*)-1;

1040 
	`STORE_RELEASE_FUNC
(
m≠_addªss
, 
Æloc_hugëlb_‰ì
);

1042  
m≠_addªss
;

1043 
	}
}

1048 #ifde‡ 
ALLOC_HUGETLBFILE


1050 
	ghugëlb_pid
 = 0;

1052 
	$Æloc_hugëlbfûe_‰ì
(
Æloc_t
 *
Æloc_öfo
){

1054 
©å
 = 
Æloc_öfo
 ->áttr;

1055 i‡(
	`munm≠
(
Æloc_öfo
, 
Æloˇti⁄_block_size
)) {

1056 
	`¥ötf
("OpenBLAS : HugeTLBfs unmap failed.\n");

1059 i‡(
	`˛o£
(
©å
)) {

1060 
	`¥ötf
("OpenBLAS : HugeTLBfs close failed.\n");

1062 
	}
}

1064 *
	$Æloc_hugëlbfûe
(*
addªss
){

1066 *
m≠_addªss
 = (*)-1;

1067 
fd
;

1068 
fûíame
[64];

1070 i‡(!
hugëlb_pid
Ëhugëlb_pid = 
	`gëpid
();

1072 
	`•rötf
(
fûíame
, "%s/gŸobœs.%d", 
HUGETLB_FILE_NAME
, 
hugëlb_pid
);

1074 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_RDWR
 | 
O_CREAT
, 0700)) < 0) {

1078 
	`u∆ök
(
fûíame
);

1080 
m≠_addªss
 = 
	`mm≠
(
addªss
, 
Æloˇti⁄_block_size
,

1081 
PROT_READ
 | 
PROT_WRITE
,

1082 
MAP_SHARED
,

1083 
fd
, 0);

1085 
	`STORE_RELEASE_FUNC_WITH_ATTR
(
m≠_addªss
, 
Æloc_hugëlbfûe_‰ì
, 
fd
);

1087  
m≠_addªss
;

1088 
	}
}

1092 #ifde‡
SEEK_ADDRESS


1093 
BLASULONG
 
	gba£_addªss
 = 0UL;

1095 
BLASULONG
 
	gba£_addªss
 = 
BASE_ADDRESS
;

1098 #ifde‡
HAVE_C11


1099 
_Atomic
 
	gmem‹y_öôülized
 = 0;

1101 vﬁ©ûê
	gmem‹y_öôülized
 = 0;

1110 
	$bœs_mem‹y_˛ónup
(* 
±r
){

1111 i‡(
±r
) {

1112 
Æloc_t
 ** 
èbÀ
 = (Æloc_à**)
±r
;

1113 
pos
;

1114 
pos
 = 0;Öo†< 
NUM_BUFFERS
;Öos ++){

1115 
Æloc_t
 *
Æloc_öfo
 = 
èbÀ
[
pos
];

1116 i‡(
Æloc_öfo
) {

1117 
Æloc_öfo
->
	`ªÀa£_func
(alloc_info);

1118 
èbÀ
[
pos
] = (*)0;

1121 
	`‰ì
(
èbÀ
);

1123 
	}
}

1125 
	$bœs_mem‹y_öô
(){

1126 #i‡
	`deföed
(
SMP
)

1127 #i‡
	`deföed
(
OS_WINDOWS
)

1128 
loˇl_°‹age_key
 = 
	`TlsAŒoc
();

1130 
	`±hªad_key_¸óã
(&
loˇl_°‹age_key
, 
bœs_mem‹y_˛ónup
);

1133 
	}
}

1135 *
	$bœs_mem‹y_Æloc
(
¥o˝os
){

1137 
posôi⁄
;

1139 *
m≠_addªss
;

1141 *(*
mem‹yÆloc
[])(*
addªss
) = {

1142 #ifde‡
ALLOC_DEVICEDRIVER


1143 
Æloc_devi˚dúvî
,

1146 #ifde‡
ALLOC_SHM


1147 
Æloc_shm
,

1149 #i‡((
deföed
 
ALLOC_SHM
Ë&& (deföed 
OS_LINUX
 || deföed 
OS_AIX
 || deföed 
__sun__
 || deföed 
OS_WINDOWS
))

1150 
Æloc_hugëlb
,

1152 #ifde‡
ALLOC_MMAP


1153 
Æloc_mm≠
,

1155 #ifde‡
ALLOC_QALLOC


1156 
Æloc_qÆloc
,

1158 #ifde‡
ALLOC_WINDOWS


1159 
Æloc_wödows
,

1161 #ifde‡
ALLOC_MALLOC


1162 
Æloc_mÆloc
,

1164 
NULL
,

1166 *(**
func
)(*
addªss
);

1167 
Æloc_t
 * 
Æloc_öfo
;

1168 
Æloc_t
 ** 
Æloc_èbÀ
;

1171 #i‡
	`deföed
(
SMP
Ë&& !deföed(
USE_OPENMP
)

1172 
mi
;

1173 
	`LOCK_COMMAND
(&
Æloc_lock
);

1174 
mi
=
mem‹y_öôülized
;

1175 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

1176 i‡(!
	`LIKELY_ONE
(
mi
)) {

1178 i‡(!
	`LIKELY_ONE
(
mem‹y_öôülized
)) {

1180 #i‡
	`deföed
(
SMP
Ë&& !deföed(
USE_OPENMP
)

1182 
	`LOCK_COMMAND
(&
Æloc_lock
);

1184 i‡(!
mem‹y_öôülized
) {

1186 
	`bœs_mem‹y_öô
();

1187 #ifde‡
DYNAMIC_ARCH


1188 
	`gŸobœs_dy«mic_öô
();

1191 #i‡
	`deföed
(
SMP
Ë&& deföed(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

1192 
	`gŸobœs_afföôy_öô
();

1195 #ifde‡
SMP


1196 i‡(!
bœs_num_thªads
Ë
bœs_˝u_numbî
 = 
	`bœs_gë_˝u_numbî
();

1199 #i‡
	`deföed
(
ARCH_X86
Ë|| deföed(
ARCH_X86_64
Ë|| deföed(
ARCH_IA64
Ë|| deföed(
ARCH_MIPS64
Ë|| deföed(
ARCH_ARM64
)

1200 #i‚de‡
DYNAMIC_ARCH


1201 
	`bœs_£t_∑ømëî
();

1205 
mem‹y_öôülized
 = 1;

1207 #i‡
	`deföed
(
SMP
Ë&& !deföed(
USE_OPENMP
)

1209 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

1213 #ifde‡
DEBUG


1214 
	`¥ötf
("Alloc Start ...\n");

1217 
posôi⁄
 = 0;

1218 
Æloc_èbÀ
 = 
	`gë_mem‹y_èbÀ
();

1220 i‡(!
Æloc_èbÀ
[
posôi⁄
] || !Æloc_èbÀ[posôi⁄]->
u£d
Ë
Æloˇti⁄
;

1221 
posôi⁄
 ++;

1223 } 
posôi⁄
 < 
NUM_BUFFERS
);

1225 
îr‹
;

1227 
Æloˇti⁄
 :

1229 #ifde‡
DEBUG


1230 
	`¥ötf
(" Posôi⁄ -> %d\n", 
posôi⁄
);

1233 
Æloc_öfo
 = 
Æloc_èbÀ
[
posôi⁄
];

1234 i‡(!
Æloc_öfo
) {

1236 #ifde‡
DEBUG


1237 
	`¥ötf
("AŒoˇti⁄ Sèπ : %lx\n", 
ba£_addªss
);

1240 
m≠_addªss
 = (*)-1;

1242 
func
 = &
mem‹yÆloc
[0];

1244 (
func
 !
NULL
Ë&& (
m≠_addªss
 == (*) -1)) {

1246 
m≠_addªss
 = (*
func
)((*)
ba£_addªss
);

1248 #ifde‡
ALLOC_DEVICEDRIVER


1249 i‡((*
func
 =
Æloc_devi˚dúvî
Ë&& (
m≠_addªss
 == (*)-1)) {

1250 
	`Ârötf
(
°dîr
, "OpenBLAS Warning ... Physically contiguousállocation failed.\n");

1254 #ifde‡
ALLOC_HUGETLBFILE


1255 i‡((*
func
 =
Æloc_hugëlbfûe
Ë&& (
m≠_addªss
 == (*)-1)) {

1256 #i‚de‡
OS_WINDOWS


1257 
	`Ârötf
(
°dîr
, "OpenBLAS Warning ... HugeTLB(File)állocation failed.\n");

1262 #i‡(
deföed
 
ALLOC_SHM
Ë&& (deföed 
OS_LINUX
 || deföed 
OS_AIX
 || deföed 
__sun__
 || deföed 
OS_WINDOWS
)

1263 i‡((*
func
 =
Æloc_hugëlb
Ë&& (
m≠_addªss
 !(*)-1)Ë
hugëlb_Æloˇãd
 = 1;

1266 
func
 ++;

1269 #ifde‡
DEBUG


1270 
	`¥ötf
(" Suc˚s†-> %08lx\n", 
m≠_addªss
);

1272 i‡(((
BLASLONG
Ë
m≠_addªss
Ë=-1Ë
ba£_addªss
 = 0UL;

1274 i‡(
ba£_addªss
Ëba£_addªs†+
Æloˇti⁄_block_size
 + 
FIXED_PAGESIZE
;

1276 } (
BLASLONG
)
m≠_addªss
 == -1);

1278 
Æloc_èbÀ
[
posôi⁄
] = 
Æloc_öfo
 = 
m≠_addªss
;

1280 #ifde‡
DEBUG


1281 
	`¥ötf
(" M≠pög Suc˚eded. %p(%d)\n", (*)
Æloc_öfo
, 
posôi⁄
);

1285 #ifde‡
DEBUG


1286 
	`¥ötf
("M≠≥d : %∞ %3d\n\n", (*)
Æloc_öfo
, 
posôi⁄
);

1289 
Æloc_öfo
->
u£d
 = 1;

1291  (*)(((*)
Æloc_öfo
Ë+ (
Æloc_t
));

1293 
îr‹
:

1294 
	`¥ötf
("OpenBLAS : Program willÅerminate because youÅriedÅoállocateÅoo many memoryÑegions.\n");

1296  
NULL
;

1297 
	}
}

1299 
	$bœs_mem‹y_‰ì
(*
buf„r
){

1300 #ifde‡
DEBUG


1301 
posôi⁄
;

1302 
Æloc_t
 ** 
Æloc_èbÀ
;

1305 
Æloc_t
 *
Æloc_öfo
 = (*)(((*)
buf„r
) - (alloc_t));

1307 #ifde‡
DEBUG


1308 
	`¥ötf
("Unm≠≥d Sèπ : %∞...\n", 
Æloc_öfo
);

1311 
Æloc_öfo
->
u£d
 = 0;

1313 #ifde‡
DEBUG


1314 
	`¥ötf
("Unmap Succeeded.\n\n");

1319 #ifde‡
DEBUG


1320 
Æloc_èbÀ
 = 
	`gë_mem‹y_èbÀ
();

1321 
posôi⁄
 = 0;Öosôi⁄ < 
NUM_BUFFERS
;Öosition++){

1322 i‡(
Æloc_èbÀ
[
posôi⁄
]) {

1323 
	`¥ötf
("%4ld %∞: %d\n", 
posôi⁄
, 
Æloc_èbÀ
[posôi⁄],áŒoc_èbÀ[posôi⁄]->
u£d
);

1328 
	}
}

1330 *
	$bœs_mem‹y_Æloc_nﬁock
(
unu£d
) {

1331 *
m≠_addªss
;

1332 
m≠_addªss
 = (*)
	`mÆloc
(
BUFFER_SIZE
 + 
FIXED_PAGESIZE
);

1333  
m≠_addªss
;

1334 
	}
}

1336 
	$bœs_mem‹y_‰ì_nﬁock
(* 
m≠_addªss
) {

1337 
	`‰ì
(
m≠_addªss
);

1338 
	}
}

1340 #ifde‡
SMP


1341 
	$bœs_thªad_mem‹y_˛ónup
() {

1342 
	`bœs_mem‹y_˛ónup
((*)
	`gë_mem‹y_èbÀ
());

1343 
	}
}

1347 
	$bœs_shutdown
(){

1348 #ifde‡
SMP


1349 
	`BLASFUNC
(
bœs_thªad_shutdown
)();

1352 #ifde‡
SMP


1354 i‡(
loˇl_°‹age_key
)

1356 
	`bœs_thªad_mem‹y_˛ónup
();

1358 #ifde‡
SEEK_ADDRESS


1359 
ba£_addªss
 = 0UL;

1361 
ba£_addªss
 = 
BASE_ADDRESS
;

1365 
	}
}

1367 #i‡
deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

1369 #ifde‡
SMP


1370 #i‡ 
deföed
(
USE_PTHREAD_LOCK
)

1371 
±hªad_muãx_t
 
	göô_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

1372 #ñi‡
deföed
(
USE_PTHREAD_SPINLOCK
)

1373 
±hªad_•ölock_t
 
	göô_lock
 = 0;

1375 
BLASULONG
 
	göô_lock
 = 0UL;

1379 
	$_touch_mem‹y
(
bœs_¨g_t
 *
¨g
, 
BLASLONG
 *
ønge_m
, BLASLONG *
ønge_n
,

1380 *
ß
, *
sb
, 
BLASLONG
 
pos
) {

1382 #i‡!
	`deföed
(
ARCH_POWER
Ë&& !deföed(
ARCH_SPARC
)

1384 
size_t
 
size
;

1385 
BLASULONG
 
buf„r
;

1387 
size
 = 
Æloˇti⁄_block_size
 - 
PAGESIZE
;

1388 
buf„r
 = (
BLASULONG
)
ß
 + 
GEMM_OFFSET_A
;

1390 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

1391 i‡(
hŸ_Æloc
 != 2) {

1394 #ifde‡
SMP


1395 
	`LOCK_COMMAND
(&
öô_lock
);

1398 
size
 > 0) {

1399 *(*)
buf„r
 = 
size
;

1400 
buf„r
 +
PAGESIZE
;

1401 
size
 -
PAGESIZE
;

1404 #ifde‡
SMP


1405 
	`UNLOCK_COMMAND
(&
öô_lock
);

1408 
size
 = 
	`MIN
((
Æloˇti⁄_block_size
 - 
PAGESIZE
), 
L2_SIZE
);

1409 
buf„r
 = (
BLASULONG
)
ß
 + 
GEMM_OFFSET_A
;

1411 
size
 > 0) {

1412 *(*)
buf„r
 = 
size
;

1413 
buf„r
 += 64;

1414 
size
 -= 64;

1417 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

1422 
	}
}

1424 #ifde‡
SMP


1426 
	$_öô_thªad_mem‹y
(*
buf„r
) {

1428 
bœs_queue_t
 
queue
[
MAX_CPU_NUMBER
];

1429 
num_˝u
;

1431 
num_˝u
 = 0;Çum_˝u < 
bœs_num_thªads
;Çum_cpu++) {

1433 
	`bœs_queue_öô
(&
queue
[
num_˝u
]);

1434 
queue
[
num_˝u
].
mode
 = 
BLAS_DOUBLE
 | 
BLAS_REAL
;

1435 
queue
[
num_˝u
].
routöe
 = &
_touch_mem‹y
;

1436 
queue
[
num_˝u
].
¨gs
 = 
NULL
;

1437 
queue
[
num_˝u
].
√xt
 = &queue[num_cpu + 1];

1440 
queue
[
num_˝u
 - 1].
√xt
 = 
NULL
;

1441 
queue
[0].
ß
 = 
buf„r
;

1443 
	`exec_bœs
(
num_˝u
, 
queue
);

1445 
	}
}

1448 
	$gŸobœs_mem‹y_öô
() {

1450 *
buf„r
;

1452 
hŸ_Æloc
 = 1;

1454 
buf„r
 = (*)
	`bœs_mem‹y_Æloc
(0);

1456 #ifde‡
SMP


1457 i‡(
bœs_˝u_numbî
 =0Ë
	`bœs_gë_˝u_numbî
();

1458 #ifde‡
SMP_SERVER


1459 i‡(
bœs_£rvî_avaû
 =0Ë
	`bœs_thªad_öô
();

1462 
	`_öô_thªad_mem‹y
((*)((
BLASULONG
)
buf„r
 + 
GEMM_OFFSET_A
));

1466 
	`_touch_mem‹y
(
NULL
, NULL, NULL, (*)((
BLASULONG
)
buf„r
 + 
GEMM_OFFSET_A
), NULL, 0);

1470 
	`bœs_mem‹y_‰ì
(
buf„r
);

1471 
	}
}

1476 
	ggŸobœs_öôülized
 = 0;

1477 
›íbœs_ªad_ív
();

1479 
CONSTRUCTOR
 
	$gŸobœs_öô
() {

1481 i‡(
gŸobœs_öôülized
) ;

1483 #ifde‡
SMP


1484 
	`›íbœs_f‹k_h™dÀr
();

1487 
	`›íbœs_ªad_ív
();

1489 #ifde‡
PROFILE


1490 
	`m⁄c⁄åﬁ
 (0);

1493 #ifde‡
DYNAMIC_ARCH


1494 
	`gŸobœs_dy«mic_öô
();

1497 #i‡
	`deföed
(
SMP
Ë&& deföed(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

1498 
	`gŸobœs_afföôy_öô
();

1501 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

1502 
	`gŸobœs_mem‹y_öô
();

1507 
æimô
 
cuæimô
;

1508 i‡–
	`gëæimô
(
RLIMIT_STACK
, &
cuæimô
 ) == 0 )

1510 i‡–
cuæimô
.
æim_cur
 !cuæimô.
æim_max
 )

1512 
cuæimô
.
æim_cur
 = cuæimô.
æim_max
;

1513 
	`£ålimô
(
RLIMIT_STACK
, &
cuæimô
);

1518 #ifde‡
SMP


1519 i‡(
bœs_˝u_numbî
 =0Ë
	`bœs_gë_˝u_numbî
();

1520 #ifde‡
SMP_SERVER


1521 i‡(
bœs_£rvî_avaû
 =0Ë
	`bœs_thªad_öô
();

1525 #ifde‡
FUNCTION_PROFILE


1526 
	`gŸobœs_¥ofûe_öô
();

1529 
gŸobœs_öôülized
 = 1;

1531 #ifde‡
PROFILE


1532 
	`m⁄c⁄åﬁ
 (1);

1535 
	}
}

1537 
DESTRUCTOR
 
	$gŸobœs_quô
() {

1539 i‡(
gŸobœs_öôülized
 == 0) ;

1541 
	`bœs_shutdown
();

1543 #i‡
	`deföed
(
SMP
)

1544 #i‡
	`deföed
(
OS_WINDOWS
)

1545 
	`TlsFªe
(
loˇl_°‹age_key
);

1547 
	`±hªad_key_dñëe
(
loˇl_°‹age_key
);

1551 #ifde‡
PROFILE


1552 
	`m⁄c⁄åﬁ
 (0);

1555 #ifde‡
FUNCTION_PROFILE


1556 
	`gŸobœs_¥ofûe_quô
();

1559 #i‡
	`deföed
(
SMP
Ë&& deföed(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

1560 
	`gŸobœs_afföôy_quô
();

1563 #ifde‡
DYNAMIC_ARCH


1564 
	`gŸobœs_dy«mic_quô
();

1567 
gŸobœs_öôülized
 = 0;

1569 #ifde‡
PROFILE


1570 
	`m⁄c⁄åﬁ
 (1);

1572 
	}
}

1574 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
)

1575 
BOOL
 
APIENTRY
 
	$DŒMaö
(
HMODULE
 
hModuÀ
, 
DWORD
 
ul_ªas⁄_f‹_ˇŒ
, 
LPVOID
 
ÕRe£rved
)

1577 
ul_ªas⁄_f‹_ˇŒ
)

1579 
DLL_PROCESS_ATTACH
:

1580 
	`gŸobœs_öô
();

1582 
DLL_THREAD_ATTACH
:

1584 
DLL_THREAD_DETACH
:

1585 #i‡
	`deföed
(
SMP
)

1586 
	`bœs_thªad_mem‹y_˛ónup
();

1589 
DLL_PROCESS_DETACH
:

1590 
	`gŸobœs_quô
();

1595  
TRUE
;

1596 
	}
}

1606 
	$⁄_¥o˚ss_ãrm
()

1608 
	`gŸobœs_quô
();

1610 
	}
}

1611 #ifde‡
_WIN64


1612 #¥agm®
commít
(
lökî
, "/INCLUDE:_tls_used")

1614 #¥agm®
commít
(
lökî
, "/INCLUDE:__tls_used")

1617 #ifde‡
_WIN64


1618 #¥agm®
c⁄°_£g
(".CRT$XLB")

1620 #¥agm®
d©a_£g
(".CRT$XLB")

1622 (
APIENTRY
 *
dŒ_ˇŒback
)(
HINSTANCE
 
h
, 
DWORD
 
ul_ªas⁄_f‹_ˇŒ
, 
PVOID
 
pv
Ë
DŒMaö
;

1623 #ifde‡
_WIN64


1624 #¥agm®
	`c⁄°_£g
()

1626 #¥agm®
	`d©a_£g
()

1629 #ifde‡
_WIN64


1630 #¥agm®
	`c⁄°_£g
(".CRT$XTU")

1632 #¥agm®
	`d©a_£g
(".CRT$XTU")

1634 (*
p_¥o˚ss_ãrm
)(Ë
⁄_¥o˚ss_ãrm
;

1635 #ifde‡
_WIN64


1636 #¥agm®
	`c⁄°_£g
()

1638 #¥agm®
	`d©a_£g
()

1642 #i‡(
	`deföed
(
C_PGI
Ë|| (!deföed(
C_SUN
Ë&& deföed(
F_INTERFACE_SUN
))Ë&& (deföed(
ARCH_X86
Ë|| deföed(
ARCH_X86_64
))

1644 
	$gŸobœs_dummy_f‹_PGI
() {

1646 
	`gŸobœs_öô
();

1647 
	`gŸobœs_quô
();

1649 #i‡
__PGIC__
 < 19

1651 
	`asm
 ("\t.section\t.ctors,\"aw\",@progbits; .align 8; .quad gotoblas_init; .section .text");

1652 
	`asm
 ("\t.section\t.dtors,\"aw\",@progbits; .align 8; .quad gotoblas_quit; .section .text");

1654 
	`asm
 (".section .init,\"ax\"; call gotoblas_init@PLT; .section .text");

1655 
	`asm
 (".section .fini,\"ax\"; call gotoblas_quit@PLT; .section .text");

1658 
	}
}

1664 
	~<î∫o.h
>

1666 #i‡
deföed
(
OS_WINDOWS
Ë&& !deföed(
OS_CYGWIN_NT
)

1667 
	#ALLOC_WINDOWS


	)

1668 #i‚de‡
MEM_LARGE_PAGES


1669 
	#MEM_LARGE_PAGES
 0x20000000

	)

1672 
	#ALLOC_MMAP


	)

1673 
	#ALLOC_MALLOC


	)

1676 
	~<°dlib.h
>

1677 
	~<°dio.h
>

1678 
	~<f˙é.h
>

1680 #i‡!
deföed
(
OS_WINDOWS
Ë|| deföed(
OS_CYGWIN_NT
)

1681 
	~<sys/mm™.h
>

1682 #i‚de‡
NO_SYSV_IPC


1683 
	~<sys/shm.h
>

1685 
	~<sys/ùc.h
>

1688 
	~<sys/ty≥s.h
>

1690 #ifde‡
OS_LINUX


1691 
	~<sys/sysöfo.h
>

1692 
	~<sched.h
>

1693 
	~<î∫o.h
>

1694 
	~<löux/uni°d.h
>

1695 
	~<sys/sysˇŒ.h
>

1696 
	~<sys/time.h
>

1697 
	~<sys/ªsour˚.h
>

1700 #i‡
deföed
(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
)

1701 
	~<sys/sys˘l.h
>

1702 
	~<sys/ªsour˚.h
>

1705 #i‡
deföed
(
OS_WINDOWS
Ë&& (deföed(
__MINGW32__
Ë|| deföed(
__MINGW64__
))

1706 
	~<c⁄io.h
>

1707 #unde‡
¥ötf


1708 
	#¥ötf
 
_˝rötf


	)

1711 #ifde‡
OS_LINUX


1713 #i‚de‡
MPOL_PREFERRED


1714 
	#MPOL_PREFERRED
 1

	)

1719 #i‡(
deföed
(
PPC440
Ë|| !deföed(
OS_LINUX
Ë|| deföed(
HPL
)Ë&& !deföed(
NO_WARMUP
)

1720 
	#NO_WARMUP


	)

1723 #i‚de‡
SHM_HUGETLB


1724 
	#SHM_HUGETLB
 04000

	)

1727 #i‚de‡
FIXED_PAGESIZE


1728 
	#FIXED_PAGESIZE
 4096

	)

1731 
	#BITMASK
(
a
, 
b
, 
c
Ë(((◊Ë>> (b)Ë& (c)))

	)

1733 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
)

1734 
	#CONSTRUCTOR
 
__cde˛


	)

1735 
	#DESTRUCTOR
 
__cde˛


	)

1736 #ñi‡(
deföed
(
OS_DARWIN
Ë|| deföed(
OS_SUNOS
)Ë&& deföed(
C_GCC
)

1737 
	#CONSTRUCTOR
 
	`__©åibuã__
 ((
c⁄°ru˘‹
))

	)

1738 
	#DESTRUCTOR
 
	`__©åibuã__
 ((
de°ru˘‹
))

	)

1739 #ñi‡
__GNUC__
 && 
INIT_PRIORITY
 && ((
GCC_VERSION
 >40300Ë|| (
CLANG_VERSION
 >= 20900))

1740 
	#CONSTRUCTOR
 
	`__©åibuã__
 ((
	`c⁄°ru˘‹
(101)))

	)

1741 
	#DESTRUCTOR
 
	`__©åibuã__
 ((
	`de°ru˘‹
(101)))

	)

1743 
	#CONSTRUCTOR
 
	`__©åibuã__
 ((
c⁄°ru˘‹
))

	)

1744 
	#DESTRUCTOR
 
	`__©åibuã__
 ((
de°ru˘‹
))

	)

1747 #ifde‡
DYNAMIC_ARCH


1748 
gŸobœs_t
 *
	ggŸobœs
 = 
NULL
;

1750 
›íbœs_w¨nög
(
vîbo£
, c⁄° * 
msg
);

1752 #i‚de‡
SMP


1754 
	#bœs_˝u_numbî
 1

	)

1755 
	#bœs_num_thªads
 1

	)

1758 
	$gŸo_gë_num_¥ocs
 (Ë{  1;
	}
};

1759 
	$gŸo_£t_num_thªads
(
num_thªads
Ë{
	}
};

1763 #i‡
deföed
(
OS_LINUX
Ë|| deföed(
OS_SUNOS
)

1764 #i‚de‡
NO_AFFINITY


1765 
gë_num_¥ocs
();

1767 
	$gë_num_¥ocs
() {

1769 
nums
 = 0;

1771 #i‡
	`deföed
(
__GLIBC_PREREQ
)

1772 
˝u_£t_t
 
˝u£t
,*
˝u£ç
;

1773 
size_t
 
size
;

1774 
ªt
;

1775 #i‡!
	`__GLIBC_PREREQ
(2, 7)

1776 
i
;

1777 #i‡!
	`__GLIBC_PREREQ
(2, 6)

1778 
n
;

1783 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

1784 #i‡!
	`deföed
(
OS_LINUX
)

1785  
nums
;

1788 #i‡!
	`deföed
(
__GLIBC_PREREQ
)

1789  
nums
;

1791 #i‡!
	`__GLIBC_PREREQ
(2, 3)

1792  
nums
;

1795 #i‡!
	`__GLIBC_PREREQ
(2, 7)

1796 
ªt
 = 
	`sched_gëafföôy
(0,(
˝u£t
), &cpuset);

1797 i‡(
ªt
!=0Ë 
nums
;

1798 
n
=0;

1799 #i‡!
	`__GLIBC_PREREQ
(2, 6)

1800 
i
=0;i<
nums
;i++)

1801 i‡(
	`CPU_ISSET
(
i
,&
˝u£t
)Ë
n
++;

1802 
nums
=
n
;

1804 
nums
 = 
	`CPU_COUNT
((
˝u£t
),&cpuset);

1806  
nums
;

1808 i‡(
nums
 >
CPU_SETSIZE
) {

1809 
˝u£ç
 = 
	`CPU_ALLOC
(
nums
);

1810 i‡(
˝u£ç
 =
NULL
) {

1811  
nums
;

1813 
size
 = 
	`CPU_ALLOC_SIZE
(
nums
);

1814 
ªt
 = 
	`sched_gëafföôy
(0,
size
,
˝u£ç
);

1815 i‡(
ªt
!=0) {

1816 
	`CPU_FREE
(
˝u£ç
);

1817  
nums
;

1819 
ªt
 = 
	`CPU_COUNT_S
(
size
,
˝u£ç
);

1820 i‡(
ªt
 > 0 &&Ñë < 
nums
)Çums =Ñet;

1821 
	`CPU_FREE
(
˝u£ç
);

1822  
nums
;

1824 
ªt
 = 
	`sched_gëafföôy
(0,(
˝u£t
),&cpuset);

1825 i‡(
ªt
!=0) {

1826  
nums
;

1828 
ªt
 = 
	`CPU_COUNT
(&
˝u£t
);

1829 i‡(
ªt
 > 0 &&Ñë < 
nums
)Çums =Ñet;

1830  
nums
;

1834 
	}
}

1838 #ifde‡
OS_ANDROID


1839 
	$gë_num_¥ocs
() {

1840 
nums
 = 0;

1841 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

1842  
nums
;

1843 
	}
}

1846 #ifde‡
OS_HAIKU


1847 
	$gë_num_¥ocs
() {

1848 
nums
 = 0;

1849 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

1850  
nums
;

1851 
	}
}

1854 #ifde‡
OS_AIX


1855 
	$gë_num_¥ocs
() {

1856 
nums
 = 0;

1857 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

1858  
nums
;

1859 
	}
}

1862 #ifde‡
OS_WINDOWS


1864 
	$gë_num_¥ocs
() {

1866 
nums
 = 0;

1868 i‡(
nums
 == 0) {

1870 
SYSTEM_INFO
 
sysöfo
;

1872 
	`GëSy°emInfo
(&
sysöfo
);

1874 
nums
 = 
sysöfo
.
dwNumbîOfPro˚ss‹s
;

1877  
nums
;

1878 
	}
}

1882 #i‡
deföed
(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
)

1884 
	$gë_num_¥ocs
() {

1886 
nums
 = 0;

1888 
m
[2];

1889 
size_t
 
Àn
;

1891 i‡(
nums
 == 0) {

1892 
m
[0] = 
CTL_HW
;

1893 
m
[1] = 
HW_NCPU
;

1894 
Àn
 = ();

1895 
	`sys˘l
(
m
, 2, &
nums
, &
Àn
, 
NULL
, 0);

1898  
nums
;

1899 
	}
}

1903 #i‡
deföed
(
OS_DARWIN
)

1904 
	$gë_num_¥ocs
() {

1905 
nums
 = 0;

1906 
size_t
 
Àn
;

1907 i‡(
nums
 == 0){

1908 
Àn
 = ();

1909 
	`sys˘lby«me
("hw.physiˇl˝u", &
nums
, &
Àn
, 
NULL
, 0);

1911  
nums
;

1912 
	}
}

1939 
	gbœs_˝u_numbî
 = 0;

1944 
	gbœs_num_thªads
 = 0;

1946 
	$gŸo_gë_num_¥ocs
 () {

1947  
bœs_˝u_numbî
;

1948 
	}
}

1950 
	$›íbœs_f‹k_h™dÀr
()

1959 #i‡!((
	`deföed
(
OS_WINDOWS
Ë&& !deföed(
OS_CYGWIN_NT
)Ë|| deföed(
OS_ANDROID
)Ë&& deföed(
SMP_SERVER
)

1960 
îr
;

1961 
îr
 = 
	`±hªad_©f‹k
 (((*)()Ë
	`BLASFUNC
(
bœs_thªad_shutdown
), 
NULL
, NULL);

1962 if(
îr
 != 0)

1963 
	`›íbœs_w¨nög
(0, "OpenBLAS Warning ... cannot install fork handler. You may meet hangáfter fork.\n");

1965 
	}
}

1967 
›íbœs_num_thªads_ív
();

1968 
›íbœs_gŸo_num_thªads_ív
();

1969 
›íbœs_omp_num_thªads_ív
();

1971 
	$bœs_gë_˝u_numbî
(){

1972 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

1973 
max_num
;

1975 
bœs_gŸo_num
 = 0;

1976 
bœs_omp_num
 = 0;

1978 i‡(
bœs_num_thªads
)  blas_num_threads;

1980 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

1981 
max_num
 = 
	`gë_num_¥ocs
();

1985 #i‚de‡
USE_OPENMP


1986 
bœs_gŸo_num
=
	`›íbœs_num_thªads_ív
();

1987 i‡(
bœs_gŸo_num
 < 0) blas_goto_num = 0;

1989 i‡(
bœs_gŸo_num
 == 0) {

1990 
bœs_gŸo_num
=
	`›íbœs_gŸo_num_thªads_ív
();

1991 i‡(
bœs_gŸo_num
 < 0) blas_goto_num = 0;

1997 
bœs_omp_num
=
	`›íbœs_omp_num_thªads_ív
();

1998 i‡(
bœs_omp_num
 < 0) blas_omp_num = 0;

2000 i‡(
bœs_gŸo_num
 > 0Ë
bœs_num_thªads
 = blas_goto_num;

2001 i‡(
bœs_omp_num
 > 0Ë
bœs_num_thªads
 = blas_omp_num;

2002 
bœs_num_thªads
 = 
MAX_CPU_NUMBER
;

2004 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

2005 i‡(
bœs_num_thªads
 > 
max_num
) blas_num_threads = max_num;

2008 i‡(
bœs_num_thªads
 > 
MAX_CPU_NUMBER
) blas_num_threads = MAX_CPU_NUMBER;

2010 #ifde‡
DEBUG


2011 
	`¥ötf
–"Adju°edÇumbî o‡thªad†: %3d\n", 
bœs_num_thªads
);

2014 
bœs_˝u_numbî
 = 
bœs_num_thªads
;

2016  
bœs_num_thªads
;

2017 
	}
}

2021 
	$›íbœs_gë_num_¥ocs
() {

2022 #i‚de‡
SMP


2025  
	`gë_num_¥ocs
();

2027 
	}
}

2029 
	$›íbœs_gë_num_thªads
() {

2030 #i‚de‡
SMP


2034 
	`bœs_gë_˝u_numbî
();

2035  
bœs_˝u_numbî
;

2037 
	}
}

2039 
	sªÀa£_t
 {

2040 *
	maddªss
;

2041 (*
	mfunc
)(
	mªÀa£_t
 *);

2042 
	m©å
;

2045 
	ghugëlb_Æloˇãd
 = 0;

2047 
ªÀa£_t
 
	gªÀa£_öfo
[
NUM_BUFFERS
];

2048 
	gªÀa£_pos
 = 0;

2050 #i‡
deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

2051 
	ghŸ_Æloc
 = 0;

2056 #i‡ 
deföed
(
USE_PTHREAD_LOCK
)

2057 
±hªad_muãx_t
 
	gÆloc_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

2058 #ñi‡
deföed
(
USE_PTHREAD_SPINLOCK
)

2059 
±hªad_•ölock_t
 
	gÆloc_lock
 = 0;

2061 
BLASULONG
 
	gÆloc_lock
 = 0UL;

2064 #ifde‡
ALLOC_MMAP


2066 
	$Æloc_mm≠_‰ì
(
ªÀa£_t
 *
ªÀa£
){

2068 i‡(!
ªÀa£
->
addªss
) ;

2070 i‡(
	`munm≠
(
ªÀa£
 -> 
addªss
, 
BUFFER_SIZE
)) {

2071 
îrsv
=
î∫o
;

2072 
	`≥º‹
("OpenBLAS : munmap failed:");

2073 
	`¥ötf
("îr‹ code=%d,\åñó£->addªss=%p\n",
îrsv
,
ªÀa£
->
addªss
);

2075 
	}
}

2079 #ifde‡
NO_WARMUP


2081 *
	$Æloc_mm≠
(*
addªss
){

2082 *
m≠_addªss
;

2084 i‡(
addªss
){

2085 
m≠_addªss
 = 
	`mm≠
(
addªss
,

2086 
BUFFER_SIZE
,

2087 
MMAP_ACCESS
, 
MMAP_POLICY
 | 
MAP_FIXED
, -1, 0);

2089 
m≠_addªss
 = 
	`mm≠
(
addªss
,

2090 
BUFFER_SIZE
,

2091 
MMAP_ACCESS
, 
MMAP_POLICY
, -1, 0);

2094 i‡(
m≠_addªss
 != (*)-1) {

2095 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2096 
	`LOCK_COMMAND
(&
Æloc_lock
);

2098 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2099 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_mm≠_‰ì
;

2100 
ªÀa£_pos
 ++;

2101 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2102 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2105 #ifde‡
DEBUG


2106 
îrsv
=
î∫o
;

2107 
	`≥º‹
("OpenBLAS : mmap failed:");

2108 
	`¥ötf
("îr‹ code=%d,\tm≠_addªss=%lx\n",
îrsv
,
m≠_addªss
);

2112 #ifde‡
OS_LINUX


2113 
	`my_mböd
(
m≠_addªss
, 
BUFFER_SIZE
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

2116  
m≠_addªss
;

2117 
	}
}

2121 
	#BENCH_ITERATION
 4

	)

2122 
	#SCALING
 2

	)

2124 
ölöe
 
BLASULONG
 
	$run_bích
(
BLASULONG
 
addªss
, BLASULONG 
size
) {

2126 
BLASULONG
 
‹igöÆ
, *
p
;

2127 
BLASULONG
 
°¨t
, 
°›
, 
mö
;

2128 
ôî
, 
i
, 
cou¡
;

2130 
mö
 = (
BLASULONG
)-1;

2132 
‹igöÆ
 = *(
BLASULONG
 *)(
addªss
 + 
size
 - 
PAGESIZE
);

2134 *(
BLASULONG
 *)(
addªss
 + 
size
 - 
PAGESIZE
) = (BLASULONG)address;

2136 
ôî
 = 0; iã∏< 
BENCH_ITERATION
; iter ++ ) {

2138 
p
 = (
BLASULONG
 *)
addªss
;

2140 
cou¡
 = 
size
 / 
PAGESIZE
;

2142 
°¨t
 = 
	`Ωcc
();

2144 
i
 = 0; i < 
cou¡
; i ++) {

2145 
p
 = (
BLASULONG
 *)(*p);

2148 
°›
 = 
	`Ωcc
();

2150 i‡(
mö
 > 
°›
 - 
°¨t
) min = stop - start;

2153 *(
BLASULONG
 *)(
addªss
 + 
size
 - 
PAGESIZE
 + 0Ë
‹igöÆ
;

2154 *(
BLASULONG
 *)(
addªss
 + 
size
 - 
PAGESIZE
 + 8Ë(BLASULONG)
p
;

2156  
mö
;

2157 
	}
}

2159 *
	$Æloc_mm≠
(*
addªss
){

2160 *
m≠_addªss
, *
be°_addªss
;

2161 
BLASULONG
 
be°
, 
°¨t
, 
cuºít
;

2162 
BLASULONG
 
Ælocsize
;

2164 i‡(
addªss
){

2166 
m≠_addªss
 = 
	`mm≠
(
addªss
, 
BUFFER_SIZE
, 
MMAP_ACCESS
, 
MMAP_POLICY
 | 
MAP_FIXED
, -1, 0);

2168 #ifde‡
OS_LINUX


2169 
	`my_mböd
(
m≠_addªss
, 
BUFFER_SIZE
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

2173 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

2174 i‡(
hŸ_Æloc
 == 0) {

2175 
m≠_addªss
 = 
	`mm≠
(
NULL
, 
BUFFER_SIZE
, 
MMAP_ACCESS
, 
MMAP_POLICY
, -1, 0);

2177 #ifde‡
OS_LINUX


2178 
	`my_mböd
(
m≠_addªss
, 
BUFFER_SIZE
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

2184 
m≠_addªss
 = 
	`mm≠
(
NULL
, 
BUFFER_SIZE
 * 
SCALING
,

2185 
MMAP_ACCESS
, 
MMAP_POLICY
, -1, 0);

2187 i‡(
m≠_addªss
 != (*)-1) {

2189 #ifde‡
OS_LINUX


2190 #ifde‡
DEBUG


2191 
ªt
=0;

2192 
ªt
=
	`my_mböd
(
m≠_addªss
, 
BUFFER_SIZE
 * 
SCALING
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

2193 if(
ªt
==-1){

2194 
îrsv
=
î∫o
;

2195 
	`≥º‹
("OpenBLASálloc_mmap:");

2196 
	`¥ötf
("îr‹ code=%d,\tm≠_addªss=%lx\n",
îrsv
,
m≠_addªss
);

2200 
	`my_mböd
(
m≠_addªss
, 
BUFFER_SIZE
 * 
SCALING
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

2204 #ifde‡
BUILD_DOUBLE


2205 
Ælocsize
 = 
DGEMM_P
 * 
DGEMM_Q
 * ();

2206 #ñi‡
	`deföed
(
BUILD_COMPLEX16
)

2207 
Ælocsize
 = 
ZGEMM_P
 * 
ZGEMM_Q
 * ();

2208 #ñi‡
	`deföed
(
BUILD_COMPLEX
)

2209 
Ælocsize
 = 
CGEMM_P
 * 
CGEMM_Q
 * ();

2211 
Ælocsize
 = 
SGEMM_P
 * 
SGEMM_Q
 * ();

2213 
°¨t
 = (
BLASULONG
)
m≠_addªss
;

2214 
cuºít
 = (
SCALING
 - 1Ë* 
BUFFER_SIZE
;

2216 
cuºít
 > 0) {

2217 *(
BLASLONG
 *)
°¨t
 = (BLASLONG)°¨à+ 
PAGESIZE
;

2218 
°¨t
 +
PAGESIZE
;

2219 
cuºít
 -
PAGESIZE
;

2222 *(
BLASLONG
 *)(
°¨t
 - 
PAGESIZE
Ë(
BLASULONG
)
m≠_addªss
;

2224 
°¨t
 = (
BLASULONG
)
m≠_addªss
;

2226 
be°
 = (
BLASULONG
)-1;

2227 
be°_addªss
 = 
m≠_addªss
;

2229 (
°¨t
 + 
Ælocsize
 < (
BLASULONG
)
m≠_addªss
 + (
SCALING
 - 1Ë* 
BUFFER_SIZE
)) {

2231 
cuºít
 = 
	`run_bích
(
°¨t
, 
Ælocsize
);

2233 i‡(
be°
 > 
cuºít
) {

2234 
be°
 = 
cuºít
;

2235 
be°_addªss
 = (*)
°¨t
;

2238 
°¨t
 +
PAGESIZE
;

2242 i‡((
BLASULONG
)
be°_addªss
 > (BLASULONG)
m≠_addªss
)

2243 
	`munm≠
(
m≠_addªss
, (
BLASULONG
)
be°_addªss
 - (BLASULONG)map_address);

2245 
	`munm≠
((*)((
BLASULONG
)
be°_addªss
 + 
BUFFER_SIZE
), (
SCALING
 - 1Ë* BUFFER_SIZE + (BLASULONG)
m≠_addªss
 - (BLASULONG)best_address);

2247 
m≠_addªss
 = 
be°_addªss
;

2249 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

2250 
hŸ_Æloc
 = 2;

2254 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

2258 i‡(
m≠_addªss
 != (*)-1) {

2259 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2260 
	`LOCK_COMMAND
(&
Æloc_lock
);

2262 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2263 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_mm≠_‰ì
;

2264 
ªÀa£_pos
 ++;

2265 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2266 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2270  
m≠_addªss
;

2271 
	}
}

2278 #ifde‡
ALLOC_MALLOC


2280 
	$Æloc_mÆloc_‰ì
(
ªÀa£_t
 *
ªÀa£
){

2282 
	`‰ì
(
ªÀa£
 -> 
addªss
);

2284 
	}
}

2286 *
	$Æloc_mÆloc
(*
addªss
){

2288 *
m≠_addªss
;

2290 
m≠_addªss
 = (*)
	`mÆloc
(
BUFFER_SIZE
 + 
FIXED_PAGESIZE
);

2292 i‡(
m≠_addªss
 =(*)
NULL
) map_address = (*)-1;

2294 i‡(
m≠_addªss
 != (*)-1) {

2295 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2296 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_mÆloc_‰ì
;

2297 
ªÀa£_pos
 ++;

2300  
m≠_addªss
;

2302 
	}
}

2306 #ifde‡
ALLOC_QALLOC


2308 *
qÆloc
(
Êags
, 
size_t
 
byãs
);

2309 *
q‰ì
 (*
addªss
);

2311 
	#QNONCACHE
 0x1

	)

2312 
	#QCOMMS
 0x2

	)

2313 
	#QFAST
 0x4

	)

2315 
	$Æloc_qÆloc_‰ì
(
ªÀa£_t
 *
ªÀa£
){

2317 
	`q‰ì
(
ªÀa£
 -> 
addªss
);

2319 
	}
}

2321 *
	$Æloc_qÆloc
(*
addªss
){

2322 *
m≠_addªss
;

2324 
m≠_addªss
 = (*)
	`qÆloc
(
QCOMMS
 | 
QFAST
, 
BUFFER_SIZE
 + 
FIXED_PAGESIZE
);

2326 i‡(
m≠_addªss
 =(*)
NULL
) map_address = (*)-1;

2328 i‡(
m≠_addªss
 != (*)-1) {

2329 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2330 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_qÆloc_‰ì
;

2331 
ªÀa£_pos
 ++;

2334  (*)(((
BLASULONG
)
m≠_addªss
 + 
FIXED_PAGESIZE
 - 1) & ~(FIXED_PAGESIZE - 1));

2335 
	}
}

2339 #ifde‡
ALLOC_WINDOWS


2341 
	$Æloc_wödows_‰ì
(
ªÀa£_t
 *
ªÀa£
){

2343 
	`VútuÆFªe
(
ªÀa£
 -> 
addªss
, 0, 
MEM_RELEASE
);

2345 
	}
}

2347 *
	$Æloc_wödows
(*
addªss
){

2348 *
m≠_addªss
;

2350 
m≠_addªss
 = 
	`VútuÆAŒoc
(
addªss
,

2351 
BUFFER_SIZE
,

2352 
MEM_RESERVE
 | 
MEM_COMMIT
,

2353 
PAGE_READWRITE
);

2355 i‡(
m≠_addªss
 =(*)
NULL
) map_address = (*)-1;

2357 i‡(
m≠_addªss
 != (*)-1) {

2358 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2359 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_wödows_‰ì
;

2360 
ªÀa£_pos
 ++;

2363  
m≠_addªss
;

2364 
	}
}

2368 #ifde‡
ALLOC_DEVICEDRIVER


2369 #i‚de‡
DEVICEDRIVER_NAME


2370 
	#DEVICEDRIVER_NAME
 "/dev/m≠≥r"

	)

2373 
	$Æloc_devi˚dúvî_‰ì
(
ªÀa£_t
 *
ªÀa£
){

2375 i‡(
	`munm≠
(
ªÀa£
 -> 
addªss
, 
BUFFER_SIZE
)) {

2376 
	`¥ötf
("OpenBLAS : Bugphysarea unmap failed.\n");

2379 i‡(
	`˛o£
(
ªÀa£
 -> 
©å
)) {

2380 
	`¥ötf
("OpenBLAS : Bugphysarea close failed.\n");

2383 
	}
}

2385 *
	$Æloc_devi˚dúvî
(*
addªss
){

2387 
fd
;

2388 *
m≠_addªss
;

2390 i‡((
fd
 = 
	`›í
(
DEVICEDRIVER_NAME
, 
O_RDWR
 | 
O_SYNC
)) < 0) {

2396 
m≠_addªss
 = 
	`mm≠
(
addªss
, 
BUFFER_SIZE
,

2397 
PROT_READ
 | 
PROT_WRITE
,

2398 
MAP_FILE
 | 
MAP_SHARED
,

2399 
fd
, 0);

2401 i‡(
m≠_addªss
 != (*)-1) {

2402 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2403 
ªÀa£_öfo
[
ªÀa£_pos
].
©å
 = 
fd
;

2404 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_devi˚dúvî_‰ì
;

2405 
ªÀa£_pos
 ++;

2408  
m≠_addªss
;

2409 
	}
}

2413 #ifde‡
ALLOC_SHM


2415 
	$Æloc_shm_‰ì
(
ªÀa£_t
 *
ªÀa£
){

2417 i‡(
	`shmdt
(
ªÀa£
 -> 
addªss
)) {

2418 
	`¥ötf
("OpenBLAS : Shared memory unmap failed.\n");

2420 
	}
}

2422 *
	$Æloc_shm
(*
addªss
){

2423 *
m≠_addªss
;

2424 
shmid
;

2426 
shmid
 = 
	`shmgë
(
IPC_PRIVATE
, 
BUFFER_SIZE
,
IPC_CREAT
 | 0600);

2428 
m≠_addªss
 = (*)
	`shm©
(
shmid
, 
addªss
, 0);

2430 i‡(
m≠_addªss
 != (*)-1){

2432 #ifde‡
OS_LINUX


2433 
	`my_mböd
(
m≠_addªss
, 
BUFFER_SIZE
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

2436 
	`shm˘l
(
shmid
, 
IPC_RMID
, 0);

2438 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2439 
ªÀa£_öfo
[
ªÀa£_pos
].
©å
 = 
shmid
;

2440 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_shm_‰ì
;

2441 
ªÀa£_pos
 ++;

2444  
m≠_addªss
;

2445 
	}
}

2447 #i‡
deföed
 
OS_LINUX
 || deföed 
OS_AIX
 || deföed 
__sun__
 || deföed 
OS_WINDOWS


2449 
	$Æloc_hugëlb_‰ì
(
ªÀa£_t
 *
ªÀa£
){

2451 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_AIX
)

2452 i‡(
	`shmdt
(
ªÀa£
 -> 
addªss
)) {

2453 
	`¥ötf
("OpenBLAS : Hugepage unmap failed.\n");

2457 #ifde‡
__sun__


2459 
	`munm≠
(
ªÀa£
 -> 
addªss
, 
BUFFER_SIZE
);

2463 #ifde‡
OS_WINDOWS


2465 
	`VútuÆFªe
(
ªÀa£
 -> 
addªss
, 0, 
MEM_LARGE_PAGES
 | 
MEM_RELEASE
);

2469 
	}
}

2471 *
	$Æloc_hugëlb
(*
addªss
){

2473 *
m≠_addªss
 = (*)-1;

2475 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_AIX
)

2476 
shmid
;

2478 
shmid
 = 
	`shmgë
(
IPC_PRIVATE
, 
BUFFER_SIZE
,

2479 #ifde‡
OS_LINUX


2480 
SHM_HUGETLB
 |

2482 #ifde‡
OS_AIX


2483 
SHM_LGPAGE
 | 
SHM_PIN
 |

2485 
IPC_CREAT
 | 
SHM_R
 | 
SHM_W
);

2487 i‡(
shmid
 != -1) {

2488 
m≠_addªss
 = (*)
	`shm©
(
shmid
, 
addªss
, 
SHM_RND
);

2490 #ifde‡
OS_LINUX


2491 
	`my_mböd
(
m≠_addªss
, 
BUFFER_SIZE
, 
MPOL_PREFERRED
, 
NULL
, 0, 0);

2494 i‡(
m≠_addªss
 != (*)-1){

2495 
	`shm˘l
(
shmid
, 
IPC_RMID
, 0);

2500 #ifde‡
__sun__


2501 
mem˙é_mha
 
mha
;

2503 
mha
.
mha_cmd
 = 
MHA_MAPSIZE_BSSBRK
;

2504 
mha
.
mha_Êags
 = 0;

2505 
mha
.
mha_∑gesize
 = 
HUGE_PAGESIZE
;

2506 
	`mem˙é
(
NULL
, 0, 
MC_HAT_ADVISE
, (*)&
mha
, 0, 0);

2508 
m≠_addªss
 = (
BLASULONG
)
	`memÆign
(
HUGE_PAGESIZE
, 
BUFFER_SIZE
);

2511 #ifde‡
OS_WINDOWS


2513 
HANDLE
 
hTokí
;

2514 
TOKEN_PRIVILEGES
 
ç
;

2516 i‡(
	`O≥nPro˚ssTokí
(
	`GëCuºítPro˚ss
(), 
TOKEN_ADJUST_PRIVILEGES
, &
hTokí
Ë!
TRUE
)  (*) -1;

2518 
ç
.
PrivûegeCou¡
 = 1;

2519 
ç
.
Privûeges
[0].
Aâribuãs
 = 
SE_PRIVILEGE_ENABLED
;

2521 i‡(
	`LookupPrivûegeVÆue
(
NULL
, 
SE_LOCK_MEMORY_NAME
, &
ç
.
Privûeges
[0].
Luid
Ë!
TRUE
) {

2522 
	`Clo£H™dÀ
(
hTokí
);

2526 i‡(
	`Adju°TokíPrivûeges
(
hTokí
, 
FALSE
, &
ç
, 0, 
NULL
, NULLË!
TRUE
) {

2527 
	`Clo£H™dÀ
(
hTokí
);

2531 
m≠_addªss
 = (*)
	`VútuÆAŒoc
(
addªss
,

2532 
BUFFER_SIZE
,

2533 
MEM_LARGE_PAGES
 | 
MEM_RESERVE
 | 
MEM_COMMIT
,

2534 
PAGE_READWRITE
);

2536 
ç
.
Privûeges
[0].
Aâribuãs
 = 0;

2537 
	`Adju°TokíPrivûeges
(
hTokí
, 
FALSE
, &
ç
, 0, 
NULL
, NULL);

2539 i‡(
m≠_addªss
 =(*)
NULL
) map_address = (*)-1;

2543 i‡(
m≠_addªss
 != (*)-1){

2544 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2545 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_hugëlb_‰ì
;

2546 
ªÀa£_pos
 ++;

2549  
m≠_addªss
;

2550 
	}
}

2555 #ifde‡ 
ALLOC_HUGETLBFILE


2557 
	ghugëlb_pid
 = 0;

2559 
	$Æloc_hugëlbfûe_‰ì
(
ªÀa£_t
 *
ªÀa£
){

2561 i‡(
	`munm≠
(
ªÀa£
 -> 
addªss
, 
BUFFER_SIZE
)) {

2562 
	`¥ötf
("OpenBLAS : HugeTLBfs unmap failed.\n");

2565 i‡(
	`˛o£
(
ªÀa£
 -> 
©å
)) {

2566 
	`¥ötf
("OpenBLAS : HugeTLBfs close failed.\n");

2568 
	}
}

2570 *
	$Æloc_hugëlbfûe
(*
addªss
){

2572 *
m≠_addªss
 = (*)-1;

2573 
fd
;

2574 
fûíame
[64];

2576 i‡(!
hugëlb_pid
Ëhugëlb_pid = 
	`gëpid
();

2578 
	`•rötf
(
fûíame
, "%s/gŸobœs.%d", 
HUGETLB_FILE_NAME
, 
hugëlb_pid
);

2580 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_RDWR
 | 
O_CREAT
, 0700)) < 0) {

2584 
	`u∆ök
(
fûíame
);

2586 
m≠_addªss
 = 
	`mm≠
(
addªss
, 
BUFFER_SIZE
,

2587 
PROT_READ
 | 
PROT_WRITE
,

2588 
MAP_SHARED
,

2589 
fd
, 0);

2591 i‡(
m≠_addªss
 != (*)-1) {

2592 
ªÀa£_öfo
[
ªÀa£_pos
].
addªss
 = 
m≠_addªss
;

2593 
ªÀa£_öfo
[
ªÀa£_pos
].
©å
 = 
fd
;

2594 
ªÀa£_öfo
[
ªÀa£_pos
].
func
 = 
Æloc_hugëlbfûe_‰ì
;

2595 
ªÀa£_pos
 ++;

2598  
m≠_addªss
;

2599 
	}
}

2603 #ifde‡
SEEK_ADDRESS


2604 
BLASULONG
 
	gba£_addªss
 = 0UL;

2606 
BLASULONG
 
	gba£_addªss
 = 
BASE_ADDRESS
;

2610 
BLASULONG
 
	mlock
;

2611 *
	maddr
;

2612 #i‡
deföed
(
WHEREAMI
Ë&& !deföed(
USE_OPENMP
)

2613 
	mpos
;

2615 
	mu£d
;

2616 #i‚de‡
__64BIT__


2617 
	mdummy
[48];

2619 
	mdummy
[40];

2622 } 
	gmem‹y
[
NUM_BUFFERS
];

2624 
	gmem‹y_öôülized
 = 0;

2632 *
	$bœs_mem‹y_Æloc
(
¥o˝os
){

2634 
posôi⁄
;

2635 #i‡
	`deföed
(
WHEREAMI
Ë&& !deföed(
USE_OPENMP
)

2636 
mypos
 = 0;

2639 *
m≠_addªss
;

2641 *(*
mem‹yÆloc
[])(*
addªss
) = {

2642 #ifde‡
ALLOC_DEVICEDRIVER


2643 
Æloc_devi˚dúvî
,

2646 #ifde‡
ALLOC_SHM


2647 
Æloc_shm
,

2649 #i‡((
deföed
 
ALLOC_SHM
Ë&& (deföed 
OS_LINUX
 || deföed 
OS_AIX
 || deföed 
__sun__
 || deföed 
OS_WINDOWS
))

2650 
Æloc_hugëlb
,

2652 #ifde‡
ALLOC_MMAP


2653 
Æloc_mm≠
,

2655 #ifde‡
ALLOC_QALLOC


2656 
Æloc_qÆloc
,

2658 #ifde‡
ALLOC_WINDOWS


2659 
Æloc_wödows
,

2661 #ifde‡
ALLOC_MALLOC


2662 
Æloc_mÆloc
,

2664 
NULL
,

2666 *(**
func
)(*
addªss
);

2668 #i‡
	`deföed
(
USE_OPENMP
)

2669 i‡(!
mem‹y_öôülized
) {

2672 
	`LOCK_COMMAND
(&
Æloc_lock
);

2674 i‡(!
mem‹y_öôülized
) {

2676 #i‡
	`deföed
(
WHEREAMI
Ë&& !deföed(
USE_OPENMP
)

2677 
posôi⁄
 = 0;Öosôi⁄ < 
NUM_BUFFERS
;Öosition ++){

2678 
mem‹y
[
posôi⁄
].
addr
 = (*)0;

2679 
mem‹y
[
posôi⁄
].
pos
 = -1;

2680 
mem‹y
[
posôi⁄
].
u£d
 = 0;

2681 
mem‹y
[
posôi⁄
].
lock
 = 0;

2685 #ifde‡
DYNAMIC_ARCH


2686 
	`gŸobœs_dy«mic_öô
();

2689 #i‡
	`deföed
(
SMP
Ë&& deföed(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

2690 
	`gŸobœs_afföôy_öô
();

2693 #ifde‡
SMP


2694 i‡(!
bœs_num_thªads
Ë
bœs_˝u_numbî
 = 
	`bœs_gë_˝u_numbî
();

2697 #i‡
	`deföed
(
ARCH_X86
Ë|| deföed(
ARCH_X86_64
Ë|| deföed(
ARCH_IA64
Ë|| deföed(
ARCH_MIPS64
Ë|| deföed(
ARCH_ARM64
)

2698 #i‚de‡
DYNAMIC_ARCH


2699 
	`bœs_£t_∑ømëî
();

2703 
mem‹y_öôülized
 = 1;

2706 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2707 #i‡
	`deföed
(
USE_OPENMP
)

2711 #ifde‡
DEBUG


2712 
	`¥ötf
("Alloc Start ...\n");

2744 
posôi⁄
 = 0;

2746 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2747 
	`LOCK_COMMAND
(&
Æloc_lock
);

2750 
RMB
;

2751 #i‡
	`deföed
(
USE_OPENMP
)

2752 i‡(!
mem‹y
[
posôi⁄
].
u£d
) {

2753 
	`bœs_lock
(&
mem‹y
[
posôi⁄
].
lock
);

2755 i‡(!
mem‹y
[
posôi⁄
].
u£d
Ë
Æloˇti⁄
;

2757 #i‡
	`deföed
(
USE_OPENMP
)

2758 
	`bœs_u∆ock
(&
mem‹y
[
posôi⁄
].
lock
);

2761 
posôi⁄
 ++;

2763 } 
posôi⁄
 < 
NUM_BUFFERS
);

2764 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2765 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2767 
îr‹
;

2769 
Æloˇti⁄
 :

2771 #ifde‡
DEBUG


2772 
	`¥ötf
(" Posôi⁄ -> %d\n", 
posôi⁄
);

2775 
mem‹y
[
posôi⁄
].
u£d
 = 1;

2776 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2777 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2779 
	`bœs_u∆ock
(&
mem‹y
[
posôi⁄
].
lock
);

2781 i‡(!
mem‹y
[
posôi⁄
].
addr
) {

2783 #ifde‡
DEBUG


2784 
	`¥ötf
("AŒoˇti⁄ Sèπ : %lx\n", 
ba£_addªss
);

2787 
m≠_addªss
 = (*)-1;

2789 
func
 = &
mem‹yÆloc
[0];

2791 (
func
 !
NULL
Ë&& (
m≠_addªss
 == (*) -1)) {

2793 
m≠_addªss
 = (*
func
)((*)
ba£_addªss
);

2795 #ifde‡
ALLOC_DEVICEDRIVER


2796 i‡((*
func
 =
Æloc_devi˚dúvî
Ë&& (
m≠_addªss
 == (*)-1)) {

2797 
	`Ârötf
(
°dîr
, "OpenBLAS Warning ... Physically contiguousállocation was failed.\n");

2801 #ifde‡
ALLOC_HUGETLBFILE


2802 i‡((*
func
 =
Æloc_hugëlbfûe
Ë&& (
m≠_addªss
 == (*)-1)) {

2803 #i‚de‡
OS_WINDOWS


2804 
	`Ârötf
(
°dîr
, "OpenBLAS Warning ... HugeTLB(File)állocation was failed.\n");

2809 #i‡(
deföed
 
ALLOC_SHM
Ë&& (deföed 
OS_LINUX
 || deföed 
OS_AIX
 || deföed 
__sun__
 || deföed 
OS_WINDOWS
)

2810 i‡((*
func
 =
Æloc_hugëlb
Ë&& (
m≠_addªss
 !(*)-1)Ë
hugëlb_Æloˇãd
 = 1;

2813 
func
 ++;

2816 #ifde‡
DEBUG


2817 
	`¥ötf
(" Suc˚s†-> %08lx\n", 
m≠_addªss
);

2819 i‡(((
BLASLONG
Ë
m≠_addªss
Ë=-1Ë
ba£_addªss
 = 0UL;

2821 i‡(
ba£_addªss
Ëba£_addªs†+
BUFFER_SIZE
 + 
FIXED_PAGESIZE
;

2823 } (
BLASLONG
)
m≠_addªss
 == -1);

2825 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2826 
	`LOCK_COMMAND
(&
Æloc_lock
);

2828 
mem‹y
[
posôi⁄
].
addr
 = 
m≠_addªss
;

2829 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2830 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2833 #ifde‡
DEBUG


2834 
	`¥ötf
(" M≠pög Suc˚eded. %p(%d)\n", (*)
mem‹y
[
posôi⁄
].
addr
,Öosition);

2838 #i‡
	`deföed
(
WHEREAMI
Ë&& !deföed(
USE_OPENMP
)

2840 i‡(
mem‹y
[
posôi⁄
].
pos
 =-1Ëmem‹y[posôi⁄].po†
mypos
;

2844 #ifde‡
DYNAMIC_ARCH


2846 i‡(
mem‹y_öôülized
 == 1) {

2848 
	`LOCK_COMMAND
(&
Æloc_lock
);

2850 i‡(
mem‹y_öôülized
 == 1) {

2852 i‡(!
gŸobœs
Ë
	`gŸobœs_dy«mic_öô
();

2854 
mem‹y_öôülized
 = 2;

2857 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2863 #ifde‡
DEBUG


2864 
	`¥ötf
("Mapped : %p %3d\n\n",

2865 (*)
mem‹y
[
posôi⁄
].
addr
,Öosition);

2868  (*)
mem‹y
[
posôi⁄
].
addr
;

2870 
îr‹
:

2871 
	`¥ötf
("BLAS : Program is Terminated. Because youÅriedÅoállocateÅoo many memoryÑegions.\n");

2873  
NULL
;

2876 
	`bœs_mem‹y_‰ì
(*
‰ì_¨ó
){

2878 
posôi⁄
;

2880 #ifde‡
DEBUG


2881 
	`¥ötf
("Unm≠≥d Sèπ : %∞...\n", 
‰ì_¨ó
);

2884 
posôi⁄
 = 0;

2885 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2886 
	`LOCK_COMMAND
(&
Æloc_lock
);

2888 (
posôi⁄
 < 
NUM_BUFFERS
Ë&& (
mem‹y
[posôi⁄].
addr
 !
‰ì_¨ó
))

2889 
posôi⁄
++;

2891 i‡(
posôi⁄
 >
NUM_BUFFERS
Ë
îr‹
;

2893 #ifde‡
DEBUG


2894 i‡(
mem‹y
[
posôi⁄
].
addr
 !
‰ì_¨ó
Ë
îr‹
;

2895 
	`¥ötf
(" Posôi⁄ : %d\n", 
posôi⁄
);

2899 
WMB
;

2901 
mem‹y
[
posôi⁄
].
u£d
 = 0;

2902 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2903 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2906 #ifde‡
DEBUG


2907 
	`¥ötf
("Unmap Succeeded.\n\n");

2912 
îr‹
:

2913 
	`¥ötf
("BLAS : Bad mem‹y u«Œoˇti⁄! : %4d %p\n", 
posôi⁄
, 
‰ì_¨ó
);

2915 #ifde‡
DEBUG


2916 
posôi⁄
 = 0;Öosôi⁄ < 
NUM_BUFFERS
;Öosition++)

2917 
	`¥ötf
("%4ld %∞: %d\n", 
posôi⁄
, 
mem‹y
[posôi⁄].
addr
, mem‹y[posôi⁄].
u£d
);

2919 #i‡(
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)Ë&& !deföed(
USE_OPENMP
)

2920 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2925 *
	`bœs_mem‹y_Æloc_nﬁock
(
unu£d
) {

2926 *
m≠_addªss
;

2927 
m≠_addªss
 = (*)
	`mÆloc
(
BUFFER_SIZE
 + 
FIXED_PAGESIZE
);

2928  
m≠_addªss
;

2931 
	`bœs_mem‹y_‰ì_nﬁock
(* 
m≠_addªss
) {

2932 
	`‰ì
(
m≠_addªss
);

2935 
	`bœs_shutdown
(){

2937 
pos
;

2939 #ifde‡
SMP


2940 
	`BLASFUNC
(
bœs_thªad_shutdown
)();

2943 
	`LOCK_COMMAND
(&
Æloc_lock
);

2945 
pos
 = 0;Öo†< 
ªÀa£_pos
;Öos ++) {

2946 
ªÀa£_öfo
[
pos
].
	`func
(&release_info[pos]);

2949 #ifde‡
SEEK_ADDRESS


2950 
ba£_addªss
 = 0UL;

2952 
ba£_addªss
 = 
BASE_ADDRESS
;

2955 
pos
 = 0;Öo†< 
NUM_BUFFERS
;Öos ++){

2956 
mem‹y
[
pos
].
addr
 = (*)0;

2957 
mem‹y
[
pos
].
u£d
 = 0;

2958 #i‡
	`deföed
(
WHEREAMI
Ë&& !deföed(
USE_OPENMP
)

2959 
mem‹y
[
pos
].pos = -1;

2961 
mem‹y
[
pos
].
lock
 = 0;

2964 
	`UNLOCK_COMMAND
(&
Æloc_lock
);

2969 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

2971 #i‡
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)

2972 #i‡ 
	`deföed
(
USE_PTHREAD_LOCK
)

2973 
±hªad_muãx_t
 
öô_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

2974 #ñi‡
	`deföed
(
USE_PTHREAD_SPINLOCK
)

2975 
±hªad_•ölock_t
 
öô_lock
 = 0;

2977 
BLASULONG
 
öô_lock
 = 0UL;

2981 
	`_touch_mem‹y
(
bœs_¨g_t
 *
¨g
, 
BLASLONG
 *
ønge_m
, BLASLONG *
ønge_n
,

2982 *
ß
, *
sb
, 
BLASLONG
 
pos
) {

2984 #i‡!
	`deföed
(
ARCH_POWER
Ë&& !deföed(
ARCH_SPARC
)

2986 
size_t
 
size
;

2987 
BLASULONG
 
buf„r
;

2989 
size
 = 
BUFFER_SIZE
 - 
PAGESIZE
;

2990 
buf„r
 = (
BLASULONG
)
ß
 + 
GEMM_OFFSET_A
;

2992 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

2993 i‡(
hŸ_Æloc
 != 2) {

2996 #i‡
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)

2997 
	`LOCK_COMMAND
(&
öô_lock
);

3000 
size
 > 0) {

3001 *(*)
buf„r
 = 
size
;

3002 
buf„r
 +
PAGESIZE
;

3003 
size
 -
PAGESIZE
;

3006 #i‡
	`deföed
(
SMP
Ë|| deföed(
USE_LOCKING
)

3007 
	`UNLOCK_COMMAND
(&
öô_lock
);

3010 
size
 = 
	`MIN
((
BUFFER_SIZE
 - 
PAGESIZE
), 
L2_SIZE
);

3011 
buf„r
 = (
BLASULONG
)
ß
 + 
GEMM_OFFSET_A
;

3013 
size
 > 0) {

3014 *(*)
buf„r
 = 
size
;

3015 
buf„r
 += 64;

3016 
size
 -= 64;

3019 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

3026 #ifde‡
SMP


3028 
	`_öô_thªad_mem‹y
(*
buf„r
) {

3030 
bœs_queue_t
 
queue
[
MAX_CPU_NUMBER
];

3031 
num_˝u
;

3033 
num_˝u
 = 0;Çum_˝u < 
bœs_num_thªads
;Çum_cpu++) {

3035 
	`bœs_queue_öô
(&
queue
[
num_˝u
]);

3036 
queue
[
num_˝u
].
mode
 = 
BLAS_DOUBLE
 | 
BLAS_REAL
;

3037 
queue
[
num_˝u
].
routöe
 = &
_touch_mem‹y
;

3038 
queue
[
num_˝u
].
¨gs
 = 
NULL
;

3039 
queue
[
num_˝u
].
√xt
 = &queue[num_cpu + 1];

3042 
queue
[
num_˝u
 - 1].
√xt
 = 
NULL
;

3043 
queue
[0].
ß
 = 
buf„r
;

3045 
	`exec_bœs
(
num_˝u
, 
queue
);

3050 
	`gŸobœs_mem‹y_öô
() {

3052 *
buf„r
;

3054 
hŸ_Æloc
 = 1;

3056 
buf„r
 = (*)
	`bœs_mem‹y_Æloc
(0);

3058 #ifde‡
SMP


3059 i‡(
bœs_˝u_numbî
 =0Ë
	`bœs_gë_˝u_numbî
();

3060 #ifde‡
SMP_SERVER


3061 i‡(
bœs_£rvî_avaû
 =0Ë
	`bœs_thªad_öô
();

3064 
	`_öô_thªad_mem‹y
((*)((
BLASULONG
)
buf„r
 + 
GEMM_OFFSET_A
));

3068 
	`_touch_mem‹y
(
NULL
, NULL, NULL, (*)((
BLASULONG
)
buf„r
 + 
GEMM_OFFSET_A
), NULL, 0);

3072 
	`bœs_mem‹y_‰ì
(
buf„r
);

3078 
gŸobœs_öôülized
 = 0;

3079 
	`›íbœs_ªad_ív
();

3081 
CONSTRUCTOR
 
	`gŸobœs_öô
() {

3083 i‡(
gŸobœs_öôülized
) ;

3085 #ifde‡
SMP


3086 
	`›íbœs_f‹k_h™dÀr
();

3089 
	`›íbœs_ªad_ív
();

3091 #ifde‡
PROFILE


3092 
	`m⁄c⁄åﬁ
 (0);

3095 #ifde‡
DYNAMIC_ARCH


3096 
	`gŸobœs_dy«mic_öô
();

3099 #i‡
	`deföed
(
SMP
Ë&& deföed(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

3100 
	`gŸobœs_afföôy_öô
();

3103 #i‡
	`deföed
(
OS_LINUX
Ë&& !deföed(
NO_WARMUP
)

3104 
	`gŸobœs_mem‹y_öô
();

3109 
æimô
 
cuæimô
;

3110 i‡–
	`gëæimô
(
RLIMIT_STACK
, &
cuæimô
 ) == 0 )

3112 i‡–
cuæimô
.
æim_cur
 !cuæimô.
æim_max
 )

3114 
cuæimô
.
æim_cur
 = cuæimô.
æim_max
;

3115 
	`£ålimô
(
RLIMIT_STACK
, &
cuæimô
);

3120 #ifde‡
SMP


3121 i‡(
bœs_˝u_numbî
 =0Ë
	`bœs_gë_˝u_numbî
();

3122 #ifde‡
SMP_SERVER


3123 i‡(
bœs_£rvî_avaû
 =0Ë
	`bœs_thªad_öô
();

3127 #ifde‡
FUNCTION_PROFILE


3128 
	`gŸobœs_¥ofûe_öô
();

3131 
gŸobœs_öôülized
 = 1;

3133 #ifde‡
PROFILE


3134 
	`m⁄c⁄åﬁ
 (1);

3139 
DESTRUCTOR
 
	`gŸobœs_quô
() {

3141 i‡(
gŸobœs_öôülized
 == 0) ;

3143 
	`bœs_shutdown
();

3145 #ifde‡
PROFILE


3146 
	`m⁄c⁄åﬁ
 (0);

3149 #ifde‡
FUNCTION_PROFILE


3150 
	`gŸobœs_¥ofûe_quô
();

3153 #i‡
	`deföed
(
SMP
Ë&& deföed(
OS_LINUX
Ë&& !deföed(
NO_AFFINITY
)

3154 
	`gŸobœs_afföôy_quô
();

3157 #ifde‡
DYNAMIC_ARCH


3158 
	`gŸobœs_dy«mic_quô
();

3161 
gŸobœs_öôülized
 = 0;

3163 #ifde‡
PROFILE


3164 
	`m⁄c⁄åﬁ
 (1);

3168 #i‡
	`deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
)

3169 
BOOL
 
APIENTRY
 
	`DŒMaö
(
HMODULE
 
hModuÀ
, 
DWORD
 
ul_ªas⁄_f‹_ˇŒ
, 
LPVOID
 
ÕRe£rved
)

3171 
ul_ªas⁄_f‹_ˇŒ
)

3173 
DLL_PROCESS_ATTACH
:

3174 
	`gŸobœs_öô
();

3176 
DLL_THREAD_ATTACH
:

3178 
DLL_THREAD_DETACH
:

3180 
DLL_PROCESS_DETACH
:

3181 
	`gŸobœs_quô
();

3186  
TRUE
;

3197 
	`⁄_¥o˚ss_ãrm
()

3199 
	`gŸobœs_quô
();

3202 #ifde‡
_WIN64


3203 #¥agm®
	`commít
(
lökî
, "/INCLUDE:_tls_used")

3205 #¥agm®
	`commít
(
lökî
, "/INCLUDE:__tls_used")

3208 #ifde‡
_WIN64


3209 #¥agm®
	`c⁄°_£g
(".CRT$XLB")

3211 #¥agm®
	`d©a_£g
(".CRT$XLB")

3213 (
APIENTRY
 *
dŒ_ˇŒback
)(
HINSTANCE
 
h
, 
DWORD
 
ul_ªas⁄_f‹_ˇŒ
, 
PVOID
 
pv
Ë
DŒMaö
;

3214 #ifde‡
_WIN64


3215 #¥agm®
	`c⁄°_£g
()

3217 #¥agm®
	`d©a_£g
()

3220 #ifde‡
_WIN64


3221 #¥agm®
	`c⁄°_£g
(".CRT$XTU")

3223 #¥agm®
	`d©a_£g
(".CRT$XTU")

3225 (*
p_¥o˚ss_ãrm
)(Ë
⁄_¥o˚ss_ãrm
;

3226 #ifde‡
_WIN64


3227 #¥agm®
	`c⁄°_£g
()

3229 #¥agm®
	`d©a_£g
()

3233 #i‡(
	`deföed
(
C_PGI
Ë|| (!deföed(
C_SUN
Ë&& deföed(
F_INTERFACE_SUN
))Ë&& (deföed(
ARCH_X86
Ë|| deföed(
ARCH_X86_64
))

3235 
	`gŸobœs_dummy_f‹_PGI
() {

3237 
	`gŸobœs_öô
();

3238 
	`gŸobœs_quô
();

3239 #i‡
__PGIC__
 < 19

3241 
	`asm
 ("\t.section\t.ctors,\"aw\",@progbits; .align 8; .quad gotoblas_init; .section .text");

3242 
	`asm
 ("\t.section\t.dtors,\"aw\",@progbits; .align 8; .quad gotoblas_quit; .section .text");

3244 
	`asm
 (".section .init,\"ax\"; call gotoblas_init@PLT; .section .text");

3245 
	`asm
 (".section .fini,\"ax\"; call gotoblas_quit@PLT; .section .text");

	@memory_qalloc.c

39 
	~<°dio.h
>

40 
	~"comm⁄.h
"

41 #ifde‡
OS_LINUX


42 
	~<sys/sysöfo.h
>

43 
	~<sched.h
>

44 
	~<î∫o.h
>

45 
	~<löux/uni°d.h
>

46 
	~<sys/sysˇŒ.h
>

47 
	~<sys/time.h
>

48 
	~<sys/ªsour˚.h
>

51 #ifde‡
OS_HAIKU


52 
	~<uni°d.h
>

55 #i‡
deföed
(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
)

56 
	~<sys/sys˘l.h
>

57 
	~<sys/ªsour˚.h
>

61 
	#FIXED_PAGESIZE
 4096

	)

64 *
	gß
 = 
NULL
;

65 *
	gsb
 = 
NULL
;

66 
	g°©ic_buf„r
[
BUFFER_SIZE
/()];

68 *
	$bœs_mem‹y_Æloc
(
num¥oc
){

70 i‡(
ß
 =
NULL
){

72 
ß
 = (*)
	`qÆloc
(
QFAST
, 
BUFFER_SIZE
);

74 
ß
 = (*)
	`mÆloc
(
BUFFER_SIZE
);

76 
sb
 = (*)&
°©ic_buf„r
[0];

79  
ß
;

80 
	}
}

82 
	$bœs_mem‹y_‰ì
(*
‰ì_¨ó
){

84 
	}
}

88 
›íbœs_w¨nög
(
vîbo£
, c⁄° * 
msg
);

90 #i‚de‡
SMP


92 
	#bœs_˝u_numbî
 1

	)

93 
	#bœs_num_thªads
 1

	)

96 
	$gŸo_gë_num_¥ocs
 (Ë{  1;
	}
};

97 
	$gŸo_£t_num_thªads
(
num_thªads
Ë{
	}
};

101 #i‡
deföed
(
OS_LINUX
Ë|| deföed(
OS_SUNOS
)

102 #i‚de‡
NO_AFFINITY


103 
gë_num_¥ocs
();

105 
	$gë_num_¥ocs
() {

107 
nums
 = 0;

108 
˝u_£t_t
 
˝u£t
,*
˝u£ç
;

109 
size_t
 
size
;

110 
ªt
;

112 #i‡
	`deföed
(
__GLIBC_PREREQ
)

113 #i‡!
	`__GLIBC_PREREQ
(2, 7)

114 
i
;

115 #i‡!
	`__GLIBC_PREREQ
(2, 6)

116 
n
;

121 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

122 #i‡!
	`deföed
(
OS_LINUX
)

123  
nums
;

175 
	}
}

179 #ifde‡
OS_ANDROID


180 
	$gë_num_¥ocs
() {

181 
nums
 = 0;

182 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

183  
nums
;

184 
	}
}

187 #ifde‡
OS_HAIKU


188 
	$gë_num_¥ocs
() {

189 
nums
 = 0;

190 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

191  
nums
;

192 
	}
}

195 #ifde‡
OS_AIX


196 
	$gë_num_¥ocs
() {

197 
nums
 = 0;

198 i‡(!
nums
Ënum†
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
);

199  
nums
;

200 
	}
}

203 #ifde‡
OS_WINDOWS


205 
	$gë_num_¥ocs
() {

207 
nums
 = 0;

209 i‡(
nums
 == 0) {

211 
SYSTEM_INFO
 
sysöfo
;

213 
	`GëSy°emInfo
(&
sysöfo
);

215 
nums
 = 
sysöfo
.
dwNumbîOfPro˚ss‹s
;

218  
nums
;

219 
	}
}

223 #i‡
deföed
(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
)

225 
	$gë_num_¥ocs
() {

227 
nums
 = 0;

229 
m
[2];

230 
size_t
 
Àn
;

232 i‡(
nums
 == 0) {

233 
m
[0] = 
CTL_HW
;

234 
m
[1] = 
HW_NCPU
;

235 
Àn
 = ();

236 
	`sys˘l
(
m
, 2, &
nums
, &
Àn
, 
NULL
, 0);

239  
nums
;

240 
	}
}

244 #i‡
deföed
(
OS_DARWIN
)

245 
	$gë_num_¥ocs
() {

246 
nums
 = 0;

247 
size_t
 
Àn
;

248 i‡(
nums
 == 0){

249 
Àn
 = ();

250 
	`sys˘lby«me
("hw.physiˇl˝u", &
nums
, &
Àn
, 
NULL
, 0);

252  
nums
;

253 
	}
}

280 
	gbœs_˝u_numbî
 = 0;

285 
	gbœs_num_thªads
 = 0;

287 
	$gŸo_gë_num_¥ocs
 () {

288  
bœs_˝u_numbî
;

289 
	}
}

291 
	$›íbœs_f‹k_h™dÀr
()

300 #i‡!((
	`deföed
(
OS_WINDOWS
Ë&& !deföed(
OS_CYGWIN_NT
)Ë|| deföed(
OS_ANDROID
)Ë&& deföed(
SMP_SERVER
)

301 
îr
;

302 
îr
 = 
	`±hªad_©f‹k
 (((*)()Ë
	`BLASFUNC
(
bœs_thªad_shutdown
), 
NULL
, NULL);

303 if(
îr
 != 0)

304 
	`›íbœs_w¨nög
(0, "OpenBLAS Warning ... cannot install fork handler. You may meet hangáfter fork.\n");

306 
	}
}

308 
›íbœs_num_thªads_ív
();

309 
›íbœs_gŸo_num_thªads_ív
();

310 
›íbœs_omp_num_thªads_ív
();

312 
	$bœs_gë_˝u_numbî
(){

313 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

314 
max_num
;

316 
bœs_gŸo_num
 = 0;

317 
bœs_omp_num
 = 0;

319 i‡(
bœs_num_thªads
)  blas_num_threads;

321 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

322 
max_num
 = 
	`gë_num_¥ocs
();

326 #i‚de‡
USE_OPENMP


327 
bœs_gŸo_num
=
	`›íbœs_num_thªads_ív
();

328 i‡(
bœs_gŸo_num
 < 0) blas_goto_num = 0;

330 i‡(
bœs_gŸo_num
 == 0) {

331 
bœs_gŸo_num
=
	`›íbœs_gŸo_num_thªads_ív
();

332 i‡(
bœs_gŸo_num
 < 0) blas_goto_num = 0;

338 
bœs_omp_num
=
	`›íbœs_omp_num_thªads_ív
();

339 i‡(
bœs_omp_num
 < 0) blas_omp_num = 0;

341 i‡(
bœs_gŸo_num
 > 0Ë
bœs_num_thªads
 = blas_goto_num;

342 i‡(
bœs_omp_num
 > 0Ë
bœs_num_thªads
 = blas_omp_num;

343 
bœs_num_thªads
 = 
MAX_CPU_NUMBER
;

345 #i‡
	`deföed
(
OS_LINUX
Ë|| deföed(
OS_WINDOWS
Ë|| deföed(
OS_FREEBSD
Ë|| deföed(
OS_OPENBSD
Ë|| deföed(
OS_NETBSD
Ë|| deföed(
OS_DRAGONFLY
Ë|| deföed(
OS_DARWIN
Ë|| deföed(
OS_ANDROID
)

346 i‡(
bœs_num_thªads
 > 
max_num
) blas_num_threads = max_num;

349 i‡(
bœs_num_thªads
 > 
MAX_CPU_NUMBER
) blas_num_threads = MAX_CPU_NUMBER;

351 #ifde‡
DEBUG


352 
	`¥ötf
–"Adju°edÇumbî o‡thªad†: %3d\n", 
bœs_num_thªads
);

355 
bœs_˝u_numbî
 = 
bœs_num_thªads
;

357  
bœs_num_thªads
;

358 
	}
}

362 
	$›íbœs_gë_num_¥ocs
() {

363 #i‚de‡
SMP


366  
	`gë_num_¥ocs
();

368 
	}
}

370 
	$›íbœs_gë_num_thªads
() {

371 #i‚de‡
SMP


375 
	`bœs_gë_˝u_numbî
();

376  
bœs_˝u_numbî
;

378 
	}
}

	@openblas_env.c

34 
	~"comm⁄.h
"

36 
	g›íbœs_ív_vîbo£
=0;

37 
	g›íbœs_ív_thªad_timeout
=0;

38 
	g›íbœs_ív_block_Á˘‹
=0;

39 
	g›íbœs_ív_›íbœs_num_thªads
=0;

40 
	g›íbœs_ív_gŸo_num_thªads
=0;

41 
	g›íbœs_ív_omp_num_thªads
=0;

43 
	$›íbœs_vîbo£
(Ë{  
›íbœs_ív_vîbo£
;
	}
}

44 
	$›íbœs_thªad_timeout
(Ë{  
›íbœs_ív_thªad_timeout
;
	}
}

45 
	$›íbœs_block_Á˘‹
(Ë{  
›íbœs_ív_block_Á˘‹
;
	}
}

46 
	$›íbœs_num_thªads_ív
(Ë{  
›íbœs_ív_›íbœs_num_thªads
;
	}
}

47 
	$›íbœs_gŸo_num_thªads_ív
(Ë{  
›íbœs_ív_gŸo_num_thªads
;
	}
}

48 
	$›íbœs_omp_num_thªads_ív
(Ë{  
›íbœs_ív_omp_num_thªads
;
	}
}

50 
	$›íbœs_ªad_ív
() {

51 
ªt
=0;

52 
ív_v¨_t
 
p
;

53 i‡(
	`ªadív
(
p
,"OPENBLAS_VERBOSE")Ë
ªt
 = 
	`©oi
(p);

54 if(
ªt
<0)Ñet=0;

55 
›íbœs_ív_vîbo£
=
ªt
;

57 
ªt
=0;

58 i‡(
	`ªadív
(
p
,"OPENBLAS_BLOCK_FACTOR")Ë
ªt
 = 
	`©oi
(p);

59 if(
ªt
<0)Ñet=0;

60 
›íbœs_ív_block_Á˘‹
=
ªt
;

62 
ªt
=0;

63 i‡(
	`ªadív
(
p
,"OPENBLAS_THREAD_TIMEOUT")Ë
ªt
 = 
	`©oi
(p);

64 if(
ªt
<0)Ñet=0;

65 
›íbœs_ív_thªad_timeout
=()
ªt
;

67 
ªt
=0;

68 i‡(
	`ªadív
(
p
,"OPENBLAS_NUM_THREADS")Ë
ªt
 = 
	`©oi
(p);

69 if(
ªt
<0)Ñet=0;

70 
›íbœs_ív_›íbœs_num_thªads
=
ªt
;

72 
ªt
=0;

73 i‡(
	`ªadív
(
p
,"GOTO_NUM_THREADS")Ë
ªt
 = 
	`©oi
(p);

74 if(
ªt
<0)Ñet=0;

75 
›íbœs_ív_gŸo_num_thªads
=
ªt
;

77 
ªt
=0;

78 i‡(
	`ªadív
(
p
,"OMP_NUM_THREADS")Ë
ªt
 = 
	`©oi
(p);

79 if(
ªt
<0)Ñet=0;

80 
›íbœs_ív_omp_num_thªads
=
ªt
;

82 
	}
}

	@openblas_error_handle.c

34 
	~"comm⁄.h
"

36 
›íbœs_vîbo£
();

38 
	$›íbœs_w¨nög
(
vîbo£
, c⁄° * 
msg
) {

39 
cuºít_vîbo£
;

40 
cuºít_vîbo£
=
	`›íbœs_vîbo£
();

41 if(
cuºít_vîbo£
 >
vîbo£
){

42 
	`Ârötf
(
°dîr
, "%s", 
msg
);

44 
	}
}

	@openblas_get_config.c

34 
	~"comm⁄.h
"

36 
	~<°rög.h
>

38 * 
	g›íbœs_c⁄fig_°r
=""

40 
VERSION


42 #ifde‡
USE64BITINT


45 #ifde‡
NO_CBLAS


48 #ifde‡
NO_LAPACK


51 #ifde‡
NO_LAPACKE


54 #ifde‡
DYNAMIC_ARCH


57 #ifde‡
NO_AFFINITY


60 #ifde‡
USE_OPENMP


63 #i‚de‡
DYNAMIC_ARCH


64 
CHAR_CORENAME


68 #ifde‡
DYNAMIC_ARCH


69 *
gŸobœs_c‹íame
();

72 
	gtmp_c⁄fig_°r
[256];

73 
›íbœs_gë_∑øŒñ
();

75 * 
	$CNAME
() {

76 
tmp°r
[20];

77 
	`°r˝y
(
tmp_c⁄fig_°r
, 
›íbœs_c⁄fig_°r
);

78 #ifde‡
DYNAMIC_ARCH


79 
	`°rˇt
(
tmp_c⁄fig_°r
, 
	`gŸobœs_c‹íame
());

81 i‡(
	`›íbœs_gë_∑øŒñ
() == 0)

82 
	`•rötf
(
tmp°r
, " SINGLE_THREADED");

84 
	`¢¥ötf
(
tmp°r
,19," MAX_THREADS=%d",
MAX_CPU_NUMBER
);

85 
	`°rˇt
(
tmp_c⁄fig_°r
, 
tmp°r
);

86  
tmp_c⁄fig_°r
;

87 
	}
}

90 * 
	$›íbœs_gë_c‹íame
() {

91 #i‚de‡
DYNAMIC_ARCH


92  
CHAR_CORENAME
;

94  
	`gŸobœs_c‹íame
();

96 
	}
}

	@openblas_get_num_procs.c

34 
	~"comm⁄.h
"

36 
›íbœs_gë_num_¥ocs
();

38 
	$›íbœs_gë_num_¥ocs_
() {

39  
	`›íbœs_gë_num_¥ocs
();

40 
	}
}

	@openblas_get_num_threads.c

34 
	~"comm⁄.h
"

36 
›íbœs_gë_num_thªads
();

38 
	$›íbœs_gë_num_thªads_
() {

39  
	`›íbœs_gë_num_thªads
();

40 
	}
}

	@openblas_get_parallel.c

33 
	~"comm⁄.h
"

35 #i‡
deföed
(
USE_OPENMP
)

36 
	g∑øŒñ
 = 2 ;

37 #ñi‡
deföed
(
SMP_SERVER
)

38 
	g∑øŒñ
 = 1;

40 
	g∑øŒñ
 = 0;

44 #ifde‡
NEEDBUNDERSCORE


45 
	$CNAME
() {

46  
∑øŒñ
;

47 
	}
}

49 
	$NAME
() {

50  
∑øŒñ
;

51 
	}
}

55 
	$NAME
() {

56  
∑øŒñ
;

57 
	}
}

	@openblas_set_num_threads.c

34 
	~"comm⁄.h
"

36 #ifde‡
SMP_SERVER


38 
›íbœs_£t_num_thªads
(
num_thªads
) ;

40 
	$›íbœs_£t_num_thªads_
(* 
num_thªads
){

41 
	`›íbœs_£t_num_thªads
(*
num_thªads
);

42 
	}
}

47 
	$›íbœs_£t_num_thªads
(
num_thªads
) {

48 
	}
}

50 
	$›íbœs_£t_num_thªads_
(* 
num_thªads
){

52 
	}
}

	@parameter.c

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~"comm⁄.h
"

43 
›íbœs_block_Á˘‹
();

44 
gë_L2_size
();

46 
	#DEFAULT_GEMM_P
 128

	)

47 
	#DEFAULT_GEMM_Q
 128

	)

48 
	#DEFAULT_GEMM_R
 128

	)

49 
	#DEFAULT_GEMM_OFFSET_A
 0

	)

50 
	#DEFAULT_GEMM_OFFSET_B
 0

	)

53 #i‡
GEMM_OFFSET_A
 =
gemm_off£t_a


54 
BLASLONG
 
	ggemm_off£t_a
 = 
DEFAULT_GEMM_OFFSET_A
;

56 
BLASLONG
 
	ggemm_off£t_a
 = 
GEMM_OFFSET_A
;

59 #i‡
GEMM_OFFSET_B
 =
gemm_off£t_b


60 
BLASLONG
 
	ggemm_off£t_b
 = 
DEFAULT_GEMM_OFFSET_B
;

62 
BLASLONG
 
	ggemm_off£t_b
 = 
GEMM_OFFSET_B
;

65 #i‡
SBGEMM_P
 =
sbgemm_p


66 
BLASLONG
 
	gsbgemm_p
 = 
DEFAULT_GEMM_P
;

68 
BLASLONG
 
	gsbgemm_p
 = 
SBGEMM_P
;

70 #i‡
SGEMM_P
 =
sgemm_p


71 
BLASLONG
 
	gsgemm_p
 = 
DEFAULT_GEMM_P
;

73 
BLASLONG
 
	gsgemm_p
 = 
SGEMM_P
;

75 #i‡
DGEMM_P
 =
dgemm_p


76 
BLASLONG
 
	gdgemm_p
 = 
DEFAULT_GEMM_P
;

78 
BLASLONG
 
	gdgemm_p
 = 
DGEMM_P
;

80 #i‡
CGEMM_P
 =
cgemm_p


81 
BLASLONG
 
	gcgemm_p
 = 
DEFAULT_GEMM_P
;

83 
BLASLONG
 
	gcgemm_p
 = 
CGEMM_P
;

85 #i‡
ZGEMM_P
 =
zgemm_p


86 
BLASLONG
 
	gzgemm_p
 = 
DEFAULT_GEMM_P
;

88 
BLASLONG
 
	gzgemm_p
 = 
ZGEMM_P
;

91 #i‡
SBGEMM_Q
 =
sbgemm_q


92 
BLASLONG
 
	gsbgemm_q
 = 
DEFAULT_GEMM_Q
;

94 
BLASLONG
 
	gsbgemm_q
 = 
SBGEMM_Q
;

96 #i‡
SGEMM_Q
 =
sgemm_q


97 
BLASLONG
 
	gsgemm_q
 = 
DEFAULT_GEMM_Q
;

99 
BLASLONG
 
	gsgemm_q
 = 
SGEMM_Q
;

101 #i‡
DGEMM_Q
 =
dgemm_q


102 
BLASLONG
 
	gdgemm_q
 = 
DEFAULT_GEMM_Q
;

104 
BLASLONG
 
	gdgemm_q
 = 
DGEMM_Q
;

106 #i‡
CGEMM_Q
 =
cgemm_q


107 
BLASLONG
 
	gcgemm_q
 = 
DEFAULT_GEMM_Q
;

109 
BLASLONG
 
	gcgemm_q
 = 
CGEMM_Q
;

111 #i‡
ZGEMM_Q
 =
zgemm_q


112 
BLASLONG
 
	gzgemm_q
 = 
DEFAULT_GEMM_Q
;

114 
BLASLONG
 
	gzgemm_q
 = 
ZGEMM_Q
;

117 #i‡
SBGEMM_R
 =
sbgemm_r


118 
BLASLONG
 
	gsbgemm_r
 = 
DEFAULT_GEMM_R
;

120 
BLASLONG
 
	gsbgemm_r
 = 
SBGEMM_R
;

122 #i‡
SGEMM_R
 =
sgemm_r


123 
BLASLONG
 
	gsgemm_r
 = 
DEFAULT_GEMM_R
;

125 
BLASLONG
 
	gsgemm_r
 = 
SGEMM_R
;

127 #i‡
DGEMM_R
 =
dgemm_r


128 
BLASLONG
 
	gdgemm_r
 = 
DEFAULT_GEMM_R
;

130 
BLASLONG
 
	gdgemm_r
 = 
DGEMM_R
;

132 #i‡
CGEMM_R
 =
cgemm_r


133 
BLASLONG
 
	gcgemm_r
 = 
DEFAULT_GEMM_R
;

135 
BLASLONG
 
	gcgemm_r
 = 
CGEMM_R
;

137 #i‡
ZGEMM_R
 =
zgemm_r


138 
BLASLONG
 
	gzgemm_r
 = 
DEFAULT_GEMM_R
;

140 
BLASLONG
 
	gzgemm_r
 = 
ZGEMM_R
;

143 #i‡
deföed
(
EXPRECISION
Ë|| deföed(
QUAD_PRECISION
)

144 #i‡
QGEMM_P
 =
qgemm_p


145 
BLASLONG
 
	gqgemm_p
 = 
DEFAULT_GEMM_P
;

147 
BLASLONG
 
	gqgemm_p
 = 
QGEMM_P
;

149 #i‡
XGEMM_P
 =
xgemm_p


150 
BLASLONG
 
	gxgemm_p
 = 
DEFAULT_GEMM_P
;

152 
BLASLONG
 
	gxgemm_p
 = 
XGEMM_P
;

154 #i‡
QGEMM_Q
 =
qgemm_q


155 
BLASLONG
 
	gqgemm_q
 = 
DEFAULT_GEMM_Q
;

157 
BLASLONG
 
	gqgemm_q
 = 
QGEMM_Q
;

159 #i‡
XGEMM_Q
 =
xgemm_q


160 
BLASLONG
 
	gxgemm_q
 = 
DEFAULT_GEMM_Q
;

162 
BLASLONG
 
	gxgemm_q
 = 
XGEMM_Q
;

164 #i‡
QGEMM_R
 =
qgemm_r


165 
BLASLONG
 
	gqgemm_r
 = 
DEFAULT_GEMM_R
;

167 
BLASLONG
 
	gqgemm_r
 = 
QGEMM_R
;

169 #i‡
XGEMM_R
 =
xgemm_r


170 
BLASLONG
 
	gxgemm_r
 = 
DEFAULT_GEMM_R
;

172 
BLASLONG
 
	gxgemm_r
 = 
XGEMM_R
;

176 #i‡
deföed
(
ARCH_X86
Ë|| deföed(
ARCH_X86_64
)

178 
	$gë_L2_size
(){

180 
óx
, 
ebx
, 
ecx
, 
edx
;

182 #i‡
	`deföed
(
ATHLON
Ë|| deföed(
OPTERON
Ë|| deföed(
BARCELONA
Ë|| deföed(
BOBCAT
Ë|| deföed(
BULLDOZER
) || \

183 
	`deföed
(
CORE_PRESCOTT
Ë|| deföed(
CORE_CORE2
Ë|| deföed(
PENRYN
Ë|| deföed(
DUNNINGTON
) || \

184 
	`deföed
(
CORE_NEHALEM
Ë|| deföed(
CORE_SANDYBRIDGE
Ë|| deföed(
ATOM
Ë|| deföed(
GENERIC
) || \

185 
	`deföed
(
PILEDRIVER
Ë|| deföed(
HASWELL
Ë|| deföed(
STEAMROLLER
Ë|| deföed(
EXCAVATOR
) || \

186 
	`deföed
(
ZEN
Ë|| deföed(
SKYLAKEX
Ë|| deföed(
COOPERLAKE
)

188 
	`˝uid
(0x80000006, &
óx
, &
ebx
, &
ecx
, &
edx
);

190  
	`BITMASK
(
ecx
, 16, 0xffff);

194 
öfo
[15];

195 
i
;

197 
	`˝uid
(2, &
óx
, &
ebx
, &
ecx
, &
edx
);

199 
öfo
[ 0] = 
	`BITMASK
(
óx
, 8, 0xff);

200 
öfo
[ 1] = 
	`BITMASK
(
óx
, 16, 0xff);

201 
öfo
[ 2] = 
	`BITMASK
(
óx
, 24, 0xff);

203 
öfo
[ 3] = 
	`BITMASK
(
ebx
, 0, 0xff);

204 
öfo
[ 4] = 
	`BITMASK
(
ebx
, 8, 0xff);

205 
öfo
[ 5] = 
	`BITMASK
(
ebx
, 16, 0xff);

206 
öfo
[ 6] = 
	`BITMASK
(
ebx
, 24, 0xff);

208 
öfo
[ 7] = 
	`BITMASK
(
ecx
, 0, 0xff);

209 
öfo
[ 8] = 
	`BITMASK
(
ecx
, 8, 0xff);

210 
öfo
[ 9] = 
	`BITMASK
(
ecx
, 16, 0xff);

211 
öfo
[10] = 
	`BITMASK
(
ecx
, 24, 0xff);

213 
öfo
[11] = 
	`BITMASK
(
edx
, 0, 0xff);

214 
öfo
[12] = 
	`BITMASK
(
edx
, 8, 0xff);

215 
öfo
[13] = 
	`BITMASK
(
edx
, 16, 0xff);

216 
öfo
[14] = 
	`BITMASK
(
edx
, 24, 0xff);

218 
i
 = 0; i < 15; i++){

220 
öfo
[
i
]){

265 
	}
}

267 
	$bœs_£t_∑ømëî
(){

269 
Á˘‹
;

270 #i‡
	`deföed
(
BULLDOZER
Ë|| deföed(
PILEDRIVER
Ë|| deföed(
SANDYBRIDGE
Ë|| deföed(
NEHALEM
) || \

271 
	`deföed
(
HASWELL
Ë|| deföed(
STEAMROLLER
Ë|| deföed(
EXCAVATOR
Ë|| deföed(
ZEN
) || \

272 
	`deföed
(
SKYLAKEX
Ë|| deföed(
COOPERLAKE
)

273 
size
 = 16;

275 
size
 = 
	`gë_L2_size
();

278 #i‡
	`deföed
(
CORE_KATMAI
Ë|| deföed(
CORE_COPPERMINE
Ë|| deföed(
CORE_BANIAS
)

279 
size
 >>= 7;

281 #i‡
	`deföed
(
CORE_BANIAS
Ë&& (
HAVE_HIT
 > 1)

282 
sgemm_p
 = 64 / 
HAVE_HIT
 * 
size
;

283 
dgemm_p
 = 32 / 
HAVE_HIT
 * 
size
;

284 
cgemm_p
 = 32 / 
HAVE_HIT
 * 
size
;

285 
zgemm_p
 = 16 / 
HAVE_HIT
 * 
size
;

286 #ifde‡
EXPRECISION


287 
qgemm_p
 = 16 / 
HAVE_HIT
 * 
size
;

288 
xgemm_p
 = 8 / 
HAVE_HIT
 * 
size
;

290 #ifde‡
QUAD_PRECISION


291 
qgemm_p
 = 8 / 
HAVE_HIT
 * 
size
;

292 
xgemm_p
 = 4 / 
HAVE_HIT
 * 
size
;

295 
sgemm_p
 = 64 * 
size
;

296 
dgemm_p
 = 32 * 
size
;

297 
cgemm_p
 = 32 * 
size
;

298 
zgemm_p
 = 16 * 
size
;

299 #ifde‡
EXPRECISION


300 
qgemm_p
 = 16 * 
size
;

301 
xgemm_p
 = 8 * 
size
;

303 #ifde‡
QUAD_PRECISION


304 
qgemm_p
 = 8 * 
size
;

305 
xgemm_p
 = 4 * 
size
;

310 #i‡
	`deföed
(
CORE_NORTHWOOD
)

311 
size
 >>= 7;

313 #ifde‡
ALLOC_HUGETLB


314 
sgemm_p
 = 128 * 
size
;

315 
dgemm_p
 = 64 * 
size
;

316 
cgemm_p
 = 64 * 
size
;

317 
zgemm_p
 = 32 * 
size
;

318 #ifde‡
EXPRECISION


319 
qgemm_p
 = 32 * 
size
;

320 
xgemm_p
 = 16 * 
size
;

322 #ifde‡
QUAD_PRECISION


323 
qgemm_p
 = 16 * 
size
;

324 
xgemm_p
 = 8 * 
size
;

327 
sgemm_p
 = 96 * 
size
;

328 
dgemm_p
 = 48 * 
size
;

329 
cgemm_p
 = 48 * 
size
;

330 
zgemm_p
 = 24 * 
size
;

331 #ifde‡
EXPRECISION


332 
qgemm_p
 = 24 * 
size
;

333 
xgemm_p
 = 12 * 
size
;

335 #ifde‡
QUAD_PRECISION


336 
qgemm_p
 = 12 * 
size
;

337 
xgemm_p
 = 6 * 
size
;

342 #i‡
	`deföed
(
CORE_CORE2
)

344 
size
 >>= 9;

346 
sgemm_p
 = 92 * 
size
;

347 
dgemm_p
 = 46 * 
size
;

348 
cgemm_p
 = 46 * 
size
;

349 
zgemm_p
 = 23 * 
size
;

351 #ifde‡
EXPRECISION


352 
qgemm_p
 = 23 * 
size
;

353 
xgemm_p
 = 11 * 
size
;

355 #ifde‡
QUAD_PRECISION


356 
qgemm_p
 = 11 * 
size
;

357 
xgemm_p
 = 5 * 
size
;

361 #i‡
	`deföed
(
PENRYN
)

363 
size
 >>= 9;

365 
sgemm_p
 = 1024;

366 
dgemm_p
 = 512;

367 
cgemm_p
 = 512;

368 
zgemm_p
 = 256;

370 #ifde‡
EXPRECISION


371 
qgemm_p
 = 256;

372 
xgemm_p
 = 128;

374 #ifde‡
QUAD_PRECISION


375 
qgemm_p
 = 21 * 
size
 + 4;

376 
xgemm_p
 = 10 * 
size
 + 2;

380 #i‡
	`deföed
(
DUNNINGTON
)

382 
size
 >>= 9;

384 
sgemm_p
 = 384;

385 
dgemm_p
 = 384;

386 
cgemm_p
 = 384;

387 
zgemm_p
 = 384;

389 #ifde‡
EXPRECISION


390 
qgemm_p
 = 384;

391 
xgemm_p
 = 384;

393 #ifde‡
QUAD_PRECISION


394 
qgemm_p
 = 21 * 
size
 + 4;

395 
xgemm_p
 = 10 * 
size
 + 2;

399 #i‡
	`deföed
(
NEHALEM
)

400 
sgemm_p
 = 1024;

401 
dgemm_p
 = 512;

402 
cgemm_p
 = 512;

403 
zgemm_p
 = 256;

404 #ifde‡
EXPRECISION


405 
qgemm_p
 = 256;

406 
xgemm_p
 = 128;

410 #i‡
	`deföed
(
SANDYBRIDGE
)

411 
sgemm_p
 = 1024;

412 
dgemm_p
 = 512;

413 
cgemm_p
 = 512;

414 
zgemm_p
 = 256;

415 #ifde‡
EXPRECISION


416 
qgemm_p
 = 256;

417 
xgemm_p
 = 128;

421 #i‡
	`deföed
(
CORE_PRESCOTT
Ë|| deföed(
GENERIC
)

422 
size
 >>= 6;

424 i‡(
size
 > 16) size = 16;

426 
sgemm_p
 = 56 * 
size
;

427 
dgemm_p
 = 28 * 
size
;

428 
cgemm_p
 = 28 * 
size
;

429 
zgemm_p
 = 14 * 
size
;

430 #ifde‡
EXPRECISION


431 
qgemm_p
 = 14 * 
size
;

432 
xgemm_p
 = 7 * 
size
;

434 #ifde‡
QUAD_PRECISION


435 
qgemm_p
 = 7 * 
size
;

436 
xgemm_p
 = 3 * 
size
;

440 #i‡
	`deföed
(
CORE_OPTERON
)

441 
sgemm_p
 = 224 + 14 * (
size
 >> 5);

442 
dgemm_p
 = 112 + 14 * (
size
 >> 6);

443 
cgemm_p
 = 116 + 14 * (
size
 >> 6);

444 
zgemm_p
 = 58 + 14 * (
size
 >> 7);

445 #ifde‡
EXPRECISION


446 
qgemm_p
 = 58 + 14 * (
size
 >> 7);

447 
xgemm_p
 = 29 + 14 * (
size
 >> 8);

449 #ifde‡
QUAD_PRECISION


450 
qgemm_p
 = 29 + 14 * (
size
 >> 8);

451 
xgemm_p
 = 15 + 14 * (
size
 >> 9);

455 #i‡
	`deföed
(
ATOM
)

456 
size
 >>= 8;

458 
sgemm_p
 = 256;

459 
dgemm_p
 = 128;

460 
cgemm_p
 = 128;

461 
zgemm_p
 = 64;

462 #ifde‡
EXPRECISION


463 
qgemm_p
 = 64;

464 
xgemm_p
 = 32;

466 #ifde‡
QUAD_PRECISION


467 
qgemm_p
 = 32;

468 
xgemm_p
 = 16;

472 #i‡
	`deföed
(
CORE_BARCELONA
Ë|| deföed(
CORE_BOBCAT
)

473 
size
 >>= 8;

475 
sgemm_p
 = 232 * 
size
;

476 
dgemm_p
 = 116 * 
size
;

477 
cgemm_p
 = 116 * 
size
;

478 
zgemm_p
 = 58 * 
size
;

479 #ifde‡
EXPRECISION


480 
qgemm_p
 = 58 * 
size
;

481 
xgemm_p
 = 26 * 
size
;

483 #ifde‡
QUAD_PRECISION


484 
qgemm_p
 = 26 * 
size
;

485 
xgemm_p
 = 13 * 
size
;

489 
Á˘‹
=
	`›íbœs_block_Á˘‹
();

490 i‡(
Á˘‹
>0) {

491 i‡(
Á˘‹
 < 10) factor = 10;

492 i‡(
Á˘‹
 > 200) factor = 200;

494 
sgemm_p
 = (()(()sgemm_∞* ()
Á˘‹
 * 1.e-2)) & ~7L;

495 
dgemm_p
 = (()(()dgemm_∞* ()
Á˘‹
 * 1.e-2)) & ~7L;

496 
cgemm_p
 = (()(()cgemm_∞* ()
Á˘‹
 * 1.e-2)) & ~7L;

497 
zgemm_p
 = (()(()zgemm_∞* ()
Á˘‹
 * 1.e-2)) & ~7L;

498 #ifde‡
EXPRECISION


499 
qgemm_p
 = (()(()qgemm_∞* ()
Á˘‹
 * 1.e-2)) & ~7L;

500 
xgemm_p
 = (()(()xgemm_∞* ()
Á˘‹
 * 1.e-2)) & ~7L;

504 i‡(
sgemm_p
 == 0) sgemm_p = 64;

505 i‡(
dgemm_p
 == 0) dgemm_p = 64;

506 i‡(
cgemm_p
 == 0) cgemm_p = 64;

507 i‡(
zgemm_p
 == 0) zgemm_p = 64;

508 #ifde‡
EXPRECISION


509 i‡(
qgemm_p
 == 0) qgemm_p = 64;

510 i‡(
xgemm_p
 == 0) xgemm_p = 64;

513 #ifde‡
QUAD_PRECISION


514 i‡(
qgemm_p
 == 0) qgemm_p = 64;

515 i‡(
xgemm_p
 == 0) xgemm_p = 64;

518 
sgemm_p
 = ((sgemm_∞+ 
SGEMM_UNROLL_M
 - 1)/SGEMM_UNROLL_M) * SGEMM_UNROLL_M;

519 
dgemm_p
 = ((dgemm_∞+ 
DGEMM_UNROLL_M
 - 1)/DGEMM_UNROLL_M) * DGEMM_UNROLL_M;

520 
cgemm_p
 = ((cgemm_∞+ 
CGEMM_UNROLL_M
 - 1)/CGEMM_UNROLL_M) * CGEMM_UNROLL_M;

521 
zgemm_p
 = ((zgemm_∞+ 
ZGEMM_UNROLL_M
 - 1)/ZGEMM_UNROLL_M) * ZGEMM_UNROLL_M;

522 #ifde‡
QUAD_PRECISION


523 
qgemm_p
 = ((qgemm_∞+ 
QGEMM_UNROLL_M
 - 1)/QGEMM_UNROLL_M) * QGEMM_UNROLL_M;

524 
xgemm_p
 = ((xgemm_∞+ 
XGEMM_UNROLL_M
 - 1)/XGEMM_UNROLL_M) * XGEMM_UNROLL_M;

527 
sgemm_r
 = (((
BUFFER_SIZE
 - ((
SGEMM_P
 * 
SGEMM_Q
 * 4 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (SGEMM_Q * 4)) - 15) & ~15;

528 
dgemm_r
 = (((
BUFFER_SIZE
 - ((
DGEMM_P
 * 
DGEMM_Q
 * 8 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (DGEMM_Q * 8)) - 15) & ~15;

529 
cgemm_r
 = (((
BUFFER_SIZE
 - ((
CGEMM_P
 * 
CGEMM_Q
 * 8 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (CGEMM_Q * 8)) - 15) & ~15;

530 
zgemm_r
 = (((
BUFFER_SIZE
 - ((
ZGEMM_P
 * 
ZGEMM_Q
 * 16 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (ZGEMM_Q * 16)) - 15) & ~15;

531 #i‡
	`deföed
(
EXPRECISION
Ë|| deföed(
QUAD_PRECISION
)

532 
qgemm_r
 = (((
BUFFER_SIZE
 - ((
QGEMM_P
 * 
QGEMM_Q
 * 16 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (QGEMM_Q * 16)) - 15) & ~15;

533 
xgemm_r
 = (((
BUFFER_SIZE
 - ((
XGEMM_P
 * 
XGEMM_Q
 * 32 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (XGEMM_Q * 32)) - 15) & ~15;

537 
	`Ârötf
(
°dîr
, "SGEMM ... %3d, %3d, %3d\n", 
SGEMM_P
, 
SGEMM_Q
, 
SGEMM_R
);

538 
	`Ârötf
(
°dîr
, "DGEMM ... %3d, %3d, %3d\n", 
DGEMM_P
, 
DGEMM_Q
, 
DGEMM_R
);

539 
	`Ârötf
(
°dîr
, "CGEMM ... %3d, %3d, %3d\n", 
CGEMM_P
, 
CGEMM_Q
, 
CGEMM_R
);

540 
	`Ârötf
(
°dîr
, "ZGEMM ... %3d, %3d, %3d\n", 
ZGEMM_P
, 
ZGEMM_Q
, 
ZGEMM_R
);

544 
	}
}

548 
	$gë_cuºít_˝u_öfo
(){

550 
∆¥ocs
, 
nc‹es
, 
cm∂egacy
;

551 
hâ
 = 0;

552 
≠icid
 = 0;

554 #i‡
	`deföed
(
CORE_PRESCOTT
Ë|| deföed(
CORE_OPTERON
)

555 
óx
, 
ebx
, 
ecx
, 
edx
;

557 
	`˝uid
(1, &
óx
, &
ebx
, &
ecx
, &
edx
);

558 
∆¥ocs
 = 
	`BITMASK
(
ebx
, 16, 0xff);

559 
≠icid
 = 
	`BITMASK
(
ebx
, 24, 0xff);

560 
hâ
 = 
	`BITMASK
(
edx
, 28, 0x01);

563 #i‡
	`deföed
(
CORE_PRESCOTT
)

564 
	`˝uid
(4, &
óx
, &
ebx
, &
ecx
, &
edx
);

565 
nc‹es
 = 
	`BITMASK
(
óx
, 26, 0x3f);

567 i‡(
hâ
 =0Ë
∆¥ocs
 = 0;

570 #i‡
	`deföed
(
CORE_OPTERON
)

571 
	`˝uid
(0x80000008, &
óx
, &
ebx
, &
ecx
, &
edx
);

572 
nc‹es
 = 
	`BITMASK
(
ecx
, 0, 0xff);

574 
	`˝uid
(0x80000001, &
óx
, &
ebx
, &
ecx
, &
edx
);

575 
cm∂egacy
 = 
	`BITMASK
(
ecx
, 1, 0x01);

577 i‡(
hâ
 == 0) {

578 
∆¥ocs
 = 0;

579 
nc‹es
 = 0;

580 
cm∂egacy
 = 0;

584 
nc‹es
 ++;

586 
	`Ârötf
(
°dîr
, "APICID = %d Numbî o‡c‹ê%d\n", 
≠icid
, 
nc‹es
);

589 
	}
}

594 #i‡
deföed
(
ARCH_IA64
)

596 
ölöe
 
BLASULONG
 
	$˝uid
(
BLASULONG
 
ªgnum
){

597 
BLASULONG
 
vÆue
;

599 #i‚de‡
__ECC


600 
	`asm
 ("mov %0=˝uid[%r1]" : "Ù"(
vÆue
Ë: "rO"(
ªgnum
));

602 
vÆue
 = 
	`__gëIndReg
(
_IA64_REG_INDR_CPUID
, 
ªgnum
);

605  
vÆue
;

606 
	}
}

610 
	$bœs_£t_∑ømëî
(){

612 
BLASULONG
 
˝uid3
, 
size
;

614 
˝uid3
 = 
	`˝uid
(3);

616 
size
 = 
	`BITMASK
(
˝uid3
, 16, 0xff);

618 
sbgemm_p
 = 192 * (
size
 + 1);

619 
sgemm_p
 = 192 * (
size
 + 1);

620 
dgemm_p
 = 96 * (
size
 + 1);

621 
cgemm_p
 = 96 * (
size
 + 1);

622 
zgemm_p
 = 48 * (
size
 + 1);

623 #ifde‡
EXPRECISION


624 
qgemm_p
 = 64 * (
size
 + 1);

625 
xgemm_p
 = 32 * (
size
 + 1);

627 #ifde‡
QUAD_PRECISION


628 
qgemm_p
 = 32 * (
size
 + 1);

629 
xgemm_p
 = 16 * (
size
 + 1);

632 
sbgemm_r
 = (((
BUFFER_SIZE
 - ((
SBGEMM_P
 * 
SBGEMM_Q
 * 4 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (SBGEMM_Q * 4)) - 15) & ~15;

633 
sgemm_r
 = (((
BUFFER_SIZE
 - ((
SGEMM_P
 * 
SGEMM_Q
 * 4 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (SGEMM_Q * 4)) - 15) & ~15;

634 
dgemm_r
 = (((
BUFFER_SIZE
 - ((
DGEMM_P
 * 
DGEMM_Q
 * 8 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (DGEMM_Q * 8)) - 15) & ~15;

635 
cgemm_r
 = (((
BUFFER_SIZE
 - ((
CGEMM_P
 * 
CGEMM_Q
 * 8 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (CGEMM_Q * 8)) - 15) & ~15;

636 
zgemm_r
 = (((
BUFFER_SIZE
 - ((
ZGEMM_P
 * 
ZGEMM_Q
 * 16 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (ZGEMM_Q * 16)) - 15) & ~15;

637 #i‡
	`deföed
(
EXPRECISION
Ë|| deföed(
QUAD_PRECISION
)

638 
qgemm_r
 = (((
BUFFER_SIZE
 - ((
QGEMM_P
 * 
QGEMM_Q
 * 16 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (QGEMM_Q * 16)) - 15) & ~15;

639 
xgemm_r
 = (((
BUFFER_SIZE
 - ((
XGEMM_P
 * 
XGEMM_Q
 * 32 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (XGEMM_Q * 32)) - 15) & ~15;

643 
	}
}

647 
	#IA64_SYS_NAME
 "/sys/devi˚s/sy°em/˝u/˝u0/ˇche/ödex3/size"

	)

648 
	#IA64_PROC_NAME
 "/¥oc/∑l/˝u0/ˇche_öfo"

	)

650 
	$bœs_£t_∑ømëî
(){

652 
BLASULONG
 
˝uid3
;

653 
size
 = 0;

656 
buf„r
[128];

657 
FILE
 *
öfûe
;

659 i‡((
öfûe
 = 
	`f›í
(
IA64_SYS_NAME
, "r")Ë!
NULL
) {

661 
	`fgës
(
buf„r
, (buf„r), 
öfûe
);

662 
	`f˛o£
(
öfûe
);

664 
size
 = 
	`©oi
(
buf„r
) / 1536;

667 i‡(
size
 <= 0) {

668 i‡((
öfûe
 = 
	`f›í
(
IA64_PROC_NAME
, "r")Ë!
NULL
) {

670 
	`fgës
(
buf„r
, (buf„r), 
öfûe
Ë!
NULL
) {

671 i‡((!
	`°∫cmp
("D©a/In°ru˘i⁄ CachêÀvñ 3", 
buf„r
, 30))) ;

674 
	`fgës
(
buf„r
, (buf„r), 
öfûe
);

676 
	`f˛o£
(
öfûe
);

678 *
	`°r°r
(
buf„r
, "byãs"Ë()
NULL
;

680 
size
 = 
	`©oi
(
	`°rchr
(
buf„r
, ':') + 1) / 1572864;

687 i‡(
size
 <= 0) {

688 
˝uid3
 = 
	`˝uid
(3);

690 
size
 = 
	`BITMASK
(
˝uid3
, 16, 0xff) + 1;

693 
sgemm_p
 = 320 * 
size
;

694 
dgemm_p
 = 160 * 
size
;

695 
cgemm_p
 = 160 * 
size
;

696 
zgemm_p
 = 80 * 
size
;

697 #ifde‡
EXPRECISION


698 
qgemm_p
 = 80 * 
size
;

699 
xgemm_p
 = 40 * 
size
;

702 
sgemm_r
 = (((
BUFFER_SIZE
 - ((
SGEMM_P
 * 
SGEMM_Q
 * 4 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (SGEMM_Q * 4)) - 15) & ~15;

703 
dgemm_r
 = (((
BUFFER_SIZE
 - ((
DGEMM_P
 * 
DGEMM_Q
 * 8 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (DGEMM_Q * 8)) - 15) & ~15;

704 
cgemm_r
 = (((
BUFFER_SIZE
 - ((
CGEMM_P
 * 
CGEMM_Q
 * 8 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (CGEMM_Q * 8)) - 15) & ~15;

705 
zgemm_r
 = (((
BUFFER_SIZE
 - ((
ZGEMM_P
 * 
ZGEMM_Q
 * 16 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (ZGEMM_Q * 16)) - 15) & ~15;

706 #ifde‡
EXPRECISION


707 
qgemm_r
 = (((
BUFFER_SIZE
 - ((
QGEMM_P
 * 
QGEMM_Q
 * 16 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (QGEMM_Q * 16)) - 15) & ~15;

708 
xgemm_r
 = (((
BUFFER_SIZE
 - ((
XGEMM_P
 * 
XGEMM_Q
 * 32 + 
GEMM_OFFSET_A
 + 
GEMM_ALIGN
) & ~GEMM_ALIGN)) / (XGEMM_Q * 32)) - 15) & ~15;

712 
	}
}

718 #i‡
deföed
(
ARCH_MIPS64
)

719 
	$bœs_£t_∑ømëî
(){

720 #i‡
	`deföed
(
LOONGSON3R3
Ë|| deföed(
LOONGSON3R4
)

721 #ifde‡
SMP


722 if(
bœs_num_thªads
 == 1){

725 
dgemm_r
 = 1024;

726 #ifde‡
SMP


729 
dgemm_r
 = 200;

734 
	}
}

737 #i‡
deföed
(
ARCH_ARM64
)

739 
	$bœs_£t_∑ømëî
()

741 
	}
}

	@profile.c

39 
	~"comm⁄.h
"

40 
	~<sig«l.h
>

41 
	~<°rögs.h
>

42 
	#USE_FUNCTABLE


	)

43 
	~"../../öãrÁ˚/fun˘abÀ.h
"

45 
func_¥ofûe_t
 
	gfun˘i⁄_¥ofûe_èbÀ
[
MAX_PROF_TABLE
];

47 
	ggŸobœs_¥ofûe
 = 1;

49 
siga˘i⁄
 
	gß
, 
	gig
;

51 
	$gŸobœs_¥ofûe_quô
() {

53 
i
;

54 
ˇŒs
, 
f›s
, 
cy˛es
, 
tcy˛es
, 
¨ó
;

56 
	`siga˘i⁄
(
SIGPROF
, &
ig
, 
NULL
);

58 
ˇŒs
 = 0;

59 
f›s
 = 0;

60 
cy˛es
 = 0;

61 
tcy˛es
 = 0;

62 
¨ó
 = 0;

64 
i
 = 0; i < 
MAX_PROF_TABLE
; i ++) {

65 i‡(
fun˘i⁄_¥ofûe_èbÀ
[
i
].
ˇŒs
) {

66 
ˇŒs
 +
fun˘i⁄_¥ofûe_èbÀ
[
i
].calls;

67 
cy˛es
 +
fun˘i⁄_¥ofûe_èbÀ
[
i
].cycles;

68 
tcy˛es
 +
fun˘i⁄_¥ofûe_èbÀ
[
i
].tcycles;

69 
¨ó
 +
fun˘i⁄_¥ofûe_èbÀ
[
i
].area;

70 
f›s
 +
fun˘i⁄_¥ofûe_èbÀ
[
i
].fops;

74 i‡(
cy˛es
 > 0) {

76 
	`Ârötf
(
°dîr
, "\n\t====== BLAS Profiling Result =======\n\n");

77 
	`Ârötf
(
°dîr
, " Function No. of Calls Time Consumption Efficiency Bytes/cycle Wall Time(Cycles)\n");

79 
i
 = 0; i < 
MAX_PROF_TABLE
; i ++) {

80 i‡(
fun˘i⁄_¥ofûe_èbÀ
[
i
].
ˇŒs
) {

81 #i‚de‡
OS_WINDOWS


82 
	`Ârötf
(
°dîr
, "%-12s : %10Ld %8.2f%% %10.3f%% %8.2f %Ld\n",

84 
	`Ârötf
(
°dîr
, "%-12s : %10lld %8.2f%% %10.3f%% %8.2f %lld\n",

86 
func_èbÀ
[
i
],

87 
fun˘i⁄_¥ofûe_èbÀ
[
i
].
ˇŒs
,

88 ()
fun˘i⁄_¥ofûe_èbÀ
[
i
].
cy˛es
 / ()cycles * 100.,

89 ()
fun˘i⁄_¥ofûe_èbÀ
[
i
].
f›s
 / ()fun˘i⁄_¥ofûe_èbÀ[i].
tcy˛es
 * 100.,

90 ()
fun˘i⁄_¥ofûe_èbÀ
[
i
].
¨ó
 / ()fun˘i⁄_¥ofûe_èbÀ[i].
cy˛es
,

91 
fun˘i⁄_¥ofûe_èbÀ
[
i
].
cy˛es


96 
	`Ârötf
(
°dîr
, " --------------------------------------------------------------------\n");

98 #i‚de‡
OS_WINDOWS


99 
	`Ârötf
(
°dîr
, "%-12s : %10Ld %10.3f%% %8.2f\n",

101 
	`Ârötf
(
°dîr
, "%-12s : %10lld %10.3f%% %8.2f\n",

104 
ˇŒs
,

105 ()
f›s
 / ()
tcy˛es
 * 100.,

106 ()
¨ó
 / ()
cy˛es
);

109 
	`siga˘i⁄
(
SIGPROF
, &
ß
, 
NULL
);

110 
	}
}

112 
	$gŸobœs_¥ofûe_˛ór
() {

114 
i
;

116 
i
 = 0; i < 
MAX_PROF_TABLE
; i ++) {

117 
fun˘i⁄_¥ofûe_èbÀ
[
i
].
ˇŒs
 = 0;

118 
fun˘i⁄_¥ofûe_èbÀ
[
i
].
cy˛es
 = 0;

119 
fun˘i⁄_¥ofûe_èbÀ
[
i
].
tcy˛es
 = 0;

120 
fun˘i⁄_¥ofûe_èbÀ
[
i
].
¨ó
 = 0;

121 
fun˘i⁄_¥ofûe_èbÀ
[
i
].
f›s
 = 0;

124 
	}
}

126 
	$gŸobœs_¥ofûe_öô
() {

128 
	`gŸobœs_¥ofûe_˛ór
();

130 
	`bzîo
(&
ß
, (
siga˘i⁄
));

131 
ß
.
ß_h™dÀr
 = (*)
gŸobœs_¥ofûe_quô
;

132 
ß
.
ß_Êags
 = 
SA_NODEFER
 | 
SA_RESETHAND
;

134 
	`bzîo
(&
ig
, (
siga˘i⁄
));

135 
ig
.
ß_h™dÀr
 = 
SIG_IGN
;

136 
ig
.
ß_Êags
 |
SA_NODEFER
 | 
SA_RESETHAND
;

138 
	`siga˘i⁄
(
SIGPROF
, &
ß
, 
NULL
);

140 
	}
}

	@xerbla.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~"comm⁄.h
"

43 #i‡
deföed
(
OS_WINDOWS
Ë&& (deföed(
__MINGW32__
Ë|| deföed(
__MINGW64__
))

44 
	~<c⁄io.h
>

45 #unde‡
¥ötf


46 
	#¥ötf
 
_˝rötf


	)

49 #ifde‡
INTERFACE64


50 
	#MSGFMT
 " ** O¿íåyÅÿ%6†∑ømëîÇumbî %2ld hadá¿ûÀgÆ vÆue\n"

	)

52 
	#MSGFMT
 " ** O¿íåyÅÿ%6†∑ømëîÇumbî %2d hadá¿ûÀgÆ vÆue\n"

	)

55 #ifde‡
__ELF__


56 
	$__xîbœ
(*
mesßge
, 
bœsöt
 *
öfo
, bœsöà
Àngth
){

58 
	`¥ötf
(
MSGFMT
,

59 
mesßge
, *
öfo
);

62 
	}
}

64 
	$BLASFUNC
(
xîbœ
)(*, 
bœsöt
 *, bœsötË
	`__©åibuã__
 ((
wók
, 
	`Æüs
 ("__xerbla")));

68 
	$BLASFUNC
(
xîbœ
)(*
mesßge
, 
bœsöt
 *
öfo
, bœsöà
Àngth
){

70 
	`¥ötf
(
MSGFMT
,

71 
mesßge
, *
öfo
);

74 
	}
}

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

50 #i‚de‡
__îr‹_t_deföed


51 
	#__îr‹_t_deföed
 1

	)

52 
	tîr‹_t
;

57 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

148 #ifde‡
__USE_ATFILE


149 
	#AT_FDCWD
 -100

	)

152 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

153 
	#AT_REMOVEDIR
 0x200

	)

155 
	#AT_SYMLINK_FOLLOW
 0x400

	)

156 #ifde‡
__USE_GNU


157 
	#AT_NO_AUTOMOUNT
 0x800

	)

159 
	#AT_EMPTY_PATH
 0x1000

	)

161 
	#AT_EACCESS
 0x200

	)

170 
f˙é
 (
__fd
, 
__cmd
, ...);

179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

182 #ifde‡
__REDIRECT


183 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

184 
	`__n⁄nuŒ
 ((1));

186 
	#›í
 
›í64


	)

189 #ifde‡
__USE_LARGEFILE64


190 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

193 #ifde‡
__USE_ATFILE


203 #i‚de‡
__USE_FILE_OFFSET64


204 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

205 
	`__n⁄nuŒ
 ((2));

207 #ifde‡
__REDIRECT


208 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

209 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

211 
	#›í©
 
›í©64


	)

214 #ifde‡
__USE_LARGEFILE64


215 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

216 
	`__n⁄nuŒ
 ((2));

225 #i‚de‡
__USE_FILE_OFFSET64


226 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__REDIRECT


229 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

230 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

232 
	#¸ót
 
¸ót64


	)

235 #ifde‡
__USE_LARGEFILE64


236 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

239 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

240 && !
deföed
 
__USE_POSIX
))

249 
	#F_ULOCK
 0

	)

250 
	#F_LOCK
 1

	)

251 
	#F_TLOCK
 2

	)

252 
	#F_TEST
 3

	)

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

257 #ifde‡
__REDIRECT


258 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

260 
	#lockf
 
lockf64


	)

263 #ifde‡
__USE_LARGEFILE64


264 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

268 #ifde‡
__USE_XOPEN2K


271 #i‚de‡
__USE_FILE_OFFSET64


272 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

273 
__advi£
Ë
__THROW
;

275 #ifde‡
__REDIRECT_NTH


276 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

277 
__off64_t
 
__Àn
, 
__advi£
),

278 
posix_Ádvi£64
);

280 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

283 #ifde‡
__USE_LARGEFILE64


284 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

285 
__advi£
Ë
__THROW
;

293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

296 #ifde‡
__REDIRECT


297 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

298 
__off64_t
 
__Àn
),

299 
posix_ÁŒoˇã64
);

301 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

304 #ifde‡
__USE_LARGEFILE64


305 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

311 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

312 && 
deföed
 
__va_¨g_∑ck_Àn


313 
	~<bôs/f˙é2.h
>

316 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

118 #unde‡
__USE_ISOC11


119 #unde‡
__USE_ISOC99


120 #unde‡
__USE_ISOC95


121 #unde‡
__USE_ISOCXX11


122 #unde‡
__USE_POSIX


123 #unde‡
__USE_POSIX2


124 #unde‡
__USE_POSIX199309


125 #unde‡
__USE_POSIX199506


126 #unde‡
__USE_XOPEN


127 #unde‡
__USE_XOPEN_EXTENDED


128 #unde‡
__USE_UNIX98


129 #unde‡
__USE_XOPEN2K


130 #unde‡
__USE_XOPEN2KXSI


131 #unde‡
__USE_XOPEN2K8


132 #unde‡
__USE_XOPEN2K8XSI


133 #unde‡
__USE_LARGEFILE


134 #unde‡
__USE_LARGEFILE64


135 #unde‡
__USE_FILE_OFFSET64


136 #unde‡
__USE_MISC


137 #unde‡
__USE_ATFILE


138 #unde‡
__USE_GNU


139 #unde‡
__USE_FORTIFY_LEVEL


140 #unde‡
__KERNEL_STRICT_NAMES


141 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #i‚de‡
_LOOSE_KERNEL_NAMES


146 
	#__KERNEL_STRICT_NAMES


	)

156 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


157 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

158 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

160 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

167 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


168 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

169 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

175 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

181 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

182 && !
deföed
 
	g_DEFAULT_SOURCE


184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #ifde‡
_GNU_SOURCE


190 #unde‡
_ISOC95_SOURCE


191 
	#_ISOC95_SOURCE
 1

	)

192 #unde‡
_ISOC99_SOURCE


193 
	#_ISOC99_SOURCE
 1

	)

194 #unde‡
_ISOC11_SOURCE


195 
	#_ISOC11_SOURCE
 1

	)

196 #unde‡
_POSIX_SOURCE


197 
	#_POSIX_SOURCE
 1

	)

198 #unde‡
_POSIX_C_SOURCE


199 
	#_POSIX_C_SOURCE
 200809L

	)

200 #unde‡
_XOPEN_SOURCE


201 
	#_XOPEN_SOURCE
 700

	)

202 #unde‡
_XOPEN_SOURCE_EXTENDED


203 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

204 #unde‡
_LARGEFILE64_SOURCE


205 
	#_LARGEFILE64_SOURCE
 1

	)

206 #unde‡
_DEFAULT_SOURCE


207 
	#_DEFAULT_SOURCE
 1

	)

208 #unde‡
_ATFILE_SOURCE


209 
	#_ATFILE_SOURCE
 1

	)

214 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

215 || (!
deföed
 
	g__STRICT_ANSI__
 \

216 && !
deföed
 
	g_ISOC99_SOURCE
 \

217 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

218 && !
deföed
 
	g_XOPEN_SOURCE
))

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

224 #i‡(
deföed
 
_ISOC11_SOURCE
 \

225 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

226 
	#__USE_ISOC11
 1

	)

230 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

231 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

232 
	#__USE_ISOC99
 1

	)

236 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

237 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

238 
	#__USE_ISOC95
 1

	)

245 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

246 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

247 
	#__USE_ISOCXX11
 1

	)

253 #ifde‡
_DEFAULT_SOURCE


254 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


255 
	#__USE_POSIX_IMPLICITLY
 1

	)

257 #unde‡
_POSIX_SOURCE


258 
	#_POSIX_SOURCE
 1

	)

259 #unde‡
_POSIX_C_SOURCE


260 
	#_POSIX_C_SOURCE
 200809L

	)

263 #i‡((!
deföed
 
__STRICT_ANSI__
 \

264 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

265 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

266 
	#_POSIX_SOURCE
 1

	)

267 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

268 
	#_POSIX_C_SOURCE
 2

	)

269 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

270 
	#_POSIX_C_SOURCE
 199506L

	)

271 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

272 
	#_POSIX_C_SOURCE
 200112L

	)

274 
	#_POSIX_C_SOURCE
 200809L

	)

276 
	#__USE_POSIX_IMPLICITLY
 1

	)

285 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

286 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

287 
	#_POSIX_SOURCE
 1

	)

288 #unde‡
_POSIX_C_SOURCE


289 
	#_POSIX_C_SOURCE
 199506L

	)

292 #i‡(
deföed
 
_POSIX_SOURCE
 \

293 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

294 || 
deföed
 
_XOPEN_SOURCE
)

295 
	#__USE_POSIX
 1

	)

298 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


299 
	#__USE_POSIX2
 1

	)

302 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

303 
	#__USE_POSIX199309
 1

	)

306 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

307 
	#__USE_POSIX199506
 1

	)

310 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

311 
	#__USE_XOPEN2K
 1

	)

312 #unde‡
__USE_ISOC95


313 
	#__USE_ISOC95
 1

	)

314 #unde‡
__USE_ISOC99


315 
	#__USE_ISOC99
 1

	)

318 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

319 
	#__USE_XOPEN2K8
 1

	)

320 #unde‡
_ATFILE_SOURCE


321 
	#_ATFILE_SOURCE
 1

	)

324 #ifdef 
_XOPEN_SOURCE


325 
	#__USE_XOPEN
 1

	)

326 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

327 
	#__USE_XOPEN_EXTENDED
 1

	)

328 
	#__USE_UNIX98
 1

	)

329 #unde‡
_LARGEFILE_SOURCE


330 
	#_LARGEFILE_SOURCE
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

332 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

333 
	#__USE_XOPEN2K8
 1

	)

334 
	#__USE_XOPEN2K8XSI
 1

	)

336 
	#__USE_XOPEN2K
 1

	)

337 
	#__USE_XOPEN2KXSI
 1

	)

338 #unde‡
__USE_ISOC95


339 
	#__USE_ISOC95
 1

	)

340 #unde‡
__USE_ISOC99


341 
	#__USE_ISOC99
 1

	)

344 #ifde‡
_XOPEN_SOURCE_EXTENDED


345 
	#__USE_XOPEN_EXTENDED
 1

	)

350 #ifde‡
_LARGEFILE_SOURCE


351 
	#__USE_LARGEFILE
 1

	)

354 #ifde‡
_LARGEFILE64_SOURCE


355 
	#__USE_LARGEFILE64
 1

	)

358 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

359 
	#__USE_FILE_OFFSET64
 1

	)

362 #i‡
deföed
 
_DEFAULT_SOURCE


363 
	#__USE_MISC
 1

	)

366 #ifdef 
_ATFILE_SOURCE


367 
	#__USE_ATFILE
 1

	)

370 #ifdef 
_GNU_SOURCE


371 
	#__USE_GNU
 1

	)

374 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

375 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

376 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

377 #ñi‡!
__GNUC_PREREQ
 (4, 1)

378 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


379 #ñi‡
_FORTIFY_SOURCE
 > 1

380 
	#__USE_FORTIFY_LEVEL
 2

	)

382 
	#__USE_FORTIFY_LEVEL
 1

	)

385 #i‚de‡
__USE_FORTIFY_LEVEL


386 
	#__USE_FORTIFY_LEVEL
 0

	)

393 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


394 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

396 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

401 
	~<°dc-¥edef.h
>

409 #unde‡
__GNU_LIBRARY__


410 
	#__GNU_LIBRARY__
 6

	)

414 
	#__GLIBC__
 2

	)

415 
	#__GLIBC_MINOR__
 26

	)

417 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

418 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

421 #i‚de‡
__ASSEMBLER__


422 #i‚de‡
_SYS_CDEFS_H


423 
	~<sys/cdefs.h
>

428 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


429 
	#__USE_LARGEFILE
 1

	)

430 
	#__USE_LARGEFILE64
 1

	)

436 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

437 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

438 && 
deföed
 
	g__exã∫_ölöe


439 
	#__USE_EXTERN_INLINES
 1

	)

447 
	~<gnu/°ubs.h
>

	@/usr/include/linux/unistd.h

2 #i‚de‡
_LINUX_UNISTD_H_


3 
	#_LINUX_UNISTD_H_


	)

8 
	~<asm/uni°d.h
>

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_POSIX199309


62 
	~<bôs/ty≥s/sigevít_t.h
>

63 
	~<bôs/sigevít-c⁄°s.h
>

68 (*
	t__sigh™dÀr_t
) ();

73 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

74 
__THROW
;

75 #ifde‡
__USE_GNU


76 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

77 
__THROW
;

83 #ifde‡
__USE_MISC


84 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

85 
__THROW
;

88 #ifde‡
__REDIRECT_NTH


89 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

90 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

91 
__sysv_sig«l
);

93 
	#sig«l
 
__sysv_sig«l


	)

97 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


100 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

101 
__THROW
;

107 #ifde‡
__USE_POSIX


108 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

111 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


115 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

119 
	$øi£
 (
__sig
Ë
__THROW
;

121 #ifde‡
__USE_MISC


123 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

124 
__THROW
;

125 
	$gsig«l
 (
__sig
Ë
__THROW
;

128 #ifde‡
__USE_XOPEN2K8


130 
	`psig«l
 (
__sig
, c⁄° *
__s
);

133 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

145 #ifde‡
__USE_XOPEN_EXTENDED


146 #ifde‡
__GNUC__


147 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

149 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

151 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

156 #ifde‡
__USE_MISC


163 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

166 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

169 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

172 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 #ifde‡
__USE_MISC


177 
	#NSIG
 
_NSIG


	)

180 #ifde‡
__USE_GNU


181 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

185 #ifde‡
__USE_MISC


186 
__sigh™dÀr_t
 
	tsig_t
;

189 #ifde‡
__USE_POSIX


192 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

195 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

198 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

201 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

205 
__THROW
 
	`__n⁄nuŒ
 ((1));

207 #ifde‡
__USE_GNU


209 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

213 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

216 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

222 
	~<bôs/siga˘i⁄.h
>

225 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

226 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

233 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

236 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

237 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

240 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__USE_POSIX199506


248 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

249 
	`__n⁄nuŒ
 ((1, 2));

252 #ifde‡
__USE_POSIX199309


257 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

258 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

265 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

266 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

267 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

268 
	`__n⁄nuŒ
 ((1));

272 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

273 
__THROW
;

278 #ifde‡
__USE_MISC


282 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

283 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

287 
	~<bôs/sigc⁄ãxt.h
>

290 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

295 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


296 
	#__√ed_size_t


	)

297 
	~<°ddef.h
>

299 
	~<bôs/ty≥s/°ack_t.h
>

300 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


302 
	~<sys/uc⁄ãxt.h
>

306 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


310 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

312 
	~<bôs/sig°ack.h
>

313 
	~<bôs/ss_Êags.h
>

317 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

318 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

321 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

322 || 
deföed
 
__USE_MISC
)

323 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

326 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

327 || 
deföed
 
__USE_MISC
)

331 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

332 
__THROW
 
__©åibuã_dïªˇãd__
;

335 #ifde‡
__USE_XOPEN_EXTENDED


339 
	$sighﬁd
 (
__sig
Ë
__THROW
;

342 
	$sigªl£
 (
__sig
Ë
__THROW
;

345 
	$sigign‹e
 (
__sig
Ë
__THROW
;

348 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

351 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


354 
	~<bôs/±hªadty≥s.h
>

355 
	~<bôs/sigthªad.h
>

362 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

364 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

366 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

367 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

369 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

131 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

133 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
)

135 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

140 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

144 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

145 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 #ifde‡
__USE_MISC


149 
__exãnsi⁄__


150 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

151 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

152 
__THROW
 
	`__n⁄nuŒ
 ((1));

154 
__exãnsi⁄__


155 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

156 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

157 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 #ifde‡
__USE_ISOC99


162 
__exãnsi⁄__


163 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

164 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

165 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__exãnsi⁄__


168 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

169 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

170 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

175 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

176 
__f
)

177 
__THROW
 
	`__n⁄nuŒ
 ((3));

179 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

180 
__f
)

181 
__THROW
 
	`__n⁄nuŒ
 ((3));

183 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

184 
__f
)

185 
__THROW
 
	`__n⁄nuŒ
 ((3));

188 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

189 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

190 
_Flﬂt128
 
__f
)

191 
__THROW
 
	`__n⁄nuŒ
 ((3));

195 #ifde‡
__USE_GNU


199 
	~<bôs/ty≥s/loˇÀ_t.h
>

201 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

203 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

205 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
,

207 
__ba£
, 
loˇÀ_t
 
__loc
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

210 
__exãnsi⁄__


211 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

212 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

213 
loˇÀ_t
 
__loc
)

214 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

216 
__exãnsi⁄__


217 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

218 **
__ª°ri˘
 
__íd±r
,

219 
__ba£
, 
loˇÀ_t
 
__loc
)

220 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

222 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

223 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

224 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

226 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

227 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

230 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

231 **
__ª°ri˘
 
__íd±r
,

232 
loˇÀ_t
 
__loc
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

235 #i‡
__HAVE_FLOAT128


236 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

237 **
__ª°ri˘
 
__íd±r
,

238 
loˇÀ_t
 
__loc
)

239 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

244 #ifde‡
__USE_EXTERN_INLINES


245 
__exã∫_ölöe
 

246 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

248  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

249 
	}
}

250 
__exã∫_ölöe
 

251 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

253  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

254 
	}
}

256 #ifde‡
__USE_ISOC99


257 
__exãnsi⁄__
 
__exã∫_ölöe
 

258 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

260  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

261 
	}
}

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


270 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

273 
	$a64l
 (c⁄° *
__s
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

278 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


279 
	~<sys/ty≥s.h
>

286 
	$øndom
 (Ë
__THROW
;

289 
	$§™dom
 (
__£ed
Ë
__THROW
;

295 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

296 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

300 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_MISC


308 
	søndom_d©a


310 
öt32_t
 *
Âå
;

311 
öt32_t
 *
Ωå
;

312 
öt32_t
 *
°©e
;

313 
ønd_ty≥
;

314 
ønd_deg
;

315 
ønd_£p
;

316 
öt32_t
 *
íd_±r
;

319 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

320 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

323 
__THROW
 
	`__n⁄nuŒ
 ((2));

325 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

326 
size_t
 
__°©ñí
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

330 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

331 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

338 
	$ønd
 (Ë
__THROW
;

340 
	$§™d
 (
__£ed
Ë
__THROW
;

342 #ifde‡
__USE_POSIX199506


344 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

348 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


352 
	$dønd48
 (Ë
__THROW
;

353 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

356 
	$Ã™d48
 (Ë
__THROW
;

357 
	$ƒ™d48
 (
__xsubi
[3])

358 
__THROW
 
	`__n⁄nuŒ
 ((1));

361 
	$mønd48
 (Ë
__THROW
;

362 
	$jønd48
 (
__xsubi
[3])

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

367 *
	$£ed48
 (
__£ed16v
[3])

368 
__THROW
 
	`__n⁄nuŒ
 ((1));

369 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_MISC


375 
	sdønd48_d©a


377 
__x
[3];

378 
__ﬁd_x
[3];

379 
__c
;

380 
__öô
;

381 
__exãnsi⁄__
 
__a
;

386 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

387 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

388 
	$î™d48_r
 (
__xsubi
[3],

389 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

390 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

394 *
__ª°ri˘
 
__ªsu…
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

396 
	$ƒ™d48_r
 (
__xsubi
[3],

397 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

398 *
__ª°ri˘
 
__ªsu…
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

402 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

403 *
__ª°ri˘
 
__ªsu…
)

404 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

405 
	$jønd48_r
 (
__xsubi
[3],

406 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

407 *
__ª°ri˘
 
__ªsu…
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

411 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

412 
__THROW
 
	`__n⁄nuŒ
 ((2));

414 
	$£ed48_r
 (
__£ed16v
[3],

415 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

417 
	$lc⁄g48_r
 (
__∑øm
[7],

418 
dønd48_d©a
 *
__buf„r
)

419 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

424 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

426 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

427 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

434 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

435 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

437 #ifde‡
__USE_GNU


443 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

444 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

448 
	$‰ì
 (*
__±r
Ë
__THROW
;

450 #ifde‡
__USE_MISC


451 
	~<Æloˇ.h
>

454 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

455 || 
deföed
 
__USE_MISC


457 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

460 #ifde‡
__USE_XOPEN2K


462 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

463 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

466 #ifde‡
__USE_ISOC11


468 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

473 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

477 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

479 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


481 #ifde‡
__˝lu•lus


482 "C++" 
	$©_quick_exô
 ((*
__func
) ())

483 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

485 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

489 #ifdef 
__USE_MISC


492 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

493 
__THROW
 
	`__n⁄nuŒ
 ((1));

499 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

501 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


505 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

508 #ifde‡
__USE_ISOC99


511 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

516 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

518 #ifde‡
__USE_GNU


521 *
	$£cuª_gëív
 (c⁄° *
__«me
)

522 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

525 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


529 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #ifde‡
__USE_XOPEN2K


535 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

536 
__THROW
 
	`__n⁄nuŒ
 ((2));

539 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifdef 
__USE_MISC


546 
	$˛óªnv
 (Ë
__THROW
;

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

557 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

560 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


569 #i‚de‡
__USE_FILE_OFFSET64


570 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

572 #ifde‡
__REDIRECT


573 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

574 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

576 
	#mk°emp
 
mk°emp64


	)

579 #ifde‡
__USE_LARGEFILE64


580 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_MISC


591 #i‚de‡
__USE_FILE_OFFSET64


592 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__REDIRECT


595 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

596 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

598 
	#mk°emps
 
mk°emps64


	)

601 #ifde‡
__USE_LARGEFILE64


602 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

603 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

607 #ifde‡
__USE_XOPEN2K8


613 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

616 #ifde‡
__USE_GNU


623 #i‚de‡
__USE_FILE_OFFSET64


624 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__REDIRECT


627 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

628 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

630 
	#mko°emp
 
mko°emp64


	)

633 #ifde‡
__USE_LARGEFILE64


634 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‚de‡
__USE_FILE_OFFSET64


644 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

645 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 #ifde‡
__REDIRECT


648 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

649 
__Êags
), 
mko°emps64
)

650 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 
	#mko°emps
 
mko°emps64


	)

655 #ifde‡
__USE_LARGEFILE64


656 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

657 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

669 #ifdef 
__USE_GNU


672 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

673 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


682 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

683 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

688 #i‚de‡
__COMPAR_FN_T


689 
	#__COMPAR_FN_T


	)

690 (*
	t__com∑r_‚_t
) (const *, const *);

692 #ifdef 
__USE_GNU


693 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

696 #ifde‡
__USE_GNU


697 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

702 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

703 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

704 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

706 #ifde‡
__USE_EXTERN_INLINES


707 
	~<bôs/°dlib-b£¨ch.h
>

712 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

713 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

714 #ifde‡
__USE_GNU


715 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

716 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

717 
	`__n⁄nuŒ
 ((1, 4));

722 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

723 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

725 #ifde‡
__USE_ISOC99


726 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

727 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

734 
div_t
 
	$div
 (
__numî
, 
__díom
)

735 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

737 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

741 
__díom
)

742 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

746 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

747 || 
deföed
 
__USE_MISC


754 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

755 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

760 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

761 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

766 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

767 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

770 #ifde‡
__USE_MISC


772 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

773 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

774 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

775 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

776 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

777 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

779 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

784 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

785 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

786 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

787 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

788 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

789 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

791 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

792 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

793 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

794 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

795 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

796 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

797 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

798 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

804 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

807 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

808 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

811 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

815 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

816 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

818 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

819 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

820 
__THROW
;

823 #ifde‡
__USE_MISC


828 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

832 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


839 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

840 *c⁄° *
__ª°ri˘
 
__tokís
,

841 **
__ª°ri˘
 
__vÆuï
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

846 #ifde‡
__USE_XOPEN


848 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

854 #ifde‡
__USE_XOPEN2KXSI


856 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

859 #ifde‡
__USE_XOPEN_EXTENDED


864 
	$gø¡±
 (
__fd
Ë
__THROW
;

868 
	$u∆ock±
 (
__fd
Ë
__THROW
;

873 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

876 #ifde‡
__USE_GNU


880 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

881 
__THROW
 
	`__n⁄nuŒ
 ((2));

884 
	`gë±
 ();

887 #ifde‡
__USE_MISC


891 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

892 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


898 
	$ây¶Ÿ
 (Ë
__THROW
;

901 
	~<bôs/°dlib-Êﬂt.h
>

904 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


905 
	~<bôs/°dlib.h
>

907 #ifde‡
__LDBL_COMPAT


908 
	~<bôs/°dlib-ldbl.h
>

911 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_GNU


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/auxv.h

19 #i‚de‡
_SYS_AUXV_H


20 
	#_SYS_AUXV_H
 1

	)

22 
	~<ñf.h
>

23 
	~<sys/cdefs.h
>

24 
	~<bôs/hwˇp.h
>

26 
__BEGIN_DECLS


31 
	$gëauxvÆ
 (
__ty≥
)

32 
__THROW
;

34 
__END_DECLS


	@/usr/include/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ù˘y≥s.h
>

25 
	~<bôs/ùc.h
>

27 #i‚de‡
__uid_t_deföed


28 
__uid_t
 
	tuid_t
;

29 
	#__uid_t_deföed


	)

32 #i‚de‡
__gid_t_deföed


33 
__gid_t
 
	tgid_t
;

34 
	#__gid_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 #i‚de‡
__key_t_deföed


43 
__key_t
 
	tkey_t
;

44 
	#__key_t_deföed


	)

47 
__BEGIN_DECLS


50 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

52 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	~<bôs/ty≥s/time_t.h
>

35 #ifde‡
__USE_XOPEN


36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
__BEGIN_DECLS


49 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

52 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

55 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

56 
__THROW
;

59 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

61 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/sysctl.h

18 #i‚def 
_SYS_SYSCTL_H


19 
	#_SYS_SYSCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

25 #i‚de‡
_LINUX_KERNEL_H


26 
	#_LINUX_KERNEL_H
 1

	)

27 
	#__undef_LINUX_KERNEL_H


	)

29 #i‚de‡
_LINUX_TYPES_H


30 
	#_LINUX_TYPES_H
 1

	)

31 
	#__undef_LINUX_TYPES_H


	)

33 #i‚de‡
_LINUX_LIST_H


34 
	#_LINUX_LIST_H
 1

	)

35 
	#__undef_LINUX_LIST_H


	)

37 #i‚de‡
__LINUX_COMPILER_H


38 
	#__LINUX_COMPILER_H
 1

	)

39 
	#__u£r


	)

40 
	#__undef__LINUX_COMPILER_H


	)

43 
	~<löux/sys˘l.h
>

45 #ifde‡
__undef_LINUX_KERNEL_H


46 #unde‡
_LINUX_KERNEL_H


47 #unde‡
__undef_LINUX_KERNEL_H


49 #ifde‡
__undef_LINUX_TYPES_H


50 #unde‡
_LINUX_TYPES_H


51 #unde‡
__undef_LINUX_TYPES_H


53 #ifde‡
__undef_LINUX_LIST_H


54 #unde‡
_LINUX_LIST_H


55 #unde‡
__undef_LINUX_LIST_H


57 #ifde‡
__undef__LINUX_COMPILER_H


58 #unde‡
__LINUX_COMPILER_H


59 #unde‡
__u£r


60 #unde‡
__undef__LINUX_COMPILER_H


63 
	~<bôs/sys˘l.h
>

65 
__BEGIN_DECLS


68 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

69 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/sys/sysinfo.h

18 #i‚de‡
_SYS_SYSINFO_H


19 
	#_SYS_SYSINFO_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<löux/kî√l.h
>

26 
__BEGIN_DECLS


29 
	$sysöfo
 (
sysöfo
 *
__öfo
Ë
__THROW
;

33 
	$gë_≈rocs_c⁄f
 (Ë
__THROW
;

36 
	$gë_≈rocs
 (Ë
__THROW
;

40 
	$gë_phys_∑ges
 (Ë
__THROW
;

43 
	$gë_avphys_∑ges
 (Ë
__THROW
;

45 
__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/time_t.h
>

25 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

27 #i‚de‡
__su£c⁄ds_t_deföed


28 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

29 
	#__su£c⁄ds_t_deföed


	)

32 
	~<sys/£À˘.h
>

34 
	g__BEGIN_DECLS


36 #ifde‡
__USE_GNU


38 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

39 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

40 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

41 }

	)

42 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

43 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

44 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

45 }

	)

49 #ifde‡
__USE_MISC


52 
	stimez⁄e


54 
	mtz_möuãswe°
;

55 
	mtz_d°time
;

58 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

60 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

68 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

69 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

71 #ifde‡
__USE_MISC


74 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

75 c⁄° 
timez⁄e
 *
__tz
)

76 
__THROW
;

82 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

83 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

88 
	e__ôimî_which


91 
ITIMER_REAL
 = 0,

92 
	#ITIMER_REAL
 
ITIMER_REAL


	)

94 
ITIMER_VIRTUAL
 = 1,

95 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

98 
ITIMER_PROF
 = 2

99 
	#ITIMER_PROF
 
ITIMER_PROF


	)

104 
	sôimîvÆ


107 
timevÆ
 
ô_öãrvÆ
;

109 
timevÆ
 
ô_vÆue
;

112 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


115 
__ôimî_which
 
	t__ôimî_which_t
;

117 
	t__ôimî_which_t
;

122 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

123 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

128 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

129 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

130 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

135 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_MISC


140 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

144 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

147 #ifde‡
__USE_GNU


151 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

152 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

156 #ifde‡
__USE_MISC


159 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

160 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

161 
	#timîcmp
(
a
, 
b
, 
CMP
) \

162 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

163 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

164 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

165 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

167 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

168 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

169 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

171 ++(
ªsu…
)->
tv_£c
; \

172 (
ªsu…
)->
tv_u£c
 -= 1000000; \

174 
	}
} 0)

	)

175 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

177 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

178 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

179 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

180 --(
ªsu…
)->
tv_£c
; \

181 (
ªsu…
)->
tv_u£c
 += 1000000; \

183 } 0)

	)

186 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	~<bôs/ty≥s/˛ock_t.h
>

129 
	~<bôs/ty≥s/˛ockid_t.h
>

130 
	~<bôs/ty≥s/time_t.h
>

131 
	~<bôs/ty≥s/timî_t.h
>

133 #ifde‡
__USE_XOPEN


134 #i‚de‡
__u£c⁄ds_t_deföed


135 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

136 
	#__u£c⁄ds_t_deföed


	)

138 #i‚de‡
__su£c⁄ds_t_deföed


139 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

140 
	#__su£c⁄ds_t_deföed


	)

144 
	#__√ed_size_t


	)

145 
	~<°ddef.h
>

147 #ifde‡
__USE_MISC


149 
	tul⁄g
;

150 
	tush‹t
;

151 
	tuöt
;

156 
	~<bôs/°döt-öä.h
>

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 
	tu_öt8_t
;

162 
	tu_öt16_t
;

163 
	tu_öt32_t
;

164 #i‡
__WORDSIZE
 == 64

165 
	tu_öt64_t
;

167 
__exãnsi⁄__
 
	tu_öt64_t
;

170 
	tªgi°î_t
;

175 
	#__u_ötN_t
(
N
, 
MODE
) \

176 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

178 
	t__u_ötN_t
 (8, 
	t__QI__
);

179 
__u_ötN_t
 (16, 
__HI__
);

180 
__u_ötN_t
 (32, 
__SI__
);

181 
__u_ötN_t
 (64, 
__DI__
);

183 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

189 
	#__BIT_TYPES_DEFINED__
 1

	)

192 #ifdef 
__USE_MISC


194 
	~<ídün.h
>

197 
	~<sys/£À˘.h
>

204 
	#__SYSMACROS_DEPRECATED_INCLUSION


	)

205 
	~<sys/sysma¸os.h
>

206 #unde‡
__SYSMACROS_DEPRECATED_INCLUSION


210 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

211 && !
deföed
 
__blksize_t_deföed


212 
__blksize_t
 
	tblksize_t
;

213 
	#__blksize_t_deföed


	)

217 #i‚de‡
__USE_FILE_OFFSET64


218 #i‚de‡
__blk˙t_t_deföed


219 
__blk˙t_t
 
	tblk˙t_t
;

220 
	#__blk˙t_t_deföed


	)

222 #i‚de‡
__fsblk˙t_t_deföed


223 
__fsblk˙t_t
 
	tfsblk˙t_t
;

224 
	#__fsblk˙t_t_deföed


	)

226 #i‚de‡
__fsfû˙t_t_deföed


227 
__fsfû˙t_t
 
	tfsfû˙t_t
;

228 
	#__fsfû˙t_t_deföed


	)

231 #i‚de‡
__blk˙t_t_deföed


232 
__blk˙t64_t
 
	tblk˙t_t
;

233 
	#__blk˙t_t_deföed


	)

235 #i‚de‡
__fsblk˙t_t_deföed


236 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

237 
	#__fsblk˙t_t_deföed


	)

239 #i‚de‡
__fsfû˙t_t_deföed


240 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

241 
	#__fsfû˙t_t_deföed


	)

245 #ifde‡
__USE_LARGEFILE64


246 
__blk˙t64_t
 
	tblk˙t64_t
;

247 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

248 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

253 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


254 
	~<bôs/±hªadty≥s.h
>

257 
	g__END_DECLS


	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

35 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


36 
	~<sig«l.h
>

39 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


42 
	~<bôs/ty≥s/°ru˘_rußge.h
>

46 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

49 
	~<bôs/waôÊags.h
>

52 
	~<bôs/waô°©us.h
>

54 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

55 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

56 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

57 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

58 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

59 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

60 #ifde‡
__WIFCONTINUED


61 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

65 #ifdef 
__USE_MISC


66 
	#WCOREFLAG
 
__WCOREFLAG


	)

67 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (°©us)

	)

68 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

69 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

73 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


76 
	mP_ALL
,

77 
	mP_PID
,

78 
	mP_PGID


79 } 
	tidty≥_t
;

88 
__pid_t
 
waô
 (*
__°©_loc
);

90 #ifdef 
__USE_MISC


92 
	#WAIT_ANY
 (-1Ë

	)

93 
	#WAIT_MYPGRP
 0

	)

111 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

113 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


114 #i‚de‡
__id_t_deföed


115 
__id_t
 
	tid_t
;

116 
	#__id_t_deföed


	)

119 
	~<bôs/ty≥s/sigöfo_t.h
>

132 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

133 
__›ti⁄s
);

136 #i‡
deföed
 
__USE_MISC
 \

137 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K
)

140 
	grußge
;

147 
__pid_t
 
	$waô3
 (*
__°©_loc
, 
__›ti⁄s
,

148 
rußge
 * 
__ußge
Ë
__THROWNL
;

151 #ifde‡
__USE_MISC


153 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, *
__°©_loc
, 
__›ti⁄s
,

154 
rußge
 *
__ußge
Ë
__THROWNL
;

158 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	~<bôs/gë›t_posix.h
>

876 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


880 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_MISC


887 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

898 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$vh™gup
 (Ë
__THROW
;

910 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

919 
size_t
 
__off£t
, 
__sˇÀ
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

930 *
	$gëu£rshñl
 (Ë
__THROW
;

931 
	$ídu£rshñl
 (Ë
__THROW
;

932 
	$£tu£rshñl
 (Ë
__THROW
;

938 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

942 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

945 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

949 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

957 
	`fsync
 (
__fd
);

960 #ifde‡
__USE_GNU


963 
	$syncfs
 (
__fd
Ë
__THROW
;

967 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


970 
	`gëho°id
 ();

973 
	$sync
 (Ë
__THROW
;

976 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


979 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

984 
	$gëdèbÀsize
 (Ë
__THROW
;

990 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


993 #i‚de‡
__USE_FILE_OFFSET64


994 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

997 #ifde‡
__REDIRECT_NTH


998 
	`__REDIRECT_NTH
 (
åunˇã
,

999 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1000 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1002 
	#åunˇã
 
åunˇã64


	)

1005 #ifde‡
__USE_LARGEFILE64


1006 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1012 #i‡
deföed
 
__USE_POSIX199309
 \

1013 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1016 #i‚de‡
__USE_FILE_OFFSET64


1017 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1019 #ifde‡
__REDIRECT_NTH


1020 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1021 
·runˇã64
Ë
__wur
;

1023 
	#·runˇã
 
·runˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1033 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1034 || 
deföed
 
__USE_MISC


1038 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1044 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1048 #ifde‡
__USE_MISC


1059 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1064 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1076 
	#F_ULOCK
 0

	)

1077 
	#F_LOCK
 1

	)

1078 
	#F_TLOCK
 2

	)

1079 
	#F_TEST
 3

	)

1081 #i‚de‡
__USE_FILE_OFFSET64


1082 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1084 #ifde‡
__REDIRECT


1085 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1086 
lockf64
Ë
__wur
;

1088 
	#lockf
 
lockf64


	)

1091 #ifde‡
__USE_LARGEFILE64


1092 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1097 #ifde‡
__USE_GNU


1102 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1103 (
__exãnsi⁄__
 \

1104 ({ 
__ªsu…
; \

1105 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1106 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1107 
__ªsu…
; 
	}
}))

	)

1110 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1113 
fd©async
 (
__fûdes
);

1119 #ifdef 
__USE_XOPEN


1121 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1126 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1127 
__THROW
 
	`__n⁄nuŒ
 ((1));

1134 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1135 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 *
	`cu£rid
 (*
__s
);

1153 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1154 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1155 (*
__∑ª¡
) (),

1156 (*
__chûd
Ë()Ë
__THROW
;

1159 #ifde‡
__USE_MISC


1162 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1166 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1167 
	~<bôs/uni°d.h
>

1170 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm/unistd.h

2 #i‚de‡
_ASM_X86_UNISTD_H


3 
	#_ASM_X86_UNISTD_H


	)

6 
	#__X32_SYSCALL_BIT
 0x40000000

	)

8 #ifde‡
__i386__


9 
	~<asm/uni°d_32.h
>

10 #ñi‡
deföed
(
__ILP32__
)

11 
	~<asm/uni°d_x32.h
>

13 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/cpu-set.h

20 #i‚de‡
_BITS_CPU_SET_H


21 
	#_BITS_CPU_SET_H
 1

	)

23 #i‚de‡
_SCHED_H


28 
	#__CPU_SETSIZE
 1024

	)

29 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

32 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

35 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

36 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

41 
__˝u_mask
 
	m__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

42 } 
	t˝u_£t_t
;

45 #i‡
__GNUC_PREREQ
 (2, 91)

46 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

47 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

49 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

51 
size_t
 
__i
; \

52 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

53 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

54 
__i
 = 0; __ò< 
__imax
; ++__i) \

55 
__bôs
[
__i
] = 0; \

56 } 0)

	)

58 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

59 (
__exãnsi⁄__
 \

60 ({ 
size_t
 
__˝u
 = (
˝u
); \

61 
__˝u
 / 8 < (
£tsize
) \

62 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

63 |
	`__CPUMASK
 (
__˝u
)) \

64 : 0; }))

	)

65 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

66 (
__exãnsi⁄__
 \

67 ({ 
size_t
 
__˝u
 = (
˝u
); \

68 
__˝u
 / 8 < (
£tsize
) \

69 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

70 &~
	`__CPUMASK
 (
__˝u
)) \

71 : 0; }))

	)

72 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

73 (
__exãnsi⁄__
 \

74 ({ 
size_t
 
__˝u
 = (
˝u
); \

75 
__˝u
 / 8 < (
£tsize
) \

76 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

77 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

78 : 0; }))

	)

80 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

81 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

83 #i‡
__GNUC_PREREQ
 (2, 91)

84 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

85 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

87 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

88 (
__exãnsi⁄__
 \

89 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

90 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

91 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

92 
size_t
 
__i
; \

93 
__i
 = 0; __ò< 
__imax
; ++__i) \

94 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

96 
__i
 =
__imax
; }))

	)

99 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

100 (
__exãnsi⁄__
 \

101 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

102 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

103 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

104 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

105 
size_t
 
__i
; \

106 
__i
 = 0; __ò< 
__imax
; ++__i) \

107 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

108 
__de°
; }))

	)

110 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

111 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

112 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

113 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

115 
__BEGIN_DECLS


117 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

118 
__THROW
;

119 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

120 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

122 
__END_DECLS


	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #i‚de‡
_BITS_ERRNO_H


20 
	#_BITS_ERRNO_H
 1

	)

22 #i‡!
deföed
 
_ERRNO_H


26 
	~<löux/î∫o.h
>

29 #i‚de‡
ENOTSUP


30 
	#ENOTSUP
 
EOPNOTSUPP


	)

33 #i‚de‡
ECANCELED


34 
	#ECANCELED
 125

	)

37 #i‚de‡
EOWNERDEAD


38 
	#EOWNERDEAD
 130

	)

41 #i‚de‡
ENOTRECOVERABLE


42 
	#ENOTRECOVERABLE
 131

	)

45 #i‚de‡
ERFKILL


46 
	#ERFKILL
 132

	)

49 #i‚de‡
EHWPOISON


50 
	#EHWPOISON
 133

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	$__GNUC_PREREQ
 (4, 4)))

32 
	#__HAVE_FLOAT128
 1

	)

34 
	#__HAVE_FLOAT128
 0

	)

39 #i‡
__HAVE_FLOAT128


40 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

47 #i‡
__HAVE_FLOAT128


48 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


50 
	#__f128
(
x
Ëx##
q


	)

52 
	#__f128
(
x
Ëx##
f128


	)

57 #i‡
__HAVE_FLOAT128


58 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


61 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

62 
	#__CFLOAT128
 
__cÊﬂt128


	)

64 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

69 #i‡
__HAVE_FLOAT128


72 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


73 
__Êﬂt128
 
	t_Flﬂt128
;

77 #i‡!
	`__GNUC_PREREQ
 (7, 0)

78 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

86 #i‡!
	`__GNUC_PREREQ
 (7, 0)

87 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

88 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

89 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

90 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

91 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

98 #i‡!
	`__GNUC_PREREQ
 (6, 0)

99 
	#__buûtö_signbôf128
 
__signbôf128


	)

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/hwcap.h

19 #i‚de‡
_SYS_AUXV_H


	@/usr/include/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

42 
	sùc_≥rm


44 
__key_t
 
	m__key
;

45 
__uid_t
 
	muid
;

46 
__gid_t
 
	mgid
;

47 
__uid_t
 
	mcuid
;

48 
__gid_t
 
	mcgid
;

49 
	mmode
;

50 
	m__∑d1
;

51 
	m__£q
;

52 
	m__∑d2
;

53 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved1
;

54 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved2
;

	@/usr/include/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

47 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


48 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


49 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

51 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

56 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


57 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


58 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

60 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

65 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


67 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

69 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

42 
	#MAP_SYNC
 0x80000

	)

47 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

179 
	~<bôs/ty≥s/°ru˘_rußge.h
>

182 
	#PRIO_MIN
 -20

	)

183 
	#PRIO_MAX
 20

	)

187 
	e__¥i‹ôy_which


189 
	mPRIO_PROCESS
 = 0,

190 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

191 
	mPRIO_PGRP
 = 1,

192 
	#PRIO_PGRP
 
PRIO_PGRP


	)

193 
	mPRIO_USER
 = 2

194 
	#PRIO_USER
 
PRIO_USER


	)

198 
	g__BEGIN_DECLS


200 #ifde‡
__USE_GNU


202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

204 c⁄° 
æimô
 *
__√w_limô
,

205 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

207 #ifde‡
__REDIRECT_NTH


208 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

209 
__æimô_ªsour˚
 
__ªsour˚
,

210 c⁄° 
æimô
 *
__√w_limô
,

211 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

213 
	#¥limô
 
¥limô64


	)

216 #ifde‡
__USE_LARGEFILE64


217 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

218 c⁄° 
æimô64
 *
__√w_limô
,

219 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

223 
__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
_BITS_SCHED_H


21 
	#_BITS_SCHED_H
 1

	)

23 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_ISO
 4

	)

34 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_DEADLINE
 6

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_GNU


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWCGROUP
 0x02000000

	)

66 
	#CLONE_NEWUTS
 0x04000000

	)

67 
	#CLONE_NEWIPC
 0x08000000

	)

68 
	#CLONE_NEWUSER
 0x10000000

	)

69 
	#CLONE_NEWPID
 0x20000000

	)

70 
	#CLONE_NEWNET
 0x40000000

	)

71 
	#CLONE_IO
 0x80000000

	)

75 
	ssched_∑øm


77 
	msched_¥i‹ôy
;

80 
	g__BEGIN_DECLS


82 #ifde‡
__USE_GNU


84 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

85 
__Êags
, *
__¨g
, ...Ë
__THROW
;

88 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

91 
	$sched_gë˝u
 (Ë
__THROW
;

94 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

97 
__END_DECLS


	@/usr/include/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

25 
	#SHM_R
 0400

	)

26 
	#SHM_W
 0200

	)

29 
	#SHM_RDONLY
 010000

	)

30 
	#SHM_RND
 020000

	)

31 
	#SHM_REMAP
 040000

	)

32 
	#SHM_EXEC
 0100000

	)

35 
	#SHM_LOCK
 11

	)

36 
	#SHM_UNLOCK
 12

	)

38 
	g__BEGIN_DECLS


41 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

42 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

46 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

49 
	sshmid_ds


51 
ùc_≥rm
 
shm_≥rm
;

52 
size_t
 
shm_£gsz
;

53 
__time_t
 
shm_©ime
;

54 #i‚de‡
__x86_64__


55 
__glibc_ª£rved1
;

57 
__time_t
 
shm_dtime
;

58 #i‚de‡
__x86_64__


59 
__glibc_ª£rved2
;

61 
__time_t
 
shm_˘ime
;

62 #i‚de‡
__x86_64__


63 
__glibc_ª£rved3
;

65 
__pid_t
 
shm_˝id
;

66 
__pid_t
 
shm_Õid
;

67 
shm©t_t
 
shm_«âch
;

68 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

69 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved5
;

72 #ifde‡
__USE_MISC


75 
	#SHM_STAT
 13

	)

76 
	#SHM_INFO
 14

	)

79 
	#SHM_DEST
 01000

	)

80 
	#SHM_LOCKED
 02000

	)

81 
	#SHM_HUGETLB
 04000

	)

82 
	#SHM_NORESERVE
 010000

	)

84 
	sshmöfo


86 
__sysˇŒ_ul⁄g_t
 
shmmax
;

87 
__sysˇŒ_ul⁄g_t
 
shmmö
;

88 
__sysˇŒ_ul⁄g_t
 
shmmni
;

89 
__sysˇŒ_ul⁄g_t
 
shm£g
;

90 
__sysˇŒ_ul⁄g_t
 
shmÆl
;

91 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved1
;

92 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved2
;

93 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved3
;

94 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

97 
	sshm_öfo


99 
u£d_ids
;

100 
__sysˇŒ_ul⁄g_t
 
shm_tŸ
;

101 
__sysˇŒ_ul⁄g_t
 
shm_rss
;

102 
__sysˇŒ_ul⁄g_t
 
shm_swp
;

103 
__sysˇŒ_ul⁄g_t
 
sw≠_©ãm±s
;

104 
__sysˇŒ_ul⁄g_t
 
sw≠_suc˚s£s
;

109 
__END_DECLS


	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	~<bôs/ty≥s.h
>

27 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

28 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

29 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

31 
	s_Âx_sw_byãs


33 
__uöt32_t
 
	mmagic1
;

34 
__uöt32_t
 
	mexãnded_size
;

35 
__uöt64_t
 
	mx°©e_bv
;

36 
__uöt32_t
 
	mx°©e_size
;

37 
__uöt32_t
 
	m__glibc_ª£rved1
[7];

40 
	s_Âªg


42 
	msignifiˇnd
[4];

43 
	mexp⁄ít
;

46 
	s_Âxªg


48 
	msignifiˇnd
[4];

49 
	mexp⁄ít
;

50 
	m__glibc_ª£rved1
[3];

53 
	s_xmmªg


55 
__uöt32_t
 
	mñemít
[4];

60 #i‚de‡
__x86_64__


62 
	s_Â°©e


65 
__uöt32_t
 
	mcw
;

66 
__uöt32_t
 
	msw
;

67 
__uöt32_t
 
	mèg
;

68 
__uöt32_t
 
	mùoff
;

69 
__uöt32_t
 
	mcs£l
;

70 
__uöt32_t
 
	md©aoff
;

71 
__uöt32_t
 
	md©a£l
;

72 
_Âªg
 
	m_°
[8];

73 
	m°©us
;

74 
	mmagic
;

77 
__uöt32_t
 
	m_fx§_ív
[6];

78 
__uöt32_t
 
	mmxc§
;

79 
__uöt32_t
 
	m__glibc_ª£rved1
;

80 
_Âxªg
 
	m_fx§_°
[8];

81 
_xmmªg
 
	m_xmm
[8];

82 
__uöt32_t
 
	m__glibc_ª£rved2
[56];

85 #i‚de‡
sigc⁄ãxt_°ru˘


90 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

93 
	#X86_FXSR_MAGIC
 0x0000

	)

95 
	ssigc⁄ãxt


97 
	mgs
, 
	m__gsh
;

98 
	mfs
, 
	m__fsh
;

99 
	mes
, 
	m__esh
;

100 
	mds
, 
	m__dsh
;

101 
	medi
;

102 
	mesi
;

103 
	mebp
;

104 
	me•
;

105 
	mebx
;

106 
	medx
;

107 
	mecx
;

108 
	móx
;

109 
	må≠no
;

110 
	mîr
;

111 
	meù
;

112 
	mcs
, 
	m__csh
;

113 
	meÊags
;

114 
	me•_©_sig«l
;

115 
	mss
, 
	m__ssh
;

116 
_Â°©e
 * 
	mÂ°©e
;

117 
	mﬁdmask
;

118 
	m¸2
;

123 
	s_Â°©e


126 
__uöt16_t
 
	mcwd
;

127 
__uöt16_t
 
	mswd
;

128 
__uöt16_t
 
	m·w
;

129 
__uöt16_t
 
	mf›
;

130 
__uöt64_t
 
	mrù
;

131 
__uöt64_t
 
	mrdp
;

132 
__uöt32_t
 
	mmxc§
;

133 
__uöt32_t
 
	mmx¸_mask
;

134 
_Âxªg
 
	m_°
[8];

135 
_xmmªg
 
	m_xmm
[16];

136 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

139 
	ssigc⁄ãxt


141 
__uöt64_t
 
	mr8
;

142 
__uöt64_t
 
	mr9
;

143 
__uöt64_t
 
	mr10
;

144 
__uöt64_t
 
	mr11
;

145 
__uöt64_t
 
	mr12
;

146 
__uöt64_t
 
	mr13
;

147 
__uöt64_t
 
	mr14
;

148 
__uöt64_t
 
	mr15
;

149 
__uöt64_t
 
	mrdi
;

150 
__uöt64_t
 
	mrsi
;

151 
__uöt64_t
 
	mrbp
;

152 
__uöt64_t
 
	mrbx
;

153 
__uöt64_t
 
	mrdx
;

154 
__uöt64_t
 
	møx
;

155 
__uöt64_t
 
	mrcx
;

156 
__uöt64_t
 
	mr•
;

157 
__uöt64_t
 
	mrù
;

158 
__uöt64_t
 
	meÊags
;

159 
	mcs
;

160 
	mgs
;

161 
	mfs
;

162 
	m__∑d0
;

163 
__uöt64_t
 
	mîr
;

164 
__uöt64_t
 
	må≠no
;

165 
__uöt64_t
 
	mﬁdmask
;

166 
__uöt64_t
 
	m¸2
;

167 
__exãnsi⁄__
 union

169 
_Â°©e
 * 
	mÂ°©e
;

170 
__uöt64_t
 
	m__Â°©e_w‹d
;

172 
__uöt64_t
 
	m__ª£rved1
 [8];

177 
	s_xßve_hdr


179 
__uöt64_t
 
	mx°©e_bv
;

180 
__uöt64_t
 
	m__glibc_ª£rved1
[2];

181 
__uöt64_t
 
	m__glibc_ª£rved2
[5];

184 
	s_ymmh_°©e


186 
__uöt32_t
 
	mymmh_•a˚
[64];

189 
	s_x°©e


191 
_Â°©e
 
	mÂ°©e
;

192 
_xßve_hdr
 
	mx°©e_hdr
;

193 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/sigevent-consts.h

19 #i‚de‡
_BITS_SIGEVENT_CONSTS_H


20 
	#_BITS_SIGEVENT_CONSTS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_AIO_H


29 
	mSIGEV_SIGNAL
 = 0,

30 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

31 
	mSIGEV_NONE
,

32 
	#SIGEV_NONE
 
SIGEV_NONE


	)

33 
	mSIGEV_THREAD
,

34 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

36 
	mSIGEV_THREAD_ID
 = 4

38 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/siginfo-consts.h

19 #i‚de‡
_BITS_SIGINFO_CONSTS_H


20 
	#_BITS_SIGINFO_CONSTS_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	~<bôs/sigöfo-¨ch.h
>

29 #i‚de‡
__SI_ASYNCIO_AFTER_SIGIO


30 
	#__SI_ASYNCIO_AFTER_SIGIO
 1

	)

37 
	mSI_ASYNCNL
 = -60,

38 
	mSI_TKILL
 = -6,

39 
	mSI_SIGIO
,

40 #i‡
__SI_ASYNCIO_AFTER_SIGIO


41 
	mSI_ASYNCIO
,

42 
	mSI_MESGQ
,

43 
	mSI_TIMER
,

45 
	mSI_MESGQ
,

46 
	mSI_TIMER
,

47 
	mSI_ASYNCIO
,

49 
	mSI_QUEUE
,

50 
	mSI_USER
,

51 
	mSI_KERNEL
 = 0x80

53 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

54 
	#SI_TKILL
 
SI_TKILL


	)

55 
	#SI_SIGIO
 
SI_SIGIO


	)

56 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

57 
	#SI_MESGQ
 
SI_MESGQ


	)

58 
	#SI_TIMER
 
SI_TIMER


	)

59 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

60 
	#SI_QUEUE
 
SI_QUEUE


	)

61 
	#SI_USER
 
SI_USER


	)

62 
	#SI_KERNEL
 
SI_KERNEL


	)

66 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


70 
	mILL_ILLOPC
 = 1,

71 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

72 
	mILL_ILLOPN
,

73 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

74 
	mILL_ILLADR
,

75 
	#ILL_ILLADR
 
ILL_ILLADR


	)

76 
	mILL_ILLTRP
,

77 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

78 
	mILL_PRVOPC
,

79 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

80 
	mILL_PRVREG
,

81 
	#ILL_PRVREG
 
ILL_PRVREG


	)

82 
	mILL_COPROC
,

83 
	#ILL_COPROC
 
ILL_COPROC


	)

84 
	mILL_BADSTK


85 
	#ILL_BADSTK
 
ILL_BADSTK


	)

91 
	mFPE_INTDIV
 = 1,

92 
	#FPE_INTDIV
 
FPE_INTDIV


	)

93 
	mFPE_INTOVF
,

94 
	#FPE_INTOVF
 
FPE_INTOVF


	)

95 
	mFPE_FLTDIV
,

96 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

97 
	mFPE_FLTOVF
,

98 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

99 
	mFPE_FLTUND
,

100 
	#FPE_FLTUND
 
FPE_FLTUND


	)

101 
	mFPE_FLTRES
,

102 
	#FPE_FLTRES
 
FPE_FLTRES


	)

103 
	mFPE_FLTINV
,

104 
	#FPE_FLTINV
 
FPE_FLTINV


	)

105 
	mFPE_FLTSUB


106 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

112 
	mSEGV_MAPERR
 = 1,

113 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

114 
	mSEGV_ACCERR


115 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

121 
	mBUS_ADRALN
 = 1,

122 
	#BUS_ADRALN
 
BUS_ADRALN


	)

123 
	mBUS_ADRERR
,

124 
	#BUS_ADRERR
 
BUS_ADRERR


	)

125 
	mBUS_OBJERR
,

126 
	#BUS_OBJERR
 
BUS_OBJERR


	)

127 
	mBUS_MCEERR_AR
,

128 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

129 
	mBUS_MCEERR_AO


130 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

134 #ifde‡
__USE_XOPEN_EXTENDED


138 
	mTRAP_BRKPT
 = 1,

139 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

140 
	mTRAP_TRACE


141 
	#TRAP_TRACE
 
TRAP_TRACE


	)

145 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


149 
	mCLD_EXITED
 = 1,

150 
	#CLD_EXITED
 
CLD_EXITED


	)

151 
	mCLD_KILLED
,

152 
	#CLD_KILLED
 
CLD_KILLED


	)

153 
	mCLD_DUMPED
,

154 
	#CLD_DUMPED
 
CLD_DUMPED


	)

155 
	mCLD_TRAPPED
,

156 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

157 
	mCLD_STOPPED
,

158 
	#CLD_STOPPED
 
CLD_STOPPED


	)

159 
	mCLD_CONTINUED


160 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

166 
	mPOLL_IN
 = 1,

167 
	#POLL_IN
 
POLL_IN


	)

168 
	mPOLL_OUT
,

169 
	#POLL_OUT
 
POLL_OUT


	)

170 
	mPOLL_MSG
,

171 
	#POLL_MSG
 
POLL_MSG


	)

172 
	mPOLL_ERR
,

173 
	#POLL_ERR
 
POLL_ERR


	)

174 
	mPOLL_PRI
,

175 
	#POLL_PRI
 
POLL_PRI


	)

176 
	mPOLL_HUP


177 
	#POLL_HUP
 
POLL_HUP


	)

183 #ifde‡
__USE_GNU


184 
	~<bôs/sigöfo-c⁄°s-¨ch.h
>

	@/usr/include/bits/signum.h

19 #i‚de‡
_BITS_SIGNUM_H


20 
	#_BITS_SIGNUM_H
 1

	)

22 #i‚de‡
_SIGNAL_H


26 
	~<bôs/signum-gíîic.h
>

31 
	#SIGSTKFLT
 16

	)

32 
	#SIGPWR
 30

	)

34 #unde‡
SIGBUS


35 
	#SIGBUS
 7

	)

36 #unde‡
SIGUSR1


37 
	#SIGUSR1
 10

	)

38 #unde‡
SIGUSR2


39 
	#SIGUSR2
 12

	)

40 #unde‡
SIGCHLD


41 
	#SIGCHLD
 17

	)

42 #unde‡
SIGCONT


43 
	#SIGCONT
 18

	)

44 #unde‡
SIGSTOP


45 
	#SIGSTOP
 19

	)

46 #unde‡
SIGTSTP


47 
	#SIGTSTP
 20

	)

48 #unde‡
SIGURG


49 
	#SIGURG
 23

	)

50 #unde‡
SIGPOLL


51 
	#SIGPOLL
 29

	)

52 #unde‡
SIGSYS


53 
	#SIGSYS
 31

	)

55 #unde‡
__SIGRTMAX


56 
	#__SIGRTMAX
 64

	)

	@/usr/include/bits/sigstack.h

19 #i‚de‡
_BITS_SIGSTACK_H


20 
	#_BITS_SIGSTACK_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


27 
	#MINSIGSTKSZ
 2048

	)

30 
	#SIGSTKSZ
 8192

	)

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	$±hªad_sigmask
 (
__how
,

32 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/ss_flags.h

19 #i‚de‡
_BITS_SS_FLAGS_H


20 
	#_BITS_SS_FLAGS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


29 
	mSS_ONSTACK
 = 1,

30 
	#SS_ONSTACK
 
SS_ONSTACK


	)

31 
	mSS_DISABLE


32 
	#SS_DISABLE
 
SS_DISABLE


	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

30 && !
deföed
 
__REDIRECT
 \

31 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

32 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

36 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


42 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

43 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

46 #ifdef 
__USE_ISOC99


47 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

48 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

49 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

50 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

53 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

54 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

55 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

59 #ifde‡
__USE_XOPEN2K8


60 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

61 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

64 #ifde‡
__USE_GNU


65 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

66 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

67 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

68 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

72 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


73 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

74 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

75 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


76 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

77 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

79 #i‡
__USE_FORTIFY_LEVEL
 > 1

80 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

82 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

84 #ifde‡
__USE_XOPEN2K8


85 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

226 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

227 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

228 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

231 
__f‹tify_fun˘i⁄
 
__wur
 *

232 
	$gës
 (*
__°r
)

234 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

235  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

236  
	`__gës_w¨n
 (
__°r
);

237 
	}
}

240 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

241 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 *
	`__REDIRECT
 (
__fgës_Æüs
,

243 (*
__ª°ri˘
 
__s
, 
__n
,

244 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

245 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

246 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

247 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

248 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

251 
__f‹tify_fun˘i⁄
 
__wur
 *

252 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

254 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

256 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

257  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

259 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

260  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

262  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

263 
	}
}

265 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

266 
size_t
 
__size
, size_à
__n
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

268 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

269 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

270 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

271 
‰ód
Ë
__wur
;

272 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

273 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

274 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
),

276 
__‰ód_chk
)

277 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

280 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


281 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
)

284 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

286 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

287 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

288 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

289  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

291 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

292  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

294  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

295 
	}
}

297 #ifde‡
__USE_GNU


298 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

299 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

300 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

301 (*
__ª°ri˘
 
__s
, 
__n
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

303 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

304 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

305 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

306 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

309 
__f‹tify_fun˘i⁄
 
__wur
 *

310 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

312 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

314 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

315  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

317 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

318  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

320  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

321 
	}
}

324 #ifde‡
__USE_MISC


325 #unde‡
‰ód_u∆ocked


326 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

327 
size_t
 
__size
, size_à
__n
,

328 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

329 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

330 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

331 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

332 
‰ód_u∆ocked
Ë
__wur
;

333 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

334 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

335 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
),

337 
__‰ód_u∆ocked_chk
)

338 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

341 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


342 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

343 
FILE
 *
__ª°ri˘
 
__°ªam
)

345 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

347 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

348 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

349 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

350  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

351 
__°ªam
);

353 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

354  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

355 
__°ªam
);

358 #ifde‡
__USE_EXTERN_INLINES


359 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

360 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

361 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

362 && 
__size
 * 
__n
 <= 8)

364 
size_t
 
__˙t
 = 
__size
 * 
__n
;

365 *
__˝å
 = (*Ë
__±r
;

366 i‡(
__˙t
 == 0)

369 ; 
__˙t
 > 0; --__cnt)

371 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

372 i‡(
__c
 =
EOF
)

374 *
__˝å
++ = 
__c
;

376  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

379  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

380 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 #ifde‡
__USE_GNU


28 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

31 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

32 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 #i‡!
__GNUC_PREREQ
 (5,0)

26 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

30 
__f‹tify_fun˘i⁄
 *

31 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

32 
size_t
 
__Àn
))

34  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

35 
	}
}

37 
__f‹tify_fun˘i⁄
 *

38 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

40  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

41 
	}
}

43 #ifde‡
__USE_GNU


44 
__f‹tify_fun˘i⁄
 *

45 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

46 
size_t
 
__Àn
))

48  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

49 
	}
}

58 
__f‹tify_fun˘i⁄
 *

59 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

63 #i‡!
	`__GNUC_PREREQ
 (5,0)

64 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

65 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

67 
	`__w¨n_mem£t_zîo_Àn
 ();

68  
__de°
;

71  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

72 
	}
}

74 #ifde‡
__USE_MISC


75 
	~<bôs/°rögs_f‹tifõd.h
>

77 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

78 
__THROW
 
	`__n⁄nuŒ
 ((1));

80 
__f‹tify_fun˘i⁄
 

81 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

83 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__bos0
 (__dest));

84 
	}
}

87 
__f‹tify_fun˘i⁄
 *

88 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

90  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

91 
	}
}

93 #ifde‡
__USE_GNU


94 
__f‹tify_fun˘i⁄
 *

95 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

97  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

98 
	}
}

102 
__f‹tify_fun˘i⁄
 *

103 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

104 
size_t
 
__Àn
))

106  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

107 
	}
}

110 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

111 
size_t
 
__de°Àn
Ë
__THROW
;

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

125 
__f‹tify_fun˘i⁄
 *

126 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

128  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

129 
	}
}

132 
__f‹tify_fun˘i⁄
 *

133 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__Àn
))

136  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

137 
	}
}

	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__f‹tify_fun˘i⁄
 

29 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

31 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

13 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

14 
	#SYS_ac˘
 
__NR_ac˘


	)

15 
	#SYS_add_key
 
__NR_add_key


	)

16 
	#SYS_adjtimex
 
__NR_adjtimex


	)

17 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

18 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

19 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

20 
	#SYS_bdÊush
 
__NR_bdÊush


	)

21 
	#SYS_böd
 
__NR_böd


	)

22 
	#SYS_bpf
 
__NR_bpf


	)

23 
	#SYS_bªak
 
__NR_bªak


	)

24 
	#SYS_brk
 
__NR_brk


	)

25 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

26 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

27 
	#SYS_chdú
 
__NR_chdú


	)

28 
	#SYS_chmod
 
__NR_chmod


	)

29 
	#SYS_chown
 
__NR_chown


	)

30 
	#SYS_chown32
 
__NR_chown32


	)

31 
	#SYS_chroŸ
 
__NR_chroŸ


	)

32 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

33 
	#SYS_˛ock_adjtime64
 
__NR_˛ock_adjtime64


	)

34 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

35 
	#SYS_˛ock_gëªs_time64
 
__NR_˛ock_gëªs_time64


	)

36 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

37 
	#SYS_˛ock_gëtime64
 
__NR_˛ock_gëtime64


	)

38 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

39 
	#SYS_˛ock_«no¶ìp_time64
 
__NR_˛ock_«no¶ìp_time64


	)

40 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

41 
	#SYS_˛ock_£âime64
 
__NR_˛ock_£âime64


	)

42 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

43 
	#SYS_˛⁄e3
 
__NR_˛⁄e3


	)

44 
	#SYS_˛o£
 
__NR_˛o£


	)

45 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

46 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

47 
	#SYS_¸ót
 
__NR_¸ót


	)

48 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

49 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

50 
	#SYS_dup
 
__NR_dup


	)

51 
	#SYS_dup2
 
__NR_dup2


	)

52 
	#SYS_dup3
 
__NR_dup3


	)

53 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

54 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

55 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

56 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

57 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

58 
	#SYS_evítfd
 
__NR_evítfd


	)

59 
	#SYS_evítfd2
 
__NR_evítfd2


	)

60 
	#SYS_execve
 
__NR_execve


	)

61 
	#SYS_execvót
 
__NR_execvót


	)

62 
	#SYS_exô
 
__NR_exô


	)

63 
	#SYS_exô_group
 
__NR_exô_group


	)

64 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

65 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

66 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

67 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

68 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

69 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

70 
	#SYS_fchdú
 
__NR_fchdú


	)

71 
	#SYS_fchmod
 
__NR_fchmod


	)

72 
	#SYS_fchmod©
 
__NR_fchmod©


	)

73 
	#SYS_fchown
 
__NR_fchown


	)

74 
	#SYS_fchown32
 
__NR_fchown32


	)

75 
	#SYS_fchow«t
 
__NR_fchow«t


	)

76 
	#SYS_f˙é
 
__NR_f˙é


	)

77 
	#SYS_f˙é64
 
__NR_f˙é64


	)

78 
	#SYS_fd©async
 
__NR_fd©async


	)

79 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

80 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

81 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

82 
	#SYS_Êock
 
__NR_Êock


	)

83 
	#SYS_f‹k
 
__NR_f‹k


	)

84 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

85 
	#SYS_fsc⁄fig
 
__NR_fsc⁄fig


	)

86 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

87 
	#SYS_fsmou¡
 
__NR_fsmou¡


	)

88 
	#SYS_fs›í
 
__NR_fs›í


	)

89 
	#SYS_f•ick
 
__NR_f•ick


	)

90 
	#SYS_f°©
 
__NR_f°©


	)

91 
	#SYS_f°©64
 
__NR_f°©64


	)

92 
	#SYS_f°©©64
 
__NR_f°©©64


	)

93 
	#SYS_f°©fs
 
__NR_f°©fs


	)

94 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

95 
	#SYS_fsync
 
__NR_fsync


	)

96 
	#SYS_·ime
 
__NR_·ime


	)

97 
	#SYS_·runˇã
 
__NR_·runˇã


	)

98 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

99 
	#SYS_fuãx
 
__NR_fuãx


	)

100 
	#SYS_fuãx_time64
 
__NR_fuãx_time64


	)

101 
	#SYS_futimeßt
 
__NR_futimeßt


	)

102 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

103 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

104 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

105 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

106 
	#SYS_gë˝u
 
__NR_gë˝u


	)

107 
	#SYS_gëcwd
 
__NR_gëcwd


	)

108 
	#SYS_gëdíts
 
__NR_gëdíts


	)

109 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

110 
	#SYS_gëegid
 
__NR_gëegid


	)

111 
	#SYS_gëegid32
 
__NR_gëegid32


	)

112 
	#SYS_gëeuid
 
__NR_gëeuid


	)

113 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

114 
	#SYS_gëgid
 
__NR_gëgid


	)

115 
	#SYS_gëgid32
 
__NR_gëgid32


	)

116 
	#SYS_gëgroups
 
__NR_gëgroups


	)

117 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

118 
	#SYS_gëôimî
 
__NR_gëôimî


	)

119 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

120 
	#SYS_gëpgid
 
__NR_gëpgid


	)

121 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

122 
	#SYS_gëpid
 
__NR_gëpid


	)

123 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

124 
	#SYS_gëµid
 
__NR_gëµid


	)

125 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

126 
	#SYS_gëøndom
 
__NR_gëøndom


	)

127 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

128 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

129 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

130 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

131 
	#SYS_gëæimô
 
__NR_gëæimô


	)

132 
	#SYS_gërußge
 
__NR_gërußge


	)

133 
	#SYS_gësid
 
__NR_gësid


	)

134 
	#SYS_gësock«me
 
__NR_gësock«me


	)

135 
	#SYS_gësock›t
 
__NR_gësock›t


	)

136 
	#SYS_gëtid
 
__NR_gëtid


	)

137 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

138 
	#SYS_gëuid
 
__NR_gëuid


	)

139 
	#SYS_gëuid32
 
__NR_gëuid32


	)

140 
	#SYS_gëx©å
 
__NR_gëx©å


	)

141 
	#SYS_gây
 
__NR_gây


	)

142 
	#SYS_idÀ
 
__NR_idÀ


	)

143 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

144 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

145 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

146 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

147 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

148 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

149 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

150 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

151 
	#SYS_io_pgëevíts
 
__NR_io_pgëevíts


	)

152 
	#SYS_io_pgëevíts_time64
 
__NR_io_pgëevíts_time64


	)

153 
	#SYS_io_£tup
 
__NR_io_£tup


	)

154 
	#SYS_io_submô
 
__NR_io_submô


	)

155 
	#SYS_io_urög_íãr
 
__NR_io_urög_íãr


	)

156 
	#SYS_io_urög_ªgi°î
 
__NR_io_urög_ªgi°î


	)

157 
	#SYS_io_urög_£tup
 
__NR_io_urög_£tup


	)

158 
	#SYS_io˘l
 
__NR_io˘l


	)

159 
	#SYS_i›îm
 
__NR_i›îm


	)

160 
	#SYS_i›l
 
__NR_i›l


	)

161 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

162 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

163 
	#SYS_ùc
 
__NR_ùc


	)

164 
	#SYS_kcmp
 
__NR_kcmp


	)

165 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

166 
	#SYS_key˘l
 
__NR_key˘l


	)

167 
	#SYS_kûl
 
__NR_kûl


	)

168 
	#SYS_lchown
 
__NR_lchown


	)

169 
	#SYS_lchown32
 
__NR_lchown32


	)

170 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

171 
	#SYS_lök
 
__NR_lök


	)

172 
	#SYS_lök©
 
__NR_lök©


	)

173 
	#SYS_li°í
 
__NR_li°í


	)

174 
	#SYS_li°x©å
 
__NR_li°x©å


	)

175 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

176 
	#SYS_lock
 
__NR_lock


	)

177 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

178 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

179 
	#SYS_l£ek
 
__NR_l£ek


	)

180 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

181 
	#SYS_l°©
 
__NR_l°©


	)

182 
	#SYS_l°©64
 
__NR_l°©64


	)

183 
	#SYS_madvi£
 
__NR_madvi£


	)

184 
	#SYS_mböd
 
__NR_mböd


	)

185 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

186 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

187 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

188 
	#SYS_möc‹e
 
__NR_möc‹e


	)

189 
	#SYS_mkdú
 
__NR_mkdú


	)

190 
	#SYS_mkdú©
 
__NR_mkdú©


	)

191 
	#SYS_mknod
 
__NR_mknod


	)

192 
	#SYS_mknod©
 
__NR_mknod©


	)

193 
	#SYS_mlock
 
__NR_mlock


	)

194 
	#SYS_mlock2
 
__NR_mlock2


	)

195 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

196 
	#SYS_mm≠
 
__NR_mm≠


	)

197 
	#SYS_mm≠2
 
__NR_mm≠2


	)

198 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

199 
	#SYS_mou¡
 
__NR_mou¡


	)

200 
	#SYS_move_mou¡
 
__NR_move_mou¡


	)

201 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

202 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

203 
	#SYS_mpx
 
__NR_mpx


	)

204 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

205 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

206 
	#SYS_mq_›í
 
__NR_mq_›í


	)

207 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

208 
	#SYS_mq_timedª˚ive_time64
 
__NR_mq_timedª˚ive_time64


	)

209 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

210 
	#SYS_mq_timed£nd_time64
 
__NR_mq_timed£nd_time64


	)

211 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

212 
	#SYS_mªm≠
 
__NR_mªm≠


	)

213 
	#SYS_msg˘l
 
__NR_msg˘l


	)

214 
	#SYS_msggë
 
__NR_msggë


	)

215 
	#SYS_msgrcv
 
__NR_msgrcv


	)

216 
	#SYS_msg¢d
 
__NR_msg¢d


	)

217 
	#SYS_msync
 
__NR_msync


	)

218 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

219 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

220 
	#SYS_munm≠
 
__NR_munm≠


	)

221 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

222 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

223 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

224 
	#SYS_ni˚
 
__NR_ni˚


	)

225 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

226 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

227 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

228 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

229 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

230 
	#SYS_›í
 
__NR_›í


	)

231 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

232 
	#SYS_›í_åì
 
__NR_›í_åì


	)

233 
	#SYS_›í©
 
__NR_›í©


	)

234 
	#SYS_∑u£
 
__NR_∑u£


	)

235 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

236 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

237 
	#SYS_pidfd_›í
 
__NR_pidfd_›í


	)

238 
	#SYS_pidfd_£nd_sig«l
 
__NR_pidfd_£nd_sig«l


	)

239 
	#SYS_pùe
 
__NR_pùe


	)

240 
	#SYS_pùe2
 
__NR_pùe2


	)

241 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

242 
	#SYS_pkey_Æloc
 
__NR_pkey_Æloc


	)

243 
	#SYS_pkey_‰ì
 
__NR_pkey_‰ì


	)

244 
	#SYS_pkey_m¥Ÿe˘
 
__NR_pkey_m¥Ÿe˘


	)

245 
	#SYS_pﬁl
 
__NR_pﬁl


	)

246 
	#SYS_µﬁl
 
__NR_µﬁl


	)

247 
	#SYS_µﬁl_time64
 
__NR_µﬁl_time64


	)

248 
	#SYS_¥˘l
 
__NR_¥˘l


	)

249 
	#SYS_¥ód64
 
__NR_¥ód64


	)

250 
	#SYS_¥ódv
 
__NR_¥ódv


	)

251 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

252 
	#SYS_¥limô64
 
__NR_¥limô64


	)

253 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

254 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

255 
	#SYS_¥of
 
__NR_¥of


	)

256 
	#SYS_¥ofû
 
__NR_¥ofû


	)

257 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

258 
	#SYS_p£À˘6_time64
 
__NR_p£À˘6_time64


	)

259 
	#SYS_±ø˚
 
__NR_±ø˚


	)

260 
	#SYS_puçmsg
 
__NR_puçmsg


	)

261 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

262 
	#SYS_pwrôev
 
__NR_pwrôev


	)

263 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

264 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

265 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

266 
	#SYS_ªad
 
__NR_ªad


	)

267 
	#SYS_ªadahód
 
__NR_ªadahód


	)

268 
	#SYS_ªaddú
 
__NR_ªaddú


	)

269 
	#SYS_ªadlök
 
__NR_ªadlök


	)

270 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

271 
	#SYS_ªadv
 
__NR_ªadv


	)

272 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

273 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

274 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

275 
	#SYS_ªcvmmsg_time64
 
__NR_ªcvmmsg_time64


	)

276 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

277 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

278 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

279 
	#SYS_ª«me
 
__NR_ª«me


	)

280 
	#SYS_ª«mót
 
__NR_ª«mót


	)

281 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

282 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

283 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

284 
	#SYS_rmdú
 
__NR_rmdú


	)

285 
	#SYS_r£q
 
__NR_r£q


	)

286 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

287 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

288 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

289 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

290 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

291 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

292 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

293 
	#SYS_π_sigtimedwaô_time64
 
__NR_π_sigtimedwaô_time64


	)

294 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

295 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

296 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

297 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

298 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

299 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

300 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

301 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

302 
	#SYS_sched_º_gë_öãrvÆ_time64
 
__NR_sched_º_gë_öãrvÆ_time64


	)

303 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

304 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

305 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

306 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

307 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

308 
	#SYS_£ccomp
 
__NR_£ccomp


	)

309 
	#SYS_£À˘
 
__NR_£À˘


	)

310 
	#SYS_£m˘l
 
__NR_£m˘l


	)

311 
	#SYS_£mgë
 
__NR_£mgë


	)

312 
	#SYS_£mtimed›_time64
 
__NR_£mtimed›_time64


	)

313 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

314 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

315 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

316 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

317 
	#SYS_£ndto
 
__NR_£ndto


	)

318 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

319 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

320 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

321 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

322 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

323 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

324 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

325 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

326 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

327 
	#SYS_£tgid
 
__NR_£tgid


	)

328 
	#SYS_£tgid32
 
__NR_£tgid32


	)

329 
	#SYS_£tgroups
 
__NR_£tgroups


	)

330 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

331 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

332 
	#SYS_£tôimî
 
__NR_£tôimî


	)

333 
	#SYS_£äs
 
__NR_£äs


	)

334 
	#SYS_£çgid
 
__NR_£çgid


	)

335 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

336 
	#SYS_£åegid
 
__NR_£åegid


	)

337 
	#SYS_£åegid32
 
__NR_£åegid32


	)

338 
	#SYS_£åesgid
 
__NR_£åesgid


	)

339 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

340 
	#SYS_£åesuid
 
__NR_£åesuid


	)

341 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

342 
	#SYS_£åeuid
 
__NR_£åeuid


	)

343 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

344 
	#SYS_£ålimô
 
__NR_£ålimô


	)

345 
	#SYS_£tsid
 
__NR_£tsid


	)

346 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

347 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

348 
	#SYS_£tuid
 
__NR_£tuid


	)

349 
	#SYS_£tuid32
 
__NR_£tuid32


	)

350 
	#SYS_£tx©å
 
__NR_£tx©å


	)

351 
	#SYS_sgëmask
 
__NR_sgëmask


	)

352 
	#SYS_shm©
 
__NR_shm©


	)

353 
	#SYS_shm˘l
 
__NR_shm˘l


	)

354 
	#SYS_shmdt
 
__NR_shmdt


	)

355 
	#SYS_shmgë
 
__NR_shmgë


	)

356 
	#SYS_shutdown
 
__NR_shutdown


	)

357 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

358 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

359 
	#SYS_sig«l
 
__NR_sig«l


	)

360 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

361 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

362 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

363 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

364 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

365 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

366 
	#SYS_sockë
 
__NR_sockë


	)

367 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

368 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

369 
	#SYS_•li˚
 
__NR_•li˚


	)

370 
	#SYS_s£tmask
 
__NR_s£tmask


	)

371 
	#SYS_°©
 
__NR_°©


	)

372 
	#SYS_°©64
 
__NR_°©64


	)

373 
	#SYS_°©fs
 
__NR_°©fs


	)

374 
	#SYS_°©fs64
 
__NR_°©fs64


	)

375 
	#SYS_°©x
 
__NR_°©x


	)

376 
	#SYS_°ime
 
__NR_°ime


	)

377 
	#SYS_°ty
 
__NR_°ty


	)

378 
	#SYS_sw≠off
 
__NR_sw≠off


	)

379 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

380 
	#SYS_symlök
 
__NR_symlök


	)

381 
	#SYS_symlök©
 
__NR_symlök©


	)

382 
	#SYS_sync
 
__NR_sync


	)

383 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

384 
	#SYS_syncfs
 
__NR_syncfs


	)

385 
	#SYS_sysfs
 
__NR_sysfs


	)

386 
	#SYS_sysöfo
 
__NR_sysöfo


	)

387 
	#SYS_sy¶og
 
__NR_sy¶og


	)

388 
	#SYS_ãe
 
__NR_ãe


	)

389 
	#SYS_tgkûl
 
__NR_tgkûl


	)

390 
	#SYS_time
 
__NR_time


	)

391 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

392 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

393 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

394 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

395 
	#SYS_timî_gëtime64
 
__NR_timî_gëtime64


	)

396 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

397 
	#SYS_timî_£âime64
 
__NR_timî_£âime64


	)

398 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

399 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

400 
	#SYS_timîfd_gëtime64
 
__NR_timîfd_gëtime64


	)

401 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

402 
	#SYS_timîfd_£âime64
 
__NR_timîfd_£âime64


	)

403 
	#SYS_times
 
__NR_times


	)

404 
	#SYS_tkûl
 
__NR_tkûl


	)

405 
	#SYS_åunˇã
 
__NR_åunˇã


	)

406 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

407 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

408 
	#SYS_ulimô
 
__NR_ulimô


	)

409 
	#SYS_umask
 
__NR_umask


	)

410 
	#SYS_umou¡
 
__NR_umou¡


	)

411 
	#SYS_umou¡2
 
__NR_umou¡2


	)

412 
	#SYS_u«me
 
__NR_u«me


	)

413 
	#SYS_u∆ök
 
__NR_u∆ök


	)

414 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

415 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

416 
	#SYS_u£lib
 
__NR_u£lib


	)

417 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

418 
	#SYS_u°©
 
__NR_u°©


	)

419 
	#SYS_utime
 
__NR_utime


	)

420 
	#SYS_utimíßt
 
__NR_utimíßt


	)

421 
	#SYS_utimíßt_time64
 
__NR_utimíßt_time64


	)

422 
	#SYS_utimes
 
__NR_utimes


	)

423 
	#SYS_vf‹k
 
__NR_vf‹k


	)

424 
	#SYS_vh™gup
 
__NR_vh™gup


	)

425 
	#SYS_vm86
 
__NR_vm86


	)

426 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

427 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

428 
	#SYS_v£rvî
 
__NR_v£rvî


	)

429 
	#SYS_waô4
 
__NR_waô4


	)

430 
	#SYS_waôid
 
__NR_waôid


	)

431 
	#SYS_waôpid
 
__NR_waôpid


	)

432 
	#SYS_wrôe
 
__NR_wrôe


	)

433 
	#SYS_wrôev
 
__NR_wrôev


	)

435 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


436 
	#SYS__sys˘l
 
__NR__sys˘l


	)

437 
	#SYS_ac˚±
 
__NR_ac˚±


	)

438 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

439 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

440 
	#SYS_ac˘
 
__NR_ac˘


	)

441 
	#SYS_add_key
 
__NR_add_key


	)

442 
	#SYS_adjtimex
 
__NR_adjtimex


	)

443 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

444 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

445 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

446 
	#SYS_böd
 
__NR_böd


	)

447 
	#SYS_bpf
 
__NR_bpf


	)

448 
	#SYS_brk
 
__NR_brk


	)

449 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

450 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

451 
	#SYS_chdú
 
__NR_chdú


	)

452 
	#SYS_chmod
 
__NR_chmod


	)

453 
	#SYS_chown
 
__NR_chown


	)

454 
	#SYS_chroŸ
 
__NR_chroŸ


	)

455 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

456 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

457 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

458 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

459 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

460 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

461 
	#SYS_˛⁄e3
 
__NR_˛⁄e3


	)

462 
	#SYS_˛o£
 
__NR_˛o£


	)

463 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

464 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

465 
	#SYS_¸ót
 
__NR_¸ót


	)

466 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

467 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

468 
	#SYS_dup
 
__NR_dup


	)

469 
	#SYS_dup2
 
__NR_dup2


	)

470 
	#SYS_dup3
 
__NR_dup3


	)

471 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

472 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

473 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

474 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

475 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

476 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

477 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

478 
	#SYS_evítfd
 
__NR_evítfd


	)

479 
	#SYS_evítfd2
 
__NR_evítfd2


	)

480 
	#SYS_execve
 
__NR_execve


	)

481 
	#SYS_execvót
 
__NR_execvót


	)

482 
	#SYS_exô
 
__NR_exô


	)

483 
	#SYS_exô_group
 
__NR_exô_group


	)

484 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

485 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

486 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

487 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

488 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

489 
	#SYS_fchdú
 
__NR_fchdú


	)

490 
	#SYS_fchmod
 
__NR_fchmod


	)

491 
	#SYS_fchmod©
 
__NR_fchmod©


	)

492 
	#SYS_fchown
 
__NR_fchown


	)

493 
	#SYS_fchow«t
 
__NR_fchow«t


	)

494 
	#SYS_f˙é
 
__NR_f˙é


	)

495 
	#SYS_fd©async
 
__NR_fd©async


	)

496 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

497 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

498 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

499 
	#SYS_Êock
 
__NR_Êock


	)

500 
	#SYS_f‹k
 
__NR_f‹k


	)

501 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

502 
	#SYS_fsc⁄fig
 
__NR_fsc⁄fig


	)

503 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

504 
	#SYS_fsmou¡
 
__NR_fsmou¡


	)

505 
	#SYS_fs›í
 
__NR_fs›í


	)

506 
	#SYS_f•ick
 
__NR_f•ick


	)

507 
	#SYS_f°©
 
__NR_f°©


	)

508 
	#SYS_f°©fs
 
__NR_f°©fs


	)

509 
	#SYS_fsync
 
__NR_fsync


	)

510 
	#SYS_·runˇã
 
__NR_·runˇã


	)

511 
	#SYS_fuãx
 
__NR_fuãx


	)

512 
	#SYS_futimeßt
 
__NR_futimeßt


	)

513 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

514 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

515 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

516 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

517 
	#SYS_gë˝u
 
__NR_gë˝u


	)

518 
	#SYS_gëcwd
 
__NR_gëcwd


	)

519 
	#SYS_gëdíts
 
__NR_gëdíts


	)

520 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

521 
	#SYS_gëegid
 
__NR_gëegid


	)

522 
	#SYS_gëeuid
 
__NR_gëeuid


	)

523 
	#SYS_gëgid
 
__NR_gëgid


	)

524 
	#SYS_gëgroups
 
__NR_gëgroups


	)

525 
	#SYS_gëôimî
 
__NR_gëôimî


	)

526 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

527 
	#SYS_gëpgid
 
__NR_gëpgid


	)

528 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

529 
	#SYS_gëpid
 
__NR_gëpid


	)

530 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

531 
	#SYS_gëµid
 
__NR_gëµid


	)

532 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

533 
	#SYS_gëøndom
 
__NR_gëøndom


	)

534 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

535 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

536 
	#SYS_gëæimô
 
__NR_gëæimô


	)

537 
	#SYS_gërußge
 
__NR_gërußge


	)

538 
	#SYS_gësid
 
__NR_gësid


	)

539 
	#SYS_gësock«me
 
__NR_gësock«me


	)

540 
	#SYS_gësock›t
 
__NR_gësock›t


	)

541 
	#SYS_gëtid
 
__NR_gëtid


	)

542 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

543 
	#SYS_gëuid
 
__NR_gëuid


	)

544 
	#SYS_gëx©å
 
__NR_gëx©å


	)

545 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

546 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

547 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

548 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

549 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

550 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

551 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

552 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

553 
	#SYS_io_pgëevíts
 
__NR_io_pgëevíts


	)

554 
	#SYS_io_£tup
 
__NR_io_£tup


	)

555 
	#SYS_io_submô
 
__NR_io_submô


	)

556 
	#SYS_io_urög_íãr
 
__NR_io_urög_íãr


	)

557 
	#SYS_io_urög_ªgi°î
 
__NR_io_urög_ªgi°î


	)

558 
	#SYS_io_urög_£tup
 
__NR_io_urög_£tup


	)

559 
	#SYS_io˘l
 
__NR_io˘l


	)

560 
	#SYS_i›îm
 
__NR_i›îm


	)

561 
	#SYS_i›l
 
__NR_i›l


	)

562 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

563 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

564 
	#SYS_kcmp
 
__NR_kcmp


	)

565 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

566 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

567 
	#SYS_key˘l
 
__NR_key˘l


	)

568 
	#SYS_kûl
 
__NR_kûl


	)

569 
	#SYS_lchown
 
__NR_lchown


	)

570 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

571 
	#SYS_lök
 
__NR_lök


	)

572 
	#SYS_lök©
 
__NR_lök©


	)

573 
	#SYS_li°í
 
__NR_li°í


	)

574 
	#SYS_li°x©å
 
__NR_li°x©å


	)

575 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

576 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

577 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

578 
	#SYS_l£ek
 
__NR_l£ek


	)

579 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

580 
	#SYS_l°©
 
__NR_l°©


	)

581 
	#SYS_madvi£
 
__NR_madvi£


	)

582 
	#SYS_mböd
 
__NR_mböd


	)

583 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

584 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

585 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

586 
	#SYS_möc‹e
 
__NR_möc‹e


	)

587 
	#SYS_mkdú
 
__NR_mkdú


	)

588 
	#SYS_mkdú©
 
__NR_mkdú©


	)

589 
	#SYS_mknod
 
__NR_mknod


	)

590 
	#SYS_mknod©
 
__NR_mknod©


	)

591 
	#SYS_mlock
 
__NR_mlock


	)

592 
	#SYS_mlock2
 
__NR_mlock2


	)

593 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

594 
	#SYS_mm≠
 
__NR_mm≠


	)

595 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

596 
	#SYS_mou¡
 
__NR_mou¡


	)

597 
	#SYS_move_mou¡
 
__NR_move_mou¡


	)

598 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

599 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

600 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

601 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

602 
	#SYS_mq_›í
 
__NR_mq_›í


	)

603 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

604 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

605 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

606 
	#SYS_mªm≠
 
__NR_mªm≠


	)

607 
	#SYS_msg˘l
 
__NR_msg˘l


	)

608 
	#SYS_msggë
 
__NR_msggë


	)

609 
	#SYS_msgrcv
 
__NR_msgrcv


	)

610 
	#SYS_msg¢d
 
__NR_msg¢d


	)

611 
	#SYS_msync
 
__NR_msync


	)

612 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

613 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

614 
	#SYS_munm≠
 
__NR_munm≠


	)

615 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

616 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

617 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

618 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

619 
	#SYS_›í
 
__NR_›í


	)

620 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

621 
	#SYS_›í_åì
 
__NR_›í_åì


	)

622 
	#SYS_›í©
 
__NR_›í©


	)

623 
	#SYS_∑u£
 
__NR_∑u£


	)

624 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

625 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

626 
	#SYS_pidfd_›í
 
__NR_pidfd_›í


	)

627 
	#SYS_pidfd_£nd_sig«l
 
__NR_pidfd_£nd_sig«l


	)

628 
	#SYS_pùe
 
__NR_pùe


	)

629 
	#SYS_pùe2
 
__NR_pùe2


	)

630 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

631 
	#SYS_pkey_Æloc
 
__NR_pkey_Æloc


	)

632 
	#SYS_pkey_‰ì
 
__NR_pkey_‰ì


	)

633 
	#SYS_pkey_m¥Ÿe˘
 
__NR_pkey_m¥Ÿe˘


	)

634 
	#SYS_pﬁl
 
__NR_pﬁl


	)

635 
	#SYS_µﬁl
 
__NR_µﬁl


	)

636 
	#SYS_¥˘l
 
__NR_¥˘l


	)

637 
	#SYS_¥ód64
 
__NR_¥ód64


	)

638 
	#SYS_¥ódv
 
__NR_¥ódv


	)

639 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

640 
	#SYS_¥limô64
 
__NR_¥limô64


	)

641 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

642 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

643 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

644 
	#SYS_±ø˚
 
__NR_±ø˚


	)

645 
	#SYS_puçmsg
 
__NR_puçmsg


	)

646 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

647 
	#SYS_pwrôev
 
__NR_pwrôev


	)

648 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

649 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

650 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

651 
	#SYS_ªad
 
__NR_ªad


	)

652 
	#SYS_ªadahód
 
__NR_ªadahód


	)

653 
	#SYS_ªadlök
 
__NR_ªadlök


	)

654 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

655 
	#SYS_ªadv
 
__NR_ªadv


	)

656 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

657 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

658 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

659 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

660 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

661 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

662 
	#SYS_ª«me
 
__NR_ª«me


	)

663 
	#SYS_ª«mót
 
__NR_ª«mót


	)

664 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

665 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

666 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

667 
	#SYS_rmdú
 
__NR_rmdú


	)

668 
	#SYS_r£q
 
__NR_r£q


	)

669 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

670 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

671 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

672 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

673 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

674 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

675 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

676 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

677 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

678 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

679 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

680 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

681 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

682 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

683 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

684 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

685 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

686 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

687 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

688 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

689 
	#SYS_£ccomp
 
__NR_£ccomp


	)

690 
	#SYS_£curôy
 
__NR_£curôy


	)

691 
	#SYS_£À˘
 
__NR_£À˘


	)

692 
	#SYS_£m˘l
 
__NR_£m˘l


	)

693 
	#SYS_£mgë
 
__NR_£mgë


	)

694 
	#SYS_£m›
 
__NR_£m›


	)

695 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

696 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

697 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

698 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

699 
	#SYS_£ndto
 
__NR_£ndto


	)

700 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

701 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

702 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

703 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

704 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

705 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

706 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

707 
	#SYS_£tgid
 
__NR_£tgid


	)

708 
	#SYS_£tgroups
 
__NR_£tgroups


	)

709 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

710 
	#SYS_£tôimî
 
__NR_£tôimî


	)

711 
	#SYS_£äs
 
__NR_£äs


	)

712 
	#SYS_£çgid
 
__NR_£çgid


	)

713 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

714 
	#SYS_£åegid
 
__NR_£åegid


	)

715 
	#SYS_£åesgid
 
__NR_£åesgid


	)

716 
	#SYS_£åesuid
 
__NR_£åesuid


	)

717 
	#SYS_£åeuid
 
__NR_£åeuid


	)

718 
	#SYS_£ålimô
 
__NR_£ålimô


	)

719 
	#SYS_£tsid
 
__NR_£tsid


	)

720 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

721 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

722 
	#SYS_£tuid
 
__NR_£tuid


	)

723 
	#SYS_£tx©å
 
__NR_£tx©å


	)

724 
	#SYS_shm©
 
__NR_shm©


	)

725 
	#SYS_shm˘l
 
__NR_shm˘l


	)

726 
	#SYS_shmdt
 
__NR_shmdt


	)

727 
	#SYS_shmgë
 
__NR_shmgë


	)

728 
	#SYS_shutdown
 
__NR_shutdown


	)

729 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

730 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

731 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

732 
	#SYS_sockë
 
__NR_sockë


	)

733 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

734 
	#SYS_•li˚
 
__NR_•li˚


	)

735 
	#SYS_°©
 
__NR_°©


	)

736 
	#SYS_°©fs
 
__NR_°©fs


	)

737 
	#SYS_°©x
 
__NR_°©x


	)

738 
	#SYS_sw≠off
 
__NR_sw≠off


	)

739 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

740 
	#SYS_symlök
 
__NR_symlök


	)

741 
	#SYS_symlök©
 
__NR_symlök©


	)

742 
	#SYS_sync
 
__NR_sync


	)

743 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

744 
	#SYS_syncfs
 
__NR_syncfs


	)

745 
	#SYS_sysfs
 
__NR_sysfs


	)

746 
	#SYS_sysöfo
 
__NR_sysöfo


	)

747 
	#SYS_sy¶og
 
__NR_sy¶og


	)

748 
	#SYS_ãe
 
__NR_ãe


	)

749 
	#SYS_tgkûl
 
__NR_tgkûl


	)

750 
	#SYS_time
 
__NR_time


	)

751 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

752 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

753 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

754 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

755 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

756 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

757 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

758 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

759 
	#SYS_times
 
__NR_times


	)

760 
	#SYS_tkûl
 
__NR_tkûl


	)

761 
	#SYS_åunˇã
 
__NR_åunˇã


	)

762 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

763 
	#SYS_umask
 
__NR_umask


	)

764 
	#SYS_umou¡2
 
__NR_umou¡2


	)

765 
	#SYS_u«me
 
__NR_u«me


	)

766 
	#SYS_u∆ök
 
__NR_u∆ök


	)

767 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

768 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

769 
	#SYS_u£lib
 
__NR_u£lib


	)

770 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

771 
	#SYS_u°©
 
__NR_u°©


	)

772 
	#SYS_utime
 
__NR_utime


	)

773 
	#SYS_utimíßt
 
__NR_utimíßt


	)

774 
	#SYS_utimes
 
__NR_utimes


	)

775 
	#SYS_vf‹k
 
__NR_vf‹k


	)

776 
	#SYS_vh™gup
 
__NR_vh™gup


	)

777 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

778 
	#SYS_v£rvî
 
__NR_v£rvî


	)

779 
	#SYS_waô4
 
__NR_waô4


	)

780 
	#SYS_waôid
 
__NR_waôid


	)

781 
	#SYS_wrôe
 
__NR_wrôe


	)

782 
	#SYS_wrôev
 
__NR_wrôev


	)

784 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


785 
	#SYS_ac˚±
 
__NR_ac˚±


	)

786 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

787 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

788 
	#SYS_ac˘
 
__NR_ac˘


	)

789 
	#SYS_add_key
 
__NR_add_key


	)

790 
	#SYS_adjtimex
 
__NR_adjtimex


	)

791 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

792 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

793 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

794 
	#SYS_böd
 
__NR_böd


	)

795 
	#SYS_bpf
 
__NR_bpf


	)

796 
	#SYS_brk
 
__NR_brk


	)

797 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

798 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

799 
	#SYS_chdú
 
__NR_chdú


	)

800 
	#SYS_chmod
 
__NR_chmod


	)

801 
	#SYS_chown
 
__NR_chown


	)

802 
	#SYS_chroŸ
 
__NR_chroŸ


	)

803 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

804 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

805 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

806 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

807 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

808 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

809 
	#SYS_˛⁄e3
 
__NR_˛⁄e3


	)

810 
	#SYS_˛o£
 
__NR_˛o£


	)

811 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

812 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

813 
	#SYS_¸ót
 
__NR_¸ót


	)

814 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

815 
	#SYS_dup
 
__NR_dup


	)

816 
	#SYS_dup2
 
__NR_dup2


	)

817 
	#SYS_dup3
 
__NR_dup3


	)

818 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

819 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

820 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

821 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

822 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

823 
	#SYS_evítfd
 
__NR_evítfd


	)

824 
	#SYS_evítfd2
 
__NR_evítfd2


	)

825 
	#SYS_execve
 
__NR_execve


	)

826 
	#SYS_execvót
 
__NR_execvót


	)

827 
	#SYS_exô
 
__NR_exô


	)

828 
	#SYS_exô_group
 
__NR_exô_group


	)

829 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

830 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

831 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

832 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

833 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

834 
	#SYS_fchdú
 
__NR_fchdú


	)

835 
	#SYS_fchmod
 
__NR_fchmod


	)

836 
	#SYS_fchmod©
 
__NR_fchmod©


	)

837 
	#SYS_fchown
 
__NR_fchown


	)

838 
	#SYS_fchow«t
 
__NR_fchow«t


	)

839 
	#SYS_f˙é
 
__NR_f˙é


	)

840 
	#SYS_fd©async
 
__NR_fd©async


	)

841 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

842 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

843 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

844 
	#SYS_Êock
 
__NR_Êock


	)

845 
	#SYS_f‹k
 
__NR_f‹k


	)

846 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

847 
	#SYS_fsc⁄fig
 
__NR_fsc⁄fig


	)

848 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

849 
	#SYS_fsmou¡
 
__NR_fsmou¡


	)

850 
	#SYS_fs›í
 
__NR_fs›í


	)

851 
	#SYS_f•ick
 
__NR_f•ick


	)

852 
	#SYS_f°©
 
__NR_f°©


	)

853 
	#SYS_f°©fs
 
__NR_f°©fs


	)

854 
	#SYS_fsync
 
__NR_fsync


	)

855 
	#SYS_·runˇã
 
__NR_·runˇã


	)

856 
	#SYS_fuãx
 
__NR_fuãx


	)

857 
	#SYS_futimeßt
 
__NR_futimeßt


	)

858 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

859 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

860 
	#SYS_gë˝u
 
__NR_gë˝u


	)

861 
	#SYS_gëcwd
 
__NR_gëcwd


	)

862 
	#SYS_gëdíts
 
__NR_gëdíts


	)

863 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

864 
	#SYS_gëegid
 
__NR_gëegid


	)

865 
	#SYS_gëeuid
 
__NR_gëeuid


	)

866 
	#SYS_gëgid
 
__NR_gëgid


	)

867 
	#SYS_gëgroups
 
__NR_gëgroups


	)

868 
	#SYS_gëôimî
 
__NR_gëôimî


	)

869 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

870 
	#SYS_gëpgid
 
__NR_gëpgid


	)

871 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

872 
	#SYS_gëpid
 
__NR_gëpid


	)

873 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

874 
	#SYS_gëµid
 
__NR_gëµid


	)

875 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

876 
	#SYS_gëøndom
 
__NR_gëøndom


	)

877 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

878 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

879 
	#SYS_gëæimô
 
__NR_gëæimô


	)

880 
	#SYS_gërußge
 
__NR_gërußge


	)

881 
	#SYS_gësid
 
__NR_gësid


	)

882 
	#SYS_gësock«me
 
__NR_gësock«me


	)

883 
	#SYS_gësock›t
 
__NR_gësock›t


	)

884 
	#SYS_gëtid
 
__NR_gëtid


	)

885 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

886 
	#SYS_gëuid
 
__NR_gëuid


	)

887 
	#SYS_gëx©å
 
__NR_gëx©å


	)

888 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

889 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

890 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

891 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

892 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

893 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

894 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

895 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

896 
	#SYS_io_pgëevíts
 
__NR_io_pgëevíts


	)

897 
	#SYS_io_£tup
 
__NR_io_£tup


	)

898 
	#SYS_io_submô
 
__NR_io_submô


	)

899 
	#SYS_io_urög_íãr
 
__NR_io_urög_íãr


	)

900 
	#SYS_io_urög_ªgi°î
 
__NR_io_urög_ªgi°î


	)

901 
	#SYS_io_urög_£tup
 
__NR_io_urög_£tup


	)

902 
	#SYS_io˘l
 
__NR_io˘l


	)

903 
	#SYS_i›îm
 
__NR_i›îm


	)

904 
	#SYS_i›l
 
__NR_i›l


	)

905 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

906 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

907 
	#SYS_kcmp
 
__NR_kcmp


	)

908 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

909 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

910 
	#SYS_key˘l
 
__NR_key˘l


	)

911 
	#SYS_kûl
 
__NR_kûl


	)

912 
	#SYS_lchown
 
__NR_lchown


	)

913 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

914 
	#SYS_lök
 
__NR_lök


	)

915 
	#SYS_lök©
 
__NR_lök©


	)

916 
	#SYS_li°í
 
__NR_li°í


	)

917 
	#SYS_li°x©å
 
__NR_li°x©å


	)

918 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

919 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

920 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

921 
	#SYS_l£ek
 
__NR_l£ek


	)

922 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

923 
	#SYS_l°©
 
__NR_l°©


	)

924 
	#SYS_madvi£
 
__NR_madvi£


	)

925 
	#SYS_mböd
 
__NR_mböd


	)

926 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

927 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

928 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

929 
	#SYS_möc‹e
 
__NR_möc‹e


	)

930 
	#SYS_mkdú
 
__NR_mkdú


	)

931 
	#SYS_mkdú©
 
__NR_mkdú©


	)

932 
	#SYS_mknod
 
__NR_mknod


	)

933 
	#SYS_mknod©
 
__NR_mknod©


	)

934 
	#SYS_mlock
 
__NR_mlock


	)

935 
	#SYS_mlock2
 
__NR_mlock2


	)

936 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

937 
	#SYS_mm≠
 
__NR_mm≠


	)

938 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

939 
	#SYS_mou¡
 
__NR_mou¡


	)

940 
	#SYS_move_mou¡
 
__NR_move_mou¡


	)

941 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

942 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

943 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

944 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

945 
	#SYS_mq_›í
 
__NR_mq_›í


	)

946 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

947 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

948 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

949 
	#SYS_mªm≠
 
__NR_mªm≠


	)

950 
	#SYS_msg˘l
 
__NR_msg˘l


	)

951 
	#SYS_msggë
 
__NR_msggë


	)

952 
	#SYS_msgrcv
 
__NR_msgrcv


	)

953 
	#SYS_msg¢d
 
__NR_msg¢d


	)

954 
	#SYS_msync
 
__NR_msync


	)

955 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

956 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

957 
	#SYS_munm≠
 
__NR_munm≠


	)

958 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

959 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

960 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

961 
	#SYS_›í
 
__NR_›í


	)

962 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

963 
	#SYS_›í_åì
 
__NR_›í_åì


	)

964 
	#SYS_›í©
 
__NR_›í©


	)

965 
	#SYS_∑u£
 
__NR_∑u£


	)

966 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

967 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

968 
	#SYS_pidfd_›í
 
__NR_pidfd_›í


	)

969 
	#SYS_pidfd_£nd_sig«l
 
__NR_pidfd_£nd_sig«l


	)

970 
	#SYS_pùe
 
__NR_pùe


	)

971 
	#SYS_pùe2
 
__NR_pùe2


	)

972 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

973 
	#SYS_pkey_Æloc
 
__NR_pkey_Æloc


	)

974 
	#SYS_pkey_‰ì
 
__NR_pkey_‰ì


	)

975 
	#SYS_pkey_m¥Ÿe˘
 
__NR_pkey_m¥Ÿe˘


	)

976 
	#SYS_pﬁl
 
__NR_pﬁl


	)

977 
	#SYS_µﬁl
 
__NR_µﬁl


	)

978 
	#SYS_¥˘l
 
__NR_¥˘l


	)

979 
	#SYS_¥ód64
 
__NR_¥ód64


	)

980 
	#SYS_¥ódv
 
__NR_¥ódv


	)

981 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

982 
	#SYS_¥limô64
 
__NR_¥limô64


	)

983 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

984 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

985 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

986 
	#SYS_±ø˚
 
__NR_±ø˚


	)

987 
	#SYS_puçmsg
 
__NR_puçmsg


	)

988 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

989 
	#SYS_pwrôev
 
__NR_pwrôev


	)

990 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

991 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

992 
	#SYS_ªad
 
__NR_ªad


	)

993 
	#SYS_ªadahód
 
__NR_ªadahód


	)

994 
	#SYS_ªadlök
 
__NR_ªadlök


	)

995 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

996 
	#SYS_ªadv
 
__NR_ªadv


	)

997 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

998 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

999 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

1000 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

1001 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

1002 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

1003 
	#SYS_ª«me
 
__NR_ª«me


	)

1004 
	#SYS_ª«mót
 
__NR_ª«mót


	)

1005 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

1006 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

1007 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

1008 
	#SYS_rmdú
 
__NR_rmdú


	)

1009 
	#SYS_r£q
 
__NR_r£q


	)

1010 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

1011 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

1012 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

1013 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

1014 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

1015 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

1016 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

1017 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

1018 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

1019 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

1020 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

1021 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

1022 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

1023 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

1024 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

1025 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

1026 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

1027 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

1028 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

1029 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

1030 
	#SYS_£ccomp
 
__NR_£ccomp


	)

1031 
	#SYS_£curôy
 
__NR_£curôy


	)

1032 
	#SYS_£À˘
 
__NR_£À˘


	)

1033 
	#SYS_£m˘l
 
__NR_£m˘l


	)

1034 
	#SYS_£mgë
 
__NR_£mgë


	)

1035 
	#SYS_£m›
 
__NR_£m›


	)

1036 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

1037 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

1038 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

1039 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

1040 
	#SYS_£ndto
 
__NR_£ndto


	)

1041 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

1042 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

1043 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

1044 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

1045 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

1046 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

1047 
	#SYS_£tgid
 
__NR_£tgid


	)

1048 
	#SYS_£tgroups
 
__NR_£tgroups


	)

1049 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

1050 
	#SYS_£tôimî
 
__NR_£tôimî


	)

1051 
	#SYS_£äs
 
__NR_£äs


	)

1052 
	#SYS_£çgid
 
__NR_£çgid


	)

1053 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

1054 
	#SYS_£åegid
 
__NR_£åegid


	)

1055 
	#SYS_£åesgid
 
__NR_£åesgid


	)

1056 
	#SYS_£åesuid
 
__NR_£åesuid


	)

1057 
	#SYS_£åeuid
 
__NR_£åeuid


	)

1058 
	#SYS_£ålimô
 
__NR_£ålimô


	)

1059 
	#SYS_£tsid
 
__NR_£tsid


	)

1060 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

1061 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

1062 
	#SYS_£tuid
 
__NR_£tuid


	)

1063 
	#SYS_£tx©å
 
__NR_£tx©å


	)

1064 
	#SYS_shm©
 
__NR_shm©


	)

1065 
	#SYS_shm˘l
 
__NR_shm˘l


	)

1066 
	#SYS_shmdt
 
__NR_shmdt


	)

1067 
	#SYS_shmgë
 
__NR_shmgë


	)

1068 
	#SYS_shutdown
 
__NR_shutdown


	)

1069 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

1070 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

1071 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

1072 
	#SYS_sockë
 
__NR_sockë


	)

1073 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

1074 
	#SYS_•li˚
 
__NR_•li˚


	)

1075 
	#SYS_°©
 
__NR_°©


	)

1076 
	#SYS_°©fs
 
__NR_°©fs


	)

1077 
	#SYS_°©x
 
__NR_°©x


	)

1078 
	#SYS_sw≠off
 
__NR_sw≠off


	)

1079 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

1080 
	#SYS_symlök
 
__NR_symlök


	)

1081 
	#SYS_symlök©
 
__NR_symlök©


	)

1082 
	#SYS_sync
 
__NR_sync


	)

1083 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

1084 
	#SYS_syncfs
 
__NR_syncfs


	)

1085 
	#SYS_sysfs
 
__NR_sysfs


	)

1086 
	#SYS_sysöfo
 
__NR_sysöfo


	)

1087 
	#SYS_sy¶og
 
__NR_sy¶og


	)

1088 
	#SYS_ãe
 
__NR_ãe


	)

1089 
	#SYS_tgkûl
 
__NR_tgkûl


	)

1090 
	#SYS_time
 
__NR_time


	)

1091 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

1092 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

1093 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

1094 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

1095 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

1096 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

1097 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

1098 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

1099 
	#SYS_times
 
__NR_times


	)

1100 
	#SYS_tkûl
 
__NR_tkûl


	)

1101 
	#SYS_åunˇã
 
__NR_åunˇã


	)

1102 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

1103 
	#SYS_umask
 
__NR_umask


	)

1104 
	#SYS_umou¡2
 
__NR_umou¡2


	)

1105 
	#SYS_u«me
 
__NR_u«me


	)

1106 
	#SYS_u∆ök
 
__NR_u∆ök


	)

1107 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

1108 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

1109 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

1110 
	#SYS_u°©
 
__NR_u°©


	)

1111 
	#SYS_utime
 
__NR_utime


	)

1112 
	#SYS_utimíßt
 
__NR_utimíßt


	)

1113 
	#SYS_utimes
 
__NR_utimes


	)

1114 
	#SYS_vf‹k
 
__NR_vf‹k


	)

1115 
	#SYS_vh™gup
 
__NR_vh™gup


	)

1116 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

1117 
	#SYS_waô4
 
__NR_waô4


	)

1118 
	#SYS_waôid
 
__NR_waôid


	)

1119 
	#SYS_wrôe
 
__NR_wrôe


	)

1120 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/sysctl.h

18 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	t__ötmax_t
;

62 
	t__uötmax_t
;

64 
__exãnsi⁄__
 
	t__ötmax_t
;

65 
__exãnsi⁄__
 
	t__uötmax_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 
__quad_t
 *
	t__qaddr_t
;

192 *
	t__ˇddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

203 
	t__sig_©omic_t
;

205 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/sig_atomic_t.h

1 #i‚de‡
__sig_©omic_t_deföed


2 
	#__sig_©omic_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
__sig_©omic_t
 
	tsig_©omic_t
;

	@/usr/include/bits/types/sigevent_t.h

1 #i‚de‡
__sigevít_t_deföed


2 
	#__sigevít_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/sigvÆ_t.h
>

8 
	#__SIGEV_MAX_SIZE
 64

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

16 #i‚de‡
__have_±hªad_©å_t


17 
±hªad_©å_t
 
	t±hªad_©å_t
;

18 
	#__have_±hªad_©å_t
 1

	)

22 
	ssigevít


24 
sigvÆ_t
 
	msigev_vÆue
;

25 
	msigev_signo
;

26 
	msigev_nŸify
;

30 
	m_∑d
[
__SIGEV_PAD_SIZE
];

34 
__pid_t
 
	m_tid
;

38 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

39 
±hªad_©å_t
 *
	m_©åibuã
;

40 } 
	m_sigev_thªad
;

41 } 
	m_sigev_un
;

42 } 
	tsigevít_t
;

45 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

46 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/bits/types/siginfo_t.h

1 #i‚de‡
__sigöfo_t_deföed


2 
	#__sigöfo_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/sigvÆ_t.h
>

8 
	#__SI_MAX_SIZE
 128

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

16 
	~<bôs/sigöfo-¨ch.h
>

17 #i‚de‡
__SI_ALIGNMENT


18 
	#__SI_ALIGNMENT


	)

20 #i‚de‡
__SI_BAND_TYPE


21 
	#__SI_BAND_TYPE
 

	)

23 #i‚de‡
__SI_CLOCK_T


24 
	#__SI_CLOCK_T
 
__˛ock_t


	)

26 #i‚de‡
__SI_ERRNO_THEN_CODE


27 
	#__SI_ERRNO_THEN_CODE
 1

	)

29 #i‚de‡
__SI_HAVE_SIGSYS


30 
	#__SI_HAVE_SIGSYS
 1

	)

32 #i‚de‡
__SI_SIGFAULT_ADDL


33 
	#__SI_SIGFAULT_ADDL


	)

38 
	msi_signo
;

39 #i‡
__SI_ERRNO_THEN_CODE


40 
	msi_î∫o
;

42 
	msi_code
;

44 
	msi_code
;

45 
	msi_î∫o
;

47 #i‡
__WORDSIZE
 == 64

48 
	m__∑d0
;

53 
	m_∑d
[
__SI_PAD_SIZE
];

58 
__pid_t
 
	msi_pid
;

59 
__uid_t
 
	msi_uid
;

60 } 
	m_kûl
;

65 
	msi_tid
;

66 
	msi_ovîrun
;

67 
sigvÆ_t
 
	msi_sigvÆ
;

68 } 
	m_timî
;

73 
__pid_t
 
	msi_pid
;

74 
__uid_t
 
	msi_uid
;

75 
sigvÆ_t
 
	msi_sigvÆ
;

76 } 
	m_π
;

81 
__pid_t
 
	msi_pid
;

82 
__uid_t
 
	msi_uid
;

83 
	msi_°©us
;

84 
__SI_CLOCK_T
 
	msi_utime
;

85 
__SI_CLOCK_T
 
	msi_°ime
;

86 } 
	m_sigchld
;

91 *
	msi_addr
;

92 
__SI_SIGFAULT_ADDL


93 
	msi_addr_lsb
;

99 *
	m_lowî
;

100 *
	m_uµî
;

101 } 
	m_addr_bnd
;

103 
__uöt32_t
 
	m_pkey
;

104 } 
	m_bounds
;

105 } 
	m_sigÁu…
;

110 
	msi_b™d
;

111 
	msi_fd
;

112 } 
	m_sigpﬁl
;

115 #i‡
__SI_HAVE_SIGSYS


118 *
	m_ˇŒ_addr
;

119 
	m_sysˇŒ
;

120 
	m_¨ch
;

121 } 
	m_sigsys
;

123 } 
	m_sifõlds
;

124 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

128 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

129 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

130 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

131 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

132 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

133 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

134 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

135 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

136 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

137 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

138 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

139 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

140 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_lowî


	)

141 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_uµî


	)

142 
	#si_pkey
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_pkey


	)

143 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

144 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

145 #i‡
__SI_HAVE_SIGSYS


146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/stack_t.h

19 #i‚de‡
__°ack_t_deföed


20 
	#__°ack_t_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

28 *
	mss_•
;

29 
	mss_Êags
;

30 
size_t
 
	mss_size
;

31 } 
	t°ack_t
;

	@/usr/include/bits/types/struct_rusage.h

19 #i‚de‡
__rußge_deföed


20 
	#__rußge_deföed
 1

	)

22 
	~<bôs/ty≥s.h
>

23 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

31 
	srußge


34 
timevÆ
 
	mru_utime
;

36 
timevÆ
 
	mru_°ime
;

38 
__exãnsi⁄__
 union

40 
	mru_maxrss
;

41 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

46 
__exãnsi⁄__
 union

48 
	mru_ixrss
;

49 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

52 
__exãnsi⁄__
 union

54 
	mru_idrss
;

55 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

58 
__exãnsi⁄__
 union

60 
	mru_i§ss
;

61 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

65 
__exãnsi⁄__
 union

67 
	mru_möÊt
;

68 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

71 
__exãnsi⁄__
 union

73 
	mru_majÊt
;

74 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

77 
__exãnsi⁄__
 union

79 
	mru_nsw≠
;

80 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

84 
__exãnsi⁄__
 union

86 
	mru_öblock
;

87 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

90 
__exãnsi⁄__
 union

92 
	mru_oublock
;

93 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

96 
__exãnsi⁄__
 union

98 
	mru_msg¢d
;

99 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

102 
__exãnsi⁄__
 union

104 
	mru_msgrcv
;

105 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

108 
__exãnsi⁄__
 union

110 
	mru_nsig«ls
;

111 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

116 
__exãnsi⁄__
 union

118 
	mru_nvcsw
;

119 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

123 
__exãnsi⁄__
 union

125 
	mru_nivcsw
;

126 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

	@/usr/include/bits/types/struct_sigstack.h

19 #i‚de‡
__sig°ack_deföed


20 
	#__sig°ack_deföed
 1

	)

23 
	ssig°ack


25 *
	mss_•
;

26 
	mss_⁄°ack
;

	@/usr/include/bits/types/struct_timespec.h

1 #i‚de‡
__time•ec_deföed


2 
	#__time•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stime•ec


10 
__time_t
 
	mtv_£c
;

11 
__sysˇŒ_¶⁄g_t
 
	mtv_n£c
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 
__time_t
 
	mtv_£c
;

11 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #ifde‡
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_IAMCU
 6

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

195 
	#EM_SPU
 23

	)

197 
	#EM_V800
 36

	)

198 
	#EM_FR20
 37

	)

199 
	#EM_RH32
 38

	)

200 
	#EM_RCE
 39

	)

201 
	#EM_ARM
 40

	)

202 
	#EM_FAKE_ALPHA
 41

	)

203 
	#EM_SH
 42

	)

204 
	#EM_SPARCV9
 43

	)

205 
	#EM_TRICORE
 44

	)

206 
	#EM_ARC
 45

	)

207 
	#EM_H8_300
 46

	)

208 
	#EM_H8_300H
 47

	)

209 
	#EM_H8S
 48

	)

210 
	#EM_H8_500
 49

	)

211 
	#EM_IA_64
 50

	)

212 
	#EM_MIPS_X
 51

	)

213 
	#EM_COLDFIRE
 52

	)

214 
	#EM_68HC12
 53

	)

215 
	#EM_MMA
 54

	)

216 
	#EM_PCP
 55

	)

217 
	#EM_NCPU
 56

	)

218 
	#EM_NDR1
 57

	)

219 
	#EM_STARCORE
 58

	)

220 
	#EM_ME16
 59

	)

221 
	#EM_ST100
 60

	)

222 
	#EM_TINYJ
 61

	)

223 
	#EM_X86_64
 62

	)

224 
	#EM_PDSP
 63

	)

225 
	#EM_PDP10
 64

	)

226 
	#EM_PDP11
 65

	)

227 
	#EM_FX66
 66

	)

228 
	#EM_ST9PLUS
 67

	)

229 
	#EM_ST7
 68

	)

230 
	#EM_68HC16
 69

	)

231 
	#EM_68HC11
 70

	)

232 
	#EM_68HC08
 71

	)

233 
	#EM_68HC05
 72

	)

234 
	#EM_SVX
 73

	)

235 
	#EM_ST19
 74

	)

236 
	#EM_VAX
 75

	)

237 
	#EM_CRIS
 76

	)

238 
	#EM_JAVELIN
 77

	)

239 
	#EM_FIREPATH
 78

	)

240 
	#EM_ZSP
 79

	)

241 
	#EM_MMIX
 80

	)

242 
	#EM_HUANY
 81

	)

243 
	#EM_PRISM
 82

	)

244 
	#EM_AVR
 83

	)

245 
	#EM_FR30
 84

	)

246 
	#EM_D10V
 85

	)

247 
	#EM_D30V
 86

	)

248 
	#EM_V850
 87

	)

249 
	#EM_M32R
 88

	)

250 
	#EM_MN10300
 89

	)

251 
	#EM_MN10200
 90

	)

252 
	#EM_PJ
 91

	)

253 
	#EM_OPENRISC
 92

	)

254 
	#EM_ARC_COMPACT
 93

	)

255 
	#EM_XTENSA
 94

	)

256 
	#EM_VIDEOCORE
 95

	)

257 
	#EM_TMM_GPP
 96

	)

258 
	#EM_NS32K
 97

	)

259 
	#EM_TPC
 98

	)

260 
	#EM_SNP1K
 99

	)

261 
	#EM_ST200
 100

	)

262 
	#EM_IP2K
 101

	)

263 
	#EM_MAX
 102

	)

264 
	#EM_CR
 103

	)

265 
	#EM_F2MC16
 104

	)

266 
	#EM_MSP430
 105

	)

267 
	#EM_BLACKFIN
 106

	)

268 
	#EM_SE_C33
 107

	)

269 
	#EM_SEP
 108

	)

270 
	#EM_ARCA
 109

	)

271 
	#EM_UNICORE
 110

	)

272 
	#EM_EXCESS
 111

	)

273 
	#EM_DXP
 112

	)

274 
	#EM_ALTERA_NIOS2
 113

	)

275 
	#EM_CRX
 114

	)

276 
	#EM_XGATE
 115

	)

277 
	#EM_C166
 116

	)

278 
	#EM_M16C
 117

	)

279 
	#EM_DSPIC30F
 118

	)

280 
	#EM_CE
 119

	)

281 
	#EM_M32C
 120

	)

283 
	#EM_TSK3000
 131

	)

284 
	#EM_RS08
 132

	)

285 
	#EM_SHARC
 133

	)

286 
	#EM_ECOG2
 134

	)

287 
	#EM_SCORE7
 135

	)

288 
	#EM_DSP24
 136

	)

289 
	#EM_VIDEOCORE3
 137

	)

290 
	#EM_LATTICEMICO32
 138

	)

291 
	#EM_SE_C17
 139

	)

292 
	#EM_TI_C6000
 140

	)

293 
	#EM_TI_C2000
 141

	)

294 
	#EM_TI_C5500
 142

	)

295 
	#EM_TI_ARP32
 143

	)

296 
	#EM_TI_PRU
 144

	)

298 
	#EM_MMDSP_PLUS
 160

	)

299 
	#EM_CYPRESS_M8C
 161

	)

300 
	#EM_R32C
 162

	)

301 
	#EM_TRIMEDIA
 163

	)

302 
	#EM_QDSP6
 164

	)

303 
	#EM_8051
 165

	)

304 
	#EM_STXP7X
 166

	)

305 
	#EM_NDS32
 167

	)

306 
	#EM_ECOG1X
 168

	)

307 
	#EM_MAXQ30
 169

	)

308 
	#EM_XIMO16
 170

	)

309 
	#EM_MANIK
 171

	)

310 
	#EM_CRAYNV2
 172

	)

311 
	#EM_RX
 173

	)

312 
	#EM_METAG
 174

	)

313 
	#EM_MCST_ELBRUS
 175

	)

314 
	#EM_ECOG16
 176

	)

315 
	#EM_CR16
 177

	)

316 
	#EM_ETPU
 178

	)

317 
	#EM_SLE9X
 179

	)

318 
	#EM_L10M
 180

	)

319 
	#EM_K10M
 181

	)

321 
	#EM_AARCH64
 183

	)

323 
	#EM_AVR32
 185

	)

324 
	#EM_STM8
 186

	)

325 
	#EM_TILE64
 187

	)

326 
	#EM_TILEPRO
 188

	)

327 
	#EM_MICROBLAZE
 189

	)

328 
	#EM_CUDA
 190

	)

329 
	#EM_TILEGX
 191

	)

330 
	#EM_CLOUDSHIELD
 192

	)

331 
	#EM_COREA_1ST
 193

	)

332 
	#EM_COREA_2ND
 194

	)

333 
	#EM_ARC_COMPACT2
 195

	)

334 
	#EM_OPEN8
 196

	)

335 
	#EM_RL78
 197

	)

336 
	#EM_VIDEOCORE5
 198

	)

337 
	#EM_78KOR
 199

	)

338 
	#EM_56800EX
 200

	)

339 
	#EM_BA1
 201

	)

340 
	#EM_BA2
 202

	)

341 
	#EM_XCORE
 203

	)

342 
	#EM_MCHP_PIC
 204

	)

344 
	#EM_KM32
 210

	)

345 
	#EM_KMX32
 211

	)

346 
	#EM_EMX16
 212

	)

347 
	#EM_EMX8
 213

	)

348 
	#EM_KVARC
 214

	)

349 
	#EM_CDP
 215

	)

350 
	#EM_COGE
 216

	)

351 
	#EM_COOL
 217

	)

352 
	#EM_NORC
 218

	)

353 
	#EM_CSR_KALIMBA
 219

	)

354 
	#EM_Z80
 220

	)

355 
	#EM_VISIUM
 221

	)

356 
	#EM_FT32
 222

	)

357 
	#EM_MOXIE
 223

	)

358 
	#EM_AMDGPU
 224

	)

360 
	#EM_RISCV
 243

	)

362 
	#EM_BPF
 247

	)

364 
	#EM_NUM
 248

	)

368 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

374 
	#EM_ALPHA
 0x9026

	)

378 
	#EV_NONE
 0

	)

379 
	#EV_CURRENT
 1

	)

380 
	#EV_NUM
 2

	)

386 
Elf32_W‹d
 
	msh_«me
;

387 
Elf32_W‹d
 
	msh_ty≥
;

388 
Elf32_W‹d
 
	msh_Êags
;

389 
Elf32_Addr
 
	msh_addr
;

390 
Elf32_Off
 
	msh_off£t
;

391 
Elf32_W‹d
 
	msh_size
;

392 
Elf32_W‹d
 
	msh_lök
;

393 
Elf32_W‹d
 
	msh_öfo
;

394 
Elf32_W‹d
 
	msh_addølign
;

395 
Elf32_W‹d
 
	msh_ítsize
;

396 } 
	tElf32_Shdr
;

400 
Elf64_W‹d
 
	msh_«me
;

401 
Elf64_W‹d
 
	msh_ty≥
;

402 
Elf64_Xw‹d
 
	msh_Êags
;

403 
Elf64_Addr
 
	msh_addr
;

404 
Elf64_Off
 
	msh_off£t
;

405 
Elf64_Xw‹d
 
	msh_size
;

406 
Elf64_W‹d
 
	msh_lök
;

407 
Elf64_W‹d
 
	msh_öfo
;

408 
Elf64_Xw‹d
 
	msh_addølign
;

409 
Elf64_Xw‹d
 
	msh_ítsize
;

410 } 
	tElf64_Shdr
;

414 
	#SHN_UNDEF
 0

	)

415 
	#SHN_LORESERVE
 0xff00

	)

416 
	#SHN_LOPROC
 0xff00

	)

417 
	#SHN_BEFORE
 0xff00

	)

419 
	#SHN_AFTER
 0xff01

	)

421 
	#SHN_HIPROC
 0xff1‡

	)

422 
	#SHN_LOOS
 0xff20

	)

423 
	#SHN_HIOS
 0xff3‡

	)

424 
	#SHN_ABS
 0xfff1

	)

425 
	#SHN_COMMON
 0xfff2

	)

426 
	#SHN_XINDEX
 0xfff‡

	)

427 
	#SHN_HIRESERVE
 0xfff‡

	)

431 
	#SHT_NULL
 0

	)

432 
	#SHT_PROGBITS
 1

	)

433 
	#SHT_SYMTAB
 2

	)

434 
	#SHT_STRTAB
 3

	)

435 
	#SHT_RELA
 4

	)

436 
	#SHT_HASH
 5

	)

437 
	#SHT_DYNAMIC
 6

	)

438 
	#SHT_NOTE
 7

	)

439 
	#SHT_NOBITS
 8

	)

440 
	#SHT_REL
 9

	)

441 
	#SHT_SHLIB
 10

	)

442 
	#SHT_DYNSYM
 11

	)

443 
	#SHT_INIT_ARRAY
 14

	)

444 
	#SHT_FINI_ARRAY
 15

	)

445 
	#SHT_PREINIT_ARRAY
 16

	)

446 
	#SHT_GROUP
 17

	)

447 
	#SHT_SYMTAB_SHNDX
 18

	)

448 
	#SHT_NUM
 19

	)

449 
	#SHT_LOOS
 0x60000000

	)

450 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

451 
	#SHT_GNU_HASH
 0x6ffffff6

	)

452 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

453 
	#SHT_CHECKSUM
 0x6ffffff8

	)

454 
	#SHT_LOSUNW
 0x6fffffÁ

	)

455 
	#SHT_SUNW_move
 0x6fffffÁ

	)

456 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

457 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

458 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

459 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

460 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

461 
	#SHT_HISUNW
 0x6ffffff‡

	)

462 
	#SHT_HIOS
 0x6ffffff‡

	)

463 
	#SHT_LOPROC
 0x70000000

	)

464 
	#SHT_HIPROC
 0x7ffffff‡

	)

465 
	#SHT_LOUSER
 0x80000000

	)

466 
	#SHT_HIUSER
 0x8ffffff‡

	)

470 
	#SHF_WRITE
 (1 << 0Ë

	)

471 
	#SHF_ALLOC
 (1 << 1Ë

	)

472 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

473 
	#SHF_MERGE
 (1 << 4Ë

	)

474 
	#SHF_STRINGS
 (1 << 5Ë

	)

475 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

476 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

477 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

479 
	#SHF_GROUP
 (1 << 9Ë

	)

480 
	#SHF_TLS
 (1 << 10Ë

	)

481 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

482 
	#SHF_MASKOS
 0x0ff00000

	)

483 
	#SHF_MASKPROC
 0xf0000000

	)

484 
	#SHF_ORDERED
 (1 << 30Ë

	)

486 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

493 
Elf32_W‹d
 
	mch_ty≥
;

494 
Elf32_W‹d
 
	mch_size
;

495 
Elf32_W‹d
 
	mch_addølign
;

496 } 
	tElf32_Chdr
;

500 
Elf64_W‹d
 
	mch_ty≥
;

501 
Elf64_W‹d
 
	mch_ª£rved
;

502 
Elf64_Xw‹d
 
	mch_size
;

503 
Elf64_Xw‹d
 
	mch_addølign
;

504 } 
	tElf64_Chdr
;

507 
	#ELFCOMPRESS_ZLIB
 1

	)

508 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

509 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

510 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

511 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

514 
	#GRP_COMDAT
 0x1

	)

520 
Elf32_W‹d
 
	m°_«me
;

521 
Elf32_Addr
 
	m°_vÆue
;

522 
Elf32_W‹d
 
	m°_size
;

523 
	m°_öfo
;

524 
	m°_Ÿhî
;

525 
Elf32_Se˘i⁄
 
	m°_shndx
;

526 } 
	tElf32_Sym
;

530 
Elf64_W‹d
 
	m°_«me
;

531 
	m°_öfo
;

532 
	m°_Ÿhî
;

533 
Elf64_Se˘i⁄
 
	m°_shndx
;

534 
Elf64_Addr
 
	m°_vÆue
;

535 
Elf64_Xw‹d
 
	m°_size
;

536 } 
	tElf64_Sym
;

543 
Elf32_HÆf
 
	msi_boundto
;

544 
Elf32_HÆf
 
	msi_Êags
;

545 } 
	tElf32_Symöfo
;

549 
Elf64_HÆf
 
	msi_boundto
;

550 
Elf64_HÆf
 
	msi_Êags
;

551 } 
	tElf64_Symöfo
;

554 
	#SYMINFO_BT_SELF
 0xfff‡

	)

555 
	#SYMINFO_BT_PARENT
 0xff„

	)

556 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

559 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

560 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

561 
	#SYMINFO_FLG_COPY
 0x0004

	)

562 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

565 
	#SYMINFO_NONE
 0

	)

566 
	#SYMINFO_CURRENT
 1

	)

567 
	#SYMINFO_NUM
 2

	)

572 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

573 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

574 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

577 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

578 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

579 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

583 
	#STB_LOCAL
 0

	)

584 
	#STB_GLOBAL
 1

	)

585 
	#STB_WEAK
 2

	)

586 
	#STB_NUM
 3

	)

587 
	#STB_LOOS
 10

	)

588 
	#STB_GNU_UNIQUE
 10

	)

589 
	#STB_HIOS
 12

	)

590 
	#STB_LOPROC
 13

	)

591 
	#STB_HIPROC
 15

	)

595 
	#STT_NOTYPE
 0

	)

596 
	#STT_OBJECT
 1

	)

597 
	#STT_FUNC
 2

	)

598 
	#STT_SECTION
 3

	)

599 
	#STT_FILE
 4

	)

600 
	#STT_COMMON
 5

	)

601 
	#STT_TLS
 6

	)

602 
	#STT_NUM
 7

	)

603 
	#STT_LOOS
 10

	)

604 
	#STT_GNU_IFUNC
 10

	)

605 
	#STT_HIOS
 12

	)

606 
	#STT_LOPROC
 13

	)

607 
	#STT_HIPROC
 15

	)

614 
	#STN_UNDEF
 0

	)

619 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

622 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

625 
	#STV_DEFAULT
 0

	)

626 
	#STV_INTERNAL
 1

	)

627 
	#STV_HIDDEN
 2

	)

628 
	#STV_PROTECTED
 3

	)

635 
Elf32_Addr
 
	mr_off£t
;

636 
Elf32_W‹d
 
	mr_öfo
;

637 } 
	tElf32_Rñ
;

646 
Elf64_Addr
 
	mr_off£t
;

647 
Elf64_Xw‹d
 
	mr_öfo
;

648 } 
	tElf64_Rñ
;

654 
Elf32_Addr
 
	mr_off£t
;

655 
Elf32_W‹d
 
	mr_öfo
;

656 
Elf32_Sw‹d
 
	mr_addíd
;

657 } 
	tElf32_Rña
;

661 
Elf64_Addr
 
	mr_off£t
;

662 
Elf64_Xw‹d
 
	mr_öfo
;

663 
Elf64_Sxw‹d
 
	mr_addíd
;

664 } 
	tElf64_Rña
;

668 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

669 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

670 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

672 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

673 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

674 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

680 
Elf32_W‹d
 
	mp_ty≥
;

681 
Elf32_Off
 
	mp_off£t
;

682 
Elf32_Addr
 
	mp_vaddr
;

683 
Elf32_Addr
 
	mp_∑ddr
;

684 
Elf32_W‹d
 
	mp_fûesz
;

685 
Elf32_W‹d
 
	mp_memsz
;

686 
Elf32_W‹d
 
	mp_Êags
;

687 
Elf32_W‹d
 
	mp_Æign
;

688 } 
	tElf32_Phdr
;

692 
Elf64_W‹d
 
	mp_ty≥
;

693 
Elf64_W‹d
 
	mp_Êags
;

694 
Elf64_Off
 
	mp_off£t
;

695 
Elf64_Addr
 
	mp_vaddr
;

696 
Elf64_Addr
 
	mp_∑ddr
;

697 
Elf64_Xw‹d
 
	mp_fûesz
;

698 
Elf64_Xw‹d
 
	mp_memsz
;

699 
Elf64_Xw‹d
 
	mp_Æign
;

700 } 
	tElf64_Phdr
;

706 
	#PN_XNUM
 0xffff

	)

710 
	#PT_NULL
 0

	)

711 
	#PT_LOAD
 1

	)

712 
	#PT_DYNAMIC
 2

	)

713 
	#PT_INTERP
 3

	)

714 
	#PT_NOTE
 4

	)

715 
	#PT_SHLIB
 5

	)

716 
	#PT_PHDR
 6

	)

717 
	#PT_TLS
 7

	)

718 
	#PT_NUM
 8

	)

719 
	#PT_LOOS
 0x60000000

	)

720 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

721 
	#PT_GNU_STACK
 0x6474e551

	)

722 
	#PT_GNU_RELRO
 0x6474e552

	)

723 
	#PT_LOSUNW
 0x6fffffÁ

	)

724 
	#PT_SUNWBSS
 0x6fffffÁ

	)

725 
	#PT_SUNWSTACK
 0x6ffffffb

	)

726 
	#PT_HISUNW
 0x6fffffff

	)

727 
	#PT_HIOS
 0x6ffffff‡

	)

728 
	#PT_LOPROC
 0x70000000

	)

729 
	#PT_HIPROC
 0x7ffffff‡

	)

733 
	#PF_X
 (1 << 0Ë

	)

734 
	#PF_W
 (1 << 1Ë

	)

735 
	#PF_R
 (1 << 2Ë

	)

736 
	#PF_MASKOS
 0x0ff00000

	)

737 
	#PF_MASKPROC
 0xf0000000

	)

741 
	#NT_PRSTATUS
 1

	)

742 
	#NT_FPREGSET
 2

	)

743 
	#NT_PRPSINFO
 3

	)

744 
	#NT_PRXREG
 4

	)

745 
	#NT_TASKSTRUCT
 4

	)

746 
	#NT_PLATFORM
 5

	)

747 
	#NT_AUXV
 6

	)

748 
	#NT_GWINDOWS
 7

	)

749 
	#NT_ASRS
 8

	)

750 
	#NT_PSTATUS
 10

	)

751 
	#NT_PSINFO
 13

	)

752 
	#NT_PRCRED
 14

	)

753 
	#NT_UTSNAME
 15

	)

754 
	#NT_LWPSTATUS
 16

	)

755 
	#NT_LWPSINFO
 17

	)

756 
	#NT_PRFPXREG
 20

	)

757 
	#NT_SIGINFO
 0x53494749

	)

759 
	#NT_FILE
 0x46494c45

	)

761 
	#NT_PRXFPREG
 0x46e62b7‡

	)

762 
	#NT_PPC_VMX
 0x100

	)

763 
	#NT_PPC_SPE
 0x101

	)

764 
	#NT_PPC_VSX
 0x102

	)

765 
	#NT_386_TLS
 0x200

	)

766 
	#NT_386_IOPERM
 0x201

	)

767 
	#NT_X86_XSTATE
 0x202

	)

768 
	#NT_S390_HIGH_GPRS
 0x300

	)

769 
	#NT_S390_TIMER
 0x301

	)

770 
	#NT_S390_TODCMP
 0x302

	)

771 
	#NT_S390_TODPREG
 0x303

	)

772 
	#NT_S390_CTRS
 0x304

	)

773 
	#NT_S390_PREFIX
 0x305

	)

774 
	#NT_S390_LAST_BREAK
 0x306

	)

775 
	#NT_S390_SYSTEM_CALL
 0x307

	)

776 
	#NT_S390_TDB
 0x308

	)

777 
	#NT_ARM_VFP
 0x400

	)

778 
	#NT_ARM_TLS
 0x401

	)

779 
	#NT_ARM_HW_BREAK
 0x402

	)

780 
	#NT_ARM_HW_WATCH
 0x403

	)

781 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

785 
	#NT_VERSION
 1

	)

792 
Elf32_Sw‹d
 
	md_èg
;

795 
Elf32_W‹d
 
	md_vÆ
;

796 
Elf32_Addr
 
	md_±r
;

797 } 
	md_un
;

798 } 
	tElf32_Dyn
;

802 
Elf64_Sxw‹d
 
	md_èg
;

805 
Elf64_Xw‹d
 
	md_vÆ
;

806 
Elf64_Addr
 
	md_±r
;

807 } 
	md_un
;

808 } 
	tElf64_Dyn
;

812 
	#DT_NULL
 0

	)

813 
	#DT_NEEDED
 1

	)

814 
	#DT_PLTRELSZ
 2

	)

815 
	#DT_PLTGOT
 3

	)

816 
	#DT_HASH
 4

	)

817 
	#DT_STRTAB
 5

	)

818 
	#DT_SYMTAB
 6

	)

819 
	#DT_RELA
 7

	)

820 
	#DT_RELASZ
 8

	)

821 
	#DT_RELAENT
 9

	)

822 
	#DT_STRSZ
 10

	)

823 
	#DT_SYMENT
 11

	)

824 
	#DT_INIT
 12

	)

825 
	#DT_FINI
 13

	)

826 
	#DT_SONAME
 14

	)

827 
	#DT_RPATH
 15

	)

828 
	#DT_SYMBOLIC
 16

	)

829 
	#DT_REL
 17

	)

830 
	#DT_RELSZ
 18

	)

831 
	#DT_RELENT
 19

	)

832 
	#DT_PLTREL
 20

	)

833 
	#DT_DEBUG
 21

	)

834 
	#DT_TEXTREL
 22

	)

835 
	#DT_JMPREL
 23

	)

836 
	#DT_BIND_NOW
 24

	)

837 
	#DT_INIT_ARRAY
 25

	)

838 
	#DT_FINI_ARRAY
 26

	)

839 
	#DT_INIT_ARRAYSZ
 27

	)

840 
	#DT_FINI_ARRAYSZ
 28

	)

841 
	#DT_RUNPATH
 29

	)

842 
	#DT_FLAGS
 30

	)

843 
	#DT_ENCODING
 32

	)

844 
	#DT_PREINIT_ARRAY
 32

	)

845 
	#DT_PREINIT_ARRAYSZ
 33

	)

846 
	#DT_NUM
 34

	)

847 
	#DT_LOOS
 0x6000000d

	)

848 
	#DT_HIOS
 0x6ffff000

	)

849 
	#DT_LOPROC
 0x70000000

	)

850 
	#DT_HIPROC
 0x7ffffff‡

	)

851 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

856 
	#DT_VALRNGLO
 0x6ffffd00

	)

857 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

858 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

859 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

860 
	#DT_CHECKSUM
 0x6ffffdf8

	)

861 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

862 
	#DT_MOVEENT
 0x6ffffdÁ

	)

863 
	#DT_MOVESZ
 0x6ffffdfb

	)

864 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

865 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

867 
	#DT_SYMINSZ
 0x6ffffd„

	)

868 
	#DT_SYMINENT
 0x6ffffdf‡

	)

869 
	#DT_VALRNGHI
 0x6ffffdff

	)

870 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

871 
	#DT_VALNUM
 12

	)

878 
	#DT_ADDRRNGLO
 0x6fff„00

	)

879 
	#DT_GNU_HASH
 0x6fff„f5

	)

880 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

881 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

882 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

883 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

884 
	#DT_CONFIG
 0x6fff„Á

	)

885 
	#DT_DEPAUDIT
 0x6fff„fb

	)

886 
	#DT_AUDIT
 0x6fff„f¯

	)

887 
	#DT_PLTPAD
 0x6fff„fd

	)

888 
	#DT_MOVETAB
 0x6fff„„

	)

889 
	#DT_SYMINFO
 0x6fff„f‡

	)

890 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

891 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

892 
	#DT_ADDRNUM
 11

	)

896 
	#DT_VERSYM
 0x6ffffff0

	)

898 
	#DT_RELACOUNT
 0x6ffffff9

	)

899 
	#DT_RELCOUNT
 0x6fffffÁ

	)

902 
	#DT_FLAGS_1
 0x6ffffffb

	)

903 
	#DT_VERDEF
 0x6ffffff¯

	)

905 
	#DT_VERDEFNUM
 0x6ffffffd

	)

906 
	#DT_VERNEED
 0x6fffff„

	)

908 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

909 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

910 
	#DT_VERSIONTAGNUM
 16

	)

914 
	#DT_AUXILIARY
 0x7ffffffd

	)

915 
	#DT_FILTER
 0x7ffffff‡

	)

916 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

917 
	#DT_EXTRANUM
 3

	)

920 
	#DF_ORIGIN
 0x00000001

	)

921 
	#DF_SYMBOLIC
 0x00000002

	)

922 
	#DF_TEXTREL
 0x00000004

	)

923 
	#DF_BIND_NOW
 0x00000008

	)

924 
	#DF_STATIC_TLS
 0x00000010

	)

928 
	#DF_1_NOW
 0x00000001

	)

929 
	#DF_1_GLOBAL
 0x00000002

	)

930 
	#DF_1_GROUP
 0x00000004

	)

931 
	#DF_1_NODELETE
 0x00000008

	)

932 
	#DF_1_LOADFLTR
 0x00000010

	)

933 
	#DF_1_INITFIRST
 0x00000020

	)

934 
	#DF_1_NOOPEN
 0x00000040

	)

935 
	#DF_1_ORIGIN
 0x00000080

	)

936 
	#DF_1_DIRECT
 0x00000100

	)

937 
	#DF_1_TRANS
 0x00000200

	)

938 
	#DF_1_INTERPOSE
 0x00000400

	)

939 
	#DF_1_NODEFLIB
 0x00000800

	)

940 
	#DF_1_NODUMP
 0x00001000

	)

941 
	#DF_1_CONFALT
 0x00002000

	)

942 
	#DF_1_ENDFILTEE
 0x00004000

	)

943 
	#DF_1_DISPRELDNE
 0x00008000

	)

944 
	#DF_1_DISPRELPND
 0x00010000

	)

945 
	#DF_1_NODIRECT
 0x00020000

	)

946 
	#DF_1_IGNMULDEF
 0x00040000

	)

947 
	#DF_1_NOKSYMS
 0x00080000

	)

948 
	#DF_1_NOHDR
 0x00100000

	)

949 
	#DF_1_EDITED
 0x00200000

	)

950 
	#DF_1_NORELOC
 0x00400000

	)

951 
	#DF_1_SYMINTPOSE
 0x00800000

	)

952 
	#DF_1_GLOBAUDIT
 0x01000000

	)

953 
	#DF_1_SINGLETON
 0x02000000

	)

956 
	#DTF_1_PARINIT
 0x00000001

	)

957 
	#DTF_1_CONFEXP
 0x00000002

	)

960 
	#DF_P1_LAZYLOAD
 0x00000001

	)

961 
	#DF_P1_GROUPPERM
 0x00000002

	)

968 
Elf32_HÆf
 
	mvd_vîsi⁄
;

969 
Elf32_HÆf
 
	mvd_Êags
;

970 
Elf32_HÆf
 
	mvd_ndx
;

971 
Elf32_HÆf
 
	mvd_˙t
;

972 
Elf32_W‹d
 
	mvd_hash
;

973 
Elf32_W‹d
 
	mvd_aux
;

974 
Elf32_W‹d
 
	mvd_√xt
;

976 } 
	tElf32_Vîdef
;

980 
Elf64_HÆf
 
	mvd_vîsi⁄
;

981 
Elf64_HÆf
 
	mvd_Êags
;

982 
Elf64_HÆf
 
	mvd_ndx
;

983 
Elf64_HÆf
 
	mvd_˙t
;

984 
Elf64_W‹d
 
	mvd_hash
;

985 
Elf64_W‹d
 
	mvd_aux
;

986 
Elf64_W‹d
 
	mvd_√xt
;

988 } 
	tElf64_Vîdef
;

992 
	#VER_DEF_NONE
 0

	)

993 
	#VER_DEF_CURRENT
 1

	)

994 
	#VER_DEF_NUM
 2

	)

997 
	#VER_FLG_BASE
 0x1

	)

998 
	#VER_FLG_WEAK
 0x2

	)

1001 
	#VER_NDX_LOCAL
 0

	)

1002 
	#VER_NDX_GLOBAL
 1

	)

1003 
	#VER_NDX_LORESERVE
 0xff00

	)

1004 
	#VER_NDX_ELIMINATE
 0xff01

	)

1010 
Elf32_W‹d
 
	mvda_«me
;

1011 
Elf32_W‹d
 
	mvda_√xt
;

1013 } 
	tElf32_Vîdaux
;

1017 
Elf64_W‹d
 
	mvda_«me
;

1018 
Elf64_W‹d
 
	mvda_√xt
;

1020 } 
	tElf64_Vîdaux
;

1027 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1028 
Elf32_HÆf
 
	mvn_˙t
;

1029 
Elf32_W‹d
 
	mvn_fûe
;

1031 
Elf32_W‹d
 
	mvn_aux
;

1032 
Elf32_W‹d
 
	mvn_√xt
;

1034 } 
	tElf32_Vî√ed
;

1038 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1039 
Elf64_HÆf
 
	mvn_˙t
;

1040 
Elf64_W‹d
 
	mvn_fûe
;

1042 
Elf64_W‹d
 
	mvn_aux
;

1043 
Elf64_W‹d
 
	mvn_√xt
;

1045 } 
	tElf64_Vî√ed
;

1049 
	#VER_NEED_NONE
 0

	)

1050 
	#VER_NEED_CURRENT
 1

	)

1051 
	#VER_NEED_NUM
 2

	)

1057 
Elf32_W‹d
 
	mv«_hash
;

1058 
Elf32_HÆf
 
	mv«_Êags
;

1059 
Elf32_HÆf
 
	mv«_Ÿhî
;

1060 
Elf32_W‹d
 
	mv«_«me
;

1061 
Elf32_W‹d
 
	mv«_√xt
;

1063 } 
	tElf32_Vî«ux
;

1067 
Elf64_W‹d
 
	mv«_hash
;

1068 
Elf64_HÆf
 
	mv«_Êags
;

1069 
Elf64_HÆf
 
	mv«_Ÿhî
;

1070 
Elf64_W‹d
 
	mv«_«me
;

1071 
Elf64_W‹d
 
	mv«_√xt
;

1073 } 
	tElf64_Vî«ux
;

1077 
	#VER_FLG_WEAK
 0x2

	)

1091 
uöt32_t
 
	ma_ty≥
;

1094 
uöt32_t
 
	ma_vÆ
;

1098 } 
	ma_un
;

1099 } 
	tElf32_auxv_t
;

1103 
uöt64_t
 
	ma_ty≥
;

1106 
uöt64_t
 
	ma_vÆ
;

1110 } 
	ma_un
;

1111 } 
	tElf64_auxv_t
;

1115 
	#AT_NULL
 0

	)

1116 
	#AT_IGNORE
 1

	)

1117 
	#AT_EXECFD
 2

	)

1118 
	#AT_PHDR
 3

	)

1119 
	#AT_PHENT
 4

	)

1120 
	#AT_PHNUM
 5

	)

1121 
	#AT_PAGESZ
 6

	)

1122 
	#AT_BASE
 7

	)

1123 
	#AT_FLAGS
 8

	)

1124 
	#AT_ENTRY
 9

	)

1125 
	#AT_NOTELF
 10

	)

1126 
	#AT_UID
 11

	)

1127 
	#AT_EUID
 12

	)

1128 
	#AT_GID
 13

	)

1129 
	#AT_EGID
 14

	)

1130 
	#AT_CLKTCK
 17

	)

1133 
	#AT_PLATFORM
 15

	)

1134 
	#AT_HWCAP
 16

	)

1139 
	#AT_FPUCW
 18

	)

1142 
	#AT_DCACHEBSIZE
 19

	)

1143 
	#AT_ICACHEBSIZE
 20

	)

1144 
	#AT_UCACHEBSIZE
 21

	)

1148 
	#AT_IGNOREPPC
 22

	)

1150 
	#AT_SECURE
 23

	)

1152 
	#AT_BASE_PLATFORM
 24

	)

1154 
	#AT_RANDOM
 25

	)

1156 
	#AT_HWCAP2
 26

	)

1159 
	#AT_EXECFN
 31

	)

1163 
	#AT_SYSINFO
 32

	)

1164 
	#AT_SYSINFO_EHDR
 33

	)

1168 
	#AT_L1I_CACHESHAPE
 34

	)

1169 
	#AT_L1D_CACHESHAPE
 35

	)

1170 
	#AT_L2_CACHESHAPE
 36

	)

1171 
	#AT_L3_CACHESHAPE
 37

	)

1176 
	#AT_L1I_CACHESIZE
 40

	)

1177 
	#AT_L1I_CACHEGEOMETRY
 41

	)

1178 
	#AT_L1D_CACHESIZE
 42

	)

1179 
	#AT_L1D_CACHEGEOMETRY
 43

	)

1180 
	#AT_L2_CACHESIZE
 44

	)

1181 
	#AT_L2_CACHEGEOMETRY
 45

	)

1182 
	#AT_L3_CACHESIZE
 46

	)

1183 
	#AT_L3_CACHEGEOMETRY
 47

	)

1190 
Elf32_W‹d
 
	mn_«mesz
;

1191 
Elf32_W‹d
 
	mn_descsz
;

1192 
Elf32_W‹d
 
	mn_ty≥
;

1193 } 
	tElf32_Nhdr
;

1197 
Elf64_W‹d
 
	mn_«mesz
;

1198 
Elf64_W‹d
 
	mn_descsz
;

1199 
Elf64_W‹d
 
	mn_ty≥
;

1200 } 
	tElf64_Nhdr
;

1205 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1208 
	#ELF_NOTE_GNU
 "GNU"

	)

1214 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1225 
	#NT_GNU_ABI_TAG
 1

	)

1226 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1230 
	#ELF_NOTE_OS_LINUX
 0

	)

1231 
	#ELF_NOTE_OS_GNU
 1

	)

1232 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1233 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1241 
	#NT_GNU_HWCAP
 2

	)

1245 
	#NT_GNU_BUILD_ID
 3

	)

1248 
	#NT_GNU_GOLD_VERSION
 4

	)

1254 
Elf32_Xw‹d
 
	mm_vÆue
;

1255 
Elf32_W‹d
 
	mm_öfo
;

1256 
Elf32_W‹d
 
	mm_poff£t
;

1257 
Elf32_HÆf
 
	mm_ª≥©
;

1258 
Elf32_HÆf
 
	mm_°ride
;

1259 } 
	tElf32_Move
;

1263 
Elf64_Xw‹d
 
	mm_vÆue
;

1264 
Elf64_Xw‹d
 
	mm_öfo
;

1265 
Elf64_Xw‹d
 
	mm_poff£t
;

1266 
Elf64_HÆf
 
	mm_ª≥©
;

1267 
Elf64_HÆf
 
	mm_°ride
;

1268 } 
	tElf64_Move
;

1271 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1272 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1273 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1275 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1276 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1277 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1283 
	#EF_CPU32
 0x00810000

	)

1287 
	#R_68K_NONE
 0

	)

1288 
	#R_68K_32
 1

	)

1289 
	#R_68K_16
 2

	)

1290 
	#R_68K_8
 3

	)

1291 
	#R_68K_PC32
 4

	)

1292 
	#R_68K_PC16
 5

	)

1293 
	#R_68K_PC8
 6

	)

1294 
	#R_68K_GOT32
 7

	)

1295 
	#R_68K_GOT16
 8

	)

1296 
	#R_68K_GOT8
 9

	)

1297 
	#R_68K_GOT32O
 10

	)

1298 
	#R_68K_GOT16O
 11

	)

1299 
	#R_68K_GOT8O
 12

	)

1300 
	#R_68K_PLT32
 13

	)

1301 
	#R_68K_PLT16
 14

	)

1302 
	#R_68K_PLT8
 15

	)

1303 
	#R_68K_PLT32O
 16

	)

1304 
	#R_68K_PLT16O
 17

	)

1305 
	#R_68K_PLT8O
 18

	)

1306 
	#R_68K_COPY
 19

	)

1307 
	#R_68K_GLOB_DAT
 20

	)

1308 
	#R_68K_JMP_SLOT
 21

	)

1309 
	#R_68K_RELATIVE
 22

	)

1310 
	#R_68K_TLS_GD32
 25

	)

1311 
	#R_68K_TLS_GD16
 26

	)

1312 
	#R_68K_TLS_GD8
 27

	)

1313 
	#R_68K_TLS_LDM32
 28

	)

1314 
	#R_68K_TLS_LDM16
 29

	)

1315 
	#R_68K_TLS_LDM8
 30

	)

1316 
	#R_68K_TLS_LDO32
 31

	)

1317 
	#R_68K_TLS_LDO16
 32

	)

1318 
	#R_68K_TLS_LDO8
 33

	)

1319 
	#R_68K_TLS_IE32
 34

	)

1320 
	#R_68K_TLS_IE16
 35

	)

1321 
	#R_68K_TLS_IE8
 36

	)

1322 
	#R_68K_TLS_LE32
 37

	)

1324 
	#R_68K_TLS_LE16
 38

	)

1326 
	#R_68K_TLS_LE8
 39

	)

1328 
	#R_68K_TLS_DTPMOD32
 40

	)

1329 
	#R_68K_TLS_DTPREL32
 41

	)

1330 
	#R_68K_TLS_TPREL32
 42

	)

1332 
	#R_68K_NUM
 43

	)

1338 
	#R_386_NONE
 0

	)

1339 
	#R_386_32
 1

	)

1340 
	#R_386_PC32
 2

	)

1341 
	#R_386_GOT32
 3

	)

1342 
	#R_386_PLT32
 4

	)

1343 
	#R_386_COPY
 5

	)

1344 
	#R_386_GLOB_DAT
 6

	)

1345 
	#R_386_JMP_SLOT
 7

	)

1346 
	#R_386_RELATIVE
 8

	)

1347 
	#R_386_GOTOFF
 9

	)

1348 
	#R_386_GOTPC
 10

	)

1349 
	#R_386_32PLT
 11

	)

1350 
	#R_386_TLS_TPOFF
 14

	)

1351 
	#R_386_TLS_IE
 15

	)

1353 
	#R_386_TLS_GOTIE
 16

	)

1355 
	#R_386_TLS_LE
 17

	)

1357 
	#R_386_TLS_GD
 18

	)

1359 
	#R_386_TLS_LDM
 19

	)

1362 
	#R_386_16
 20

	)

1363 
	#R_386_PC16
 21

	)

1364 
	#R_386_8
 22

	)

1365 
	#R_386_PC8
 23

	)

1366 
	#R_386_TLS_GD_32
 24

	)

1368 
	#R_386_TLS_GD_PUSH
 25

	)

1369 
	#R_386_TLS_GD_CALL
 26

	)

1371 
	#R_386_TLS_GD_POP
 27

	)

1372 
	#R_386_TLS_LDM_32
 28

	)

1374 
	#R_386_TLS_LDM_PUSH
 29

	)

1375 
	#R_386_TLS_LDM_CALL
 30

	)

1377 
	#R_386_TLS_LDM_POP
 31

	)

1378 
	#R_386_TLS_LDO_32
 32

	)

1379 
	#R_386_TLS_IE_32
 33

	)

1381 
	#R_386_TLS_LE_32
 34

	)

1383 
	#R_386_TLS_DTPMOD32
 35

	)

1384 
	#R_386_TLS_DTPOFF32
 36

	)

1385 
	#R_386_TLS_TPOFF32
 37

	)

1386 
	#R_386_SIZE32
 38

	)

1387 
	#R_386_TLS_GOTDESC
 39

	)

1388 
	#R_386_TLS_DESC_CALL
 40

	)

1391 
	#R_386_TLS_DESC
 41

	)

1395 
	#R_386_IRELATIVE
 42

	)

1396 
	#R_386_GOT32X
 43

	)

1399 
	#R_386_NUM
 44

	)

1405 
	#STT_SPARC_REGISTER
 13

	)

1409 
	#EF_SPARCV9_MM
 3

	)

1410 
	#EF_SPARCV9_TSO
 0

	)

1411 
	#EF_SPARCV9_PSO
 1

	)

1412 
	#EF_SPARCV9_RMO
 2

	)

1413 
	#EF_SPARC_LEDATA
 0x800000

	)

1414 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1415 
	#EF_SPARC_32PLUS
 0x000100

	)

1416 
	#EF_SPARC_SUN_US1
 0x000200

	)

1417 
	#EF_SPARC_HAL_R1
 0x000400

	)

1418 
	#EF_SPARC_SUN_US3
 0x000800

	)

1422 
	#R_SPARC_NONE
 0

	)

1423 
	#R_SPARC_8
 1

	)

1424 
	#R_SPARC_16
 2

	)

1425 
	#R_SPARC_32
 3

	)

1426 
	#R_SPARC_DISP8
 4

	)

1427 
	#R_SPARC_DISP16
 5

	)

1428 
	#R_SPARC_DISP32
 6

	)

1429 
	#R_SPARC_WDISP30
 7

	)

1430 
	#R_SPARC_WDISP22
 8

	)

1431 
	#R_SPARC_HI22
 9

	)

1432 
	#R_SPARC_22
 10

	)

1433 
	#R_SPARC_13
 11

	)

1434 
	#R_SPARC_LO10
 12

	)

1435 
	#R_SPARC_GOT10
 13

	)

1436 
	#R_SPARC_GOT13
 14

	)

1437 
	#R_SPARC_GOT22
 15

	)

1438 
	#R_SPARC_PC10
 16

	)

1439 
	#R_SPARC_PC22
 17

	)

1440 
	#R_SPARC_WPLT30
 18

	)

1441 
	#R_SPARC_COPY
 19

	)

1442 
	#R_SPARC_GLOB_DAT
 20

	)

1443 
	#R_SPARC_JMP_SLOT
 21

	)

1444 
	#R_SPARC_RELATIVE
 22

	)

1445 
	#R_SPARC_UA32
 23

	)

1449 
	#R_SPARC_PLT32
 24

	)

1450 
	#R_SPARC_HIPLT22
 25

	)

1451 
	#R_SPARC_LOPLT10
 26

	)

1452 
	#R_SPARC_PCPLT32
 27

	)

1453 
	#R_SPARC_PCPLT22
 28

	)

1454 
	#R_SPARC_PCPLT10
 29

	)

1455 
	#R_SPARC_10
 30

	)

1456 
	#R_SPARC_11
 31

	)

1457 
	#R_SPARC_64
 32

	)

1458 
	#R_SPARC_OLO10
 33

	)

1459 
	#R_SPARC_HH22
 34

	)

1460 
	#R_SPARC_HM10
 35

	)

1461 
	#R_SPARC_LM22
 36

	)

1462 
	#R_SPARC_PC_HH22
 37

	)

1463 
	#R_SPARC_PC_HM10
 38

	)

1464 
	#R_SPARC_PC_LM22
 39

	)

1465 
	#R_SPARC_WDISP16
 40

	)

1466 
	#R_SPARC_WDISP19
 41

	)

1467 
	#R_SPARC_GLOB_JMP
 42

	)

1468 
	#R_SPARC_7
 43

	)

1469 
	#R_SPARC_5
 44

	)

1470 
	#R_SPARC_6
 45

	)

1471 
	#R_SPARC_DISP64
 46

	)

1472 
	#R_SPARC_PLT64
 47

	)

1473 
	#R_SPARC_HIX22
 48

	)

1474 
	#R_SPARC_LOX10
 49

	)

1475 
	#R_SPARC_H44
 50

	)

1476 
	#R_SPARC_M44
 51

	)

1477 
	#R_SPARC_L44
 52

	)

1478 
	#R_SPARC_REGISTER
 53

	)

1479 
	#R_SPARC_UA64
 54

	)

1480 
	#R_SPARC_UA16
 55

	)

1481 
	#R_SPARC_TLS_GD_HI22
 56

	)

1482 
	#R_SPARC_TLS_GD_LO10
 57

	)

1483 
	#R_SPARC_TLS_GD_ADD
 58

	)

1484 
	#R_SPARC_TLS_GD_CALL
 59

	)

1485 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1486 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1487 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1488 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1489 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1490 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1491 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1492 
	#R_SPARC_TLS_IE_HI22
 67

	)

1493 
	#R_SPARC_TLS_IE_LO10
 68

	)

1494 
	#R_SPARC_TLS_IE_LD
 69

	)

1495 
	#R_SPARC_TLS_IE_LDX
 70

	)

1496 
	#R_SPARC_TLS_IE_ADD
 71

	)

1497 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1498 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1499 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1500 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1501 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1502 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1503 
	#R_SPARC_TLS_TPOFF32
 78

	)

1504 
	#R_SPARC_TLS_TPOFF64
 79

	)

1505 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1506 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1507 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1508 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1509 
	#R_SPARC_GOTDATA_OP
 84

	)

1510 
	#R_SPARC_H34
 85

	)

1511 
	#R_SPARC_SIZE32
 86

	)

1512 
	#R_SPARC_SIZE64
 87

	)

1513 
	#R_SPARC_WDISP10
 88

	)

1514 
	#R_SPARC_JMP_IREL
 248

	)

1515 
	#R_SPARC_IRELATIVE
 249

	)

1516 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1517 
	#R_SPARC_GNU_VTENTRY
 251

	)

1518 
	#R_SPARC_REV32
 252

	)

1520 
	#R_SPARC_NUM
 253

	)

1524 
	#DT_SPARC_REGISTER
 0x70000001

	)

1525 
	#DT_SPARC_NUM
 2

	)

1531 
	#EF_MIPS_NOREORDER
 1

	)

1532 
	#EF_MIPS_PIC
 2

	)

1533 
	#EF_MIPS_CPIC
 4

	)

1534 
	#EF_MIPS_XGOT
 8

	)

1535 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1536 
	#EF_MIPS_ABI2
 32

	)

1537 
	#EF_MIPS_ABI_ON32
 64

	)

1538 
	#EF_MIPS_FP64
 512

	)

1539 
	#EF_MIPS_NAN2008
 1024

	)

1540 
	#EF_MIPS_ARCH
 0xf0000000

	)

1544 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1545 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1546 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1547 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1548 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1549 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1550 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1551 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1552 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1556 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1557 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1558 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1559 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1560 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1561 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1562 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1566 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1567 
	#SHN_MIPS_TEXT
 0xff01

	)

1568 
	#SHN_MIPS_DATA
 0xff02

	)

1569 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1570 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1574 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1575 
	#SHT_MIPS_MSYM
 0x70000001

	)

1576 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1577 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1578 
	#SHT_MIPS_UCODE
 0x70000004

	)

1579 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1580 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1581 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1582 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1583 
	#SHT_MIPS_RELD
 0x70000009

	)

1584 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1585 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1586 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1587 
	#SHT_MIPS_SHDR
 0x70000010

	)

1588 
	#SHT_MIPS_FDESC
 0x70000011

	)

1589 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1590 
	#SHT_MIPS_DENSE
 0x70000013

	)

1591 
	#SHT_MIPS_PDESC
 0x70000014

	)

1592 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1593 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1594 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1595 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1596 
	#SHT_MIPS_LINE
 0x70000019

	)

1597 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1598 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1599 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1600 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1601 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1602 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1603 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1604 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1605 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1606 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1607 
	#SHT_MIPS_XLATE
 0x70000024

	)

1608 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1609 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1610 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1611 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1612 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1616 
	#SHF_MIPS_GPREL
 0x10000000

	)

1617 
	#SHF_MIPS_MERGE
 0x20000000

	)

1618 
	#SHF_MIPS_ADDR
 0x40000000

	)

1619 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1620 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1621 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1622 
	#SHF_MIPS_NAMES
 0x02000000

	)

1623 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1629 
	#STO_MIPS_DEFAULT
 0x0

	)

1630 
	#STO_MIPS_INTERNAL
 0x1

	)

1631 
	#STO_MIPS_HIDDEN
 0x2

	)

1632 
	#STO_MIPS_PROTECTED
 0x3

	)

1633 
	#STO_MIPS_PLT
 0x8

	)

1634 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1637 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1645 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1646 
Elf32_W‹d
 
	mgt_unu£d
;

1647 } 
	mgt_hódî
;

1650 
Elf32_W‹d
 
	mgt_g_vÆue
;

1651 
Elf32_W‹d
 
	mgt_byãs
;

1652 } 
	mgt_íåy
;

1653 } 
	tElf32_g±ab
;

1659 
Elf32_W‹d
 
	mri_g¥mask
;

1660 
Elf32_W‹d
 
	mri_˝rmask
[4];

1661 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1662 } 
	tElf32_RegInfo
;

1668 
	mköd
;

1670 
	msize
;

1671 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1673 
Elf32_W‹d
 
	möfo
;

1674 } 
	tElf_O±i⁄s
;

1678 
	#ODK_NULL
 0

	)

1679 
	#ODK_REGINFO
 1

	)

1680 
	#ODK_EXCEPTIONS
 2

	)

1681 
	#ODK_PAD
 3

	)

1682 
	#ODK_HWPATCH
 4

	)

1683 
	#ODK_FILL
 5

	)

1684 
	#ODK_TAGS
 6

	)

1685 
	#ODK_HWAND
 7

	)

1686 
	#ODK_HWOR
 8

	)

1690 
	#OEX_FPU_MIN
 0x1‡

	)

1691 
	#OEX_FPU_MAX
 0x1f00

	)

1692 
	#OEX_PAGE0
 0x10000

	)

1693 
	#OEX_SMM
 0x20000

	)

1694 
	#OEX_FPDBUG
 0x40000

	)

1695 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1696 
	#OEX_DISMISS
 0x80000

	)

1698 
	#OEX_FPU_INVAL
 0x10

	)

1699 
	#OEX_FPU_DIV0
 0x08

	)

1700 
	#OEX_FPU_OFLO
 0x04

	)

1701 
	#OEX_FPU_UFLO
 0x02

	)

1702 
	#OEX_FPU_INEX
 0x01

	)

1706 
	#OHW_R4KEOP
 0x1

	)

1707 
	#OHW_R8KPFETCH
 0x2

	)

1708 
	#OHW_R5KEOP
 0x4

	)

1709 
	#OHW_R5KCVTL
 0x8

	)

1711 
	#OPAD_PREFIX
 0x1

	)

1712 
	#OPAD_POSTFIX
 0x2

	)

1713 
	#OPAD_SYMBOL
 0x4

	)

1719 
Elf32_W‹d
 
	mhwp_Êags1
;

1720 
Elf32_W‹d
 
	mhwp_Êags2
;

1721 } 
	tElf_O±i⁄s_Hw
;

1725 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1726 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1730 
	#R_MIPS_NONE
 0

	)

1731 
	#R_MIPS_16
 1

	)

1732 
	#R_MIPS_32
 2

	)

1733 
	#R_MIPS_REL32
 3

	)

1734 
	#R_MIPS_26
 4

	)

1735 
	#R_MIPS_HI16
 5

	)

1736 
	#R_MIPS_LO16
 6

	)

1737 
	#R_MIPS_GPREL16
 7

	)

1738 
	#R_MIPS_LITERAL
 8

	)

1739 
	#R_MIPS_GOT16
 9

	)

1740 
	#R_MIPS_PC16
 10

	)

1741 
	#R_MIPS_CALL16
 11

	)

1742 
	#R_MIPS_GPREL32
 12

	)

1744 
	#R_MIPS_SHIFT5
 16

	)

1745 
	#R_MIPS_SHIFT6
 17

	)

1746 
	#R_MIPS_64
 18

	)

1747 
	#R_MIPS_GOT_DISP
 19

	)

1748 
	#R_MIPS_GOT_PAGE
 20

	)

1749 
	#R_MIPS_GOT_OFST
 21

	)

1750 
	#R_MIPS_GOT_HI16
 22

	)

1751 
	#R_MIPS_GOT_LO16
 23

	)

1752 
	#R_MIPS_SUB
 24

	)

1753 
	#R_MIPS_INSERT_A
 25

	)

1754 
	#R_MIPS_INSERT_B
 26

	)

1755 
	#R_MIPS_DELETE
 27

	)

1756 
	#R_MIPS_HIGHER
 28

	)

1757 
	#R_MIPS_HIGHEST
 29

	)

1758 
	#R_MIPS_CALL_HI16
 30

	)

1759 
	#R_MIPS_CALL_LO16
 31

	)

1760 
	#R_MIPS_SCN_DISP
 32

	)

1761 
	#R_MIPS_REL16
 33

	)

1762 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1763 
	#R_MIPS_PJUMP
 35

	)

1764 
	#R_MIPS_RELGOT
 36

	)

1765 
	#R_MIPS_JALR
 37

	)

1766 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1767 
	#R_MIPS_TLS_DTPREL32
 39

	)

1768 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1769 
	#R_MIPS_TLS_DTPREL64
 41

	)

1770 
	#R_MIPS_TLS_GD
 42

	)

1771 
	#R_MIPS_TLS_LDM
 43

	)

1772 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1773 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1774 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1775 
	#R_MIPS_TLS_TPREL32
 47

	)

1776 
	#R_MIPS_TLS_TPREL64
 48

	)

1777 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1778 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1779 
	#R_MIPS_GLOB_DAT
 51

	)

1780 
	#R_MIPS_COPY
 126

	)

1781 
	#R_MIPS_JUMP_SLOT
 127

	)

1783 
	#R_MIPS_NUM
 128

	)

1787 
	#PT_MIPS_REGINFO
 0x70000000

	)

1788 
	#PT_MIPS_RTPROC
 0x70000001

	)

1789 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1790 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1794 
	#PF_MIPS_LOCAL
 0x10000000

	)

1798 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1799 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1800 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1801 
	#DT_MIPS_IVERSION
 0x70000004

	)

1802 
	#DT_MIPS_FLAGS
 0x70000005

	)

1803 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1804 
	#DT_MIPS_MSYM
 0x70000007

	)

1805 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1806 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1807 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1808 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1809 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1810 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1811 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1812 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1813 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1814 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1815 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1816 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1818 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1819 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1821 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1822 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1824 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1826 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1828 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1830 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1832 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1833 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1834 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1835 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1836 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1837 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1838 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1839 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1840 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1841 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1842 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1843 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1845 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1847 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1848 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1849 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1851 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1855 
	#DT_MIPS_RWPLT
 0x70000034

	)

1859 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1860 
	#DT_MIPS_NUM
 0x36

	)

1864 
	#RHF_NONE
 0

	)

1865 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1866 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1867 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1868 
	#RHF_NO_MOVE
 (1 << 3)

	)

1869 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1870 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1871 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1872 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1873 
	#RHF_PIXIE
 (1 << 8)

	)

1874 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1875 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1876 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1877 
	#RHF_CORD
 (1 << 12)

	)

1878 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1879 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1885 
Elf32_W‹d
 
	ml_«me
;

1886 
Elf32_W‹d
 
	ml_time_°amp
;

1887 
Elf32_W‹d
 
	ml_checksum
;

1888 
Elf32_W‹d
 
	ml_vîsi⁄
;

1889 
Elf32_W‹d
 
	ml_Êags
;

1890 } 
	tElf32_Lib
;

1894 
Elf64_W‹d
 
	ml_«me
;

1895 
Elf64_W‹d
 
	ml_time_°amp
;

1896 
Elf64_W‹d
 
	ml_checksum
;

1897 
Elf64_W‹d
 
	ml_vîsi⁄
;

1898 
Elf64_W‹d
 
	ml_Êags
;

1899 } 
	tElf64_Lib
;

1904 
	#LL_NONE
 0

	)

1905 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1906 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1907 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1908 
	#LL_EXPORTS
 (1 << 3)

	)

1909 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1910 
	#LL_DELTA
 (1 << 5)

	)

1914 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1919 
Elf32_HÆf
 
	mvîsi⁄
;

1921 
	miß_Àvñ
;

1923 
	miß_ªv
;

1925 
	mg¥_size
;

1927 
	m˝r1_size
;

1929 
	m˝r2_size
;

1931 
	mÂ_abi
;

1933 
Elf32_W‹d
 
	miß_ext
;

1935 
Elf32_W‹d
 
	ma£s
;

1937 
Elf32_W‹d
 
	mÊags1
;

1938 
Elf32_W‹d
 
	mÊags2
;

1939 } 
	tElf_MIPS_ABIFœgs_v0
;

1943 
	#MIPS_AFL_REG_NONE
 0x00

	)

1944 
	#MIPS_AFL_REG_32
 0x01

	)

1945 
	#MIPS_AFL_REG_64
 0x02

	)

1946 
	#MIPS_AFL_REG_128
 0x03

	)

1950 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1951 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1952 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1953 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1954 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1955 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1956 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1957 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1958 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1959 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1960 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1961 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1962 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1963 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1967 
	#MIPS_AFL_EXT_XLR
 1

	)

1968 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1969 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1970 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1971 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1972 
	#MIPS_AFL_EXT_5900
 6

	)

1973 
	#MIPS_AFL_EXT_4650
 7

	)

1974 
	#MIPS_AFL_EXT_4010
 8

	)

1975 
	#MIPS_AFL_EXT_4100
 9

	)

1976 
	#MIPS_AFL_EXT_3900
 10

	)

1977 
	#MIPS_AFL_EXT_10000
 11

	)

1978 
	#MIPS_AFL_EXT_SB1
 12

	)

1979 
	#MIPS_AFL_EXT_4111
 13

	)

1980 
	#MIPS_AFL_EXT_4120
 14

	)

1981 
	#MIPS_AFL_EXT_5400
 15

	)

1982 
	#MIPS_AFL_EXT_5500
 16

	)

1983 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1984 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1987 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1993 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

1995 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

1997 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

1999 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2001 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2003 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2005 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2007 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2009 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2016 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2017 
	#EF_PARISC_EXT
 0x00020000

	)

2018 
	#EF_PARISC_LSB
 0x00040000

	)

2019 
	#EF_PARISC_WIDE
 0x00080000

	)

2020 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2022 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2023 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2027 
	#EFA_PARISC_1_0
 0x020b

	)

2028 
	#EFA_PARISC_1_1
 0x0210

	)

2029 
	#EFA_PARISC_2_0
 0x0214

	)

2033 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2035 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2039 
	#SHT_PARISC_EXT
 0x70000000

	)

2040 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2041 
	#SHT_PARISC_DOC
 0x70000002

	)

2045 
	#SHF_PARISC_SHORT
 0x20000000

	)

2046 
	#SHF_PARISC_HUGE
 0x40000000

	)

2047 
	#SHF_PARISC_SBP
 0x80000000

	)

2051 
	#STT_PARISC_MILLICODE
 13

	)

2053 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2054 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2058 
	#R_PARISC_NONE
 0

	)

2059 
	#R_PARISC_DIR32
 1

	)

2060 
	#R_PARISC_DIR21L
 2

	)

2061 
	#R_PARISC_DIR17R
 3

	)

2062 
	#R_PARISC_DIR17F
 4

	)

2063 
	#R_PARISC_DIR14R
 6

	)

2064 
	#R_PARISC_PCREL32
 9

	)

2065 
	#R_PARISC_PCREL21L
 10

	)

2066 
	#R_PARISC_PCREL17R
 11

	)

2067 
	#R_PARISC_PCREL17F
 12

	)

2068 
	#R_PARISC_PCREL14R
 14

	)

2069 
	#R_PARISC_DPREL21L
 18

	)

2070 
	#R_PARISC_DPREL14R
 22

	)

2071 
	#R_PARISC_GPREL21L
 26

	)

2072 
	#R_PARISC_GPREL14R
 30

	)

2073 
	#R_PARISC_LTOFF21L
 34

	)

2074 
	#R_PARISC_LTOFF14R
 38

	)

2075 
	#R_PARISC_SECREL32
 41

	)

2076 
	#R_PARISC_SEGBASE
 48

	)

2077 
	#R_PARISC_SEGREL32
 49

	)

2078 
	#R_PARISC_PLTOFF21L
 50

	)

2079 
	#R_PARISC_PLTOFF14R
 54

	)

2080 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2081 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2082 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2083 
	#R_PARISC_FPTR64
 64

	)

2084 
	#R_PARISC_PLABEL32
 65

	)

2085 
	#R_PARISC_PLABEL21L
 66

	)

2086 
	#R_PARISC_PLABEL14R
 70

	)

2087 
	#R_PARISC_PCREL64
 72

	)

2088 
	#R_PARISC_PCREL22F
 74

	)

2089 
	#R_PARISC_PCREL14WR
 75

	)

2090 
	#R_PARISC_PCREL14DR
 76

	)

2091 
	#R_PARISC_PCREL16F
 77

	)

2092 
	#R_PARISC_PCREL16WF
 78

	)

2093 
	#R_PARISC_PCREL16DF
 79

	)

2094 
	#R_PARISC_DIR64
 80

	)

2095 
	#R_PARISC_DIR14WR
 83

	)

2096 
	#R_PARISC_DIR14DR
 84

	)

2097 
	#R_PARISC_DIR16F
 85

	)

2098 
	#R_PARISC_DIR16WF
 86

	)

2099 
	#R_PARISC_DIR16DF
 87

	)

2100 
	#R_PARISC_GPREL64
 88

	)

2101 
	#R_PARISC_GPREL14WR
 91

	)

2102 
	#R_PARISC_GPREL14DR
 92

	)

2103 
	#R_PARISC_GPREL16F
 93

	)

2104 
	#R_PARISC_GPREL16WF
 94

	)

2105 
	#R_PARISC_GPREL16DF
 95

	)

2106 
	#R_PARISC_LTOFF64
 96

	)

2107 
	#R_PARISC_LTOFF14WR
 99

	)

2108 
	#R_PARISC_LTOFF14DR
 100

	)

2109 
	#R_PARISC_LTOFF16F
 101

	)

2110 
	#R_PARISC_LTOFF16WF
 102

	)

2111 
	#R_PARISC_LTOFF16DF
 103

	)

2112 
	#R_PARISC_SECREL64
 104

	)

2113 
	#R_PARISC_SEGREL64
 112

	)

2114 
	#R_PARISC_PLTOFF14WR
 115

	)

2115 
	#R_PARISC_PLTOFF14DR
 116

	)

2116 
	#R_PARISC_PLTOFF16F
 117

	)

2117 
	#R_PARISC_PLTOFF16WF
 118

	)

2118 
	#R_PARISC_PLTOFF16DF
 119

	)

2119 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2120 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2121 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2122 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2123 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2124 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2125 
	#R_PARISC_LORESERVE
 128

	)

2126 
	#R_PARISC_COPY
 128

	)

2127 
	#R_PARISC_IPLT
 129

	)

2128 
	#R_PARISC_EPLT
 130

	)

2129 
	#R_PARISC_TPREL32
 153

	)

2130 
	#R_PARISC_TPREL21L
 154

	)

2131 
	#R_PARISC_TPREL14R
 158

	)

2132 
	#R_PARISC_LTOFF_TP21L
 162

	)

2133 
	#R_PARISC_LTOFF_TP14R
 166

	)

2134 
	#R_PARISC_LTOFF_TP14F
 167

	)

2135 
	#R_PARISC_TPREL64
 216

	)

2136 
	#R_PARISC_TPREL14WR
 219

	)

2137 
	#R_PARISC_TPREL14DR
 220

	)

2138 
	#R_PARISC_TPREL16F
 221

	)

2139 
	#R_PARISC_TPREL16WF
 222

	)

2140 
	#R_PARISC_TPREL16DF
 223

	)

2141 
	#R_PARISC_LTOFF_TP64
 224

	)

2142 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2143 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2144 
	#R_PARISC_LTOFF_TP16F
 229

	)

2145 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2146 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2147 
	#R_PARISC_GNU_VTENTRY
 232

	)

2148 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2149 
	#R_PARISC_TLS_GD21L
 234

	)

2150 
	#R_PARISC_TLS_GD14R
 235

	)

2151 
	#R_PARISC_TLS_GDCALL
 236

	)

2152 
	#R_PARISC_TLS_LDM21L
 237

	)

2153 
	#R_PARISC_TLS_LDM14R
 238

	)

2154 
	#R_PARISC_TLS_LDMCALL
 239

	)

2155 
	#R_PARISC_TLS_LDO21L
 240

	)

2156 
	#R_PARISC_TLS_LDO14R
 241

	)

2157 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2158 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2159 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2160 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2161 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2162 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2163 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2164 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2165 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2166 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2167 
	#R_PARISC_HIRESERVE
 255

	)

2171 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2172 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2173 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2174 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2175 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2176 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2177 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2178 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2179 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2180 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2181 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2182 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2183 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2184 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2185 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2187 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2188 
	#PT_PARISC_UNWIND
 0x70000001

	)

2192 
	#PF_PARISC_SBP
 0x08000000

	)

2194 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2195 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2196 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2197 
	#PF_HP_CODE
 0x01000000

	)

2198 
	#PF_HP_MODIFY
 0x02000000

	)

2199 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2200 
	#PF_HP_SBP
 0x08000000

	)

2207 
	#EF_ALPHA_32BIT
 1

	)

2208 
	#EF_ALPHA_CANRELAX
 2

	)

2213 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2214 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2218 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2221 
	#STO_ALPHA_NOPV
 0x80

	)

2222 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2226 
	#R_ALPHA_NONE
 0

	)

2227 
	#R_ALPHA_REFLONG
 1

	)

2228 
	#R_ALPHA_REFQUAD
 2

	)

2229 
	#R_ALPHA_GPREL32
 3

	)

2230 
	#R_ALPHA_LITERAL
 4

	)

2231 
	#R_ALPHA_LITUSE
 5

	)

2232 
	#R_ALPHA_GPDISP
 6

	)

2233 
	#R_ALPHA_BRADDR
 7

	)

2234 
	#R_ALPHA_HINT
 8

	)

2235 
	#R_ALPHA_SREL16
 9

	)

2236 
	#R_ALPHA_SREL32
 10

	)

2237 
	#R_ALPHA_SREL64
 11

	)

2238 
	#R_ALPHA_GPRELHIGH
 17

	)

2239 
	#R_ALPHA_GPRELLOW
 18

	)

2240 
	#R_ALPHA_GPREL16
 19

	)

2241 
	#R_ALPHA_COPY
 24

	)

2242 
	#R_ALPHA_GLOB_DAT
 25

	)

2243 
	#R_ALPHA_JMP_SLOT
 26

	)

2244 
	#R_ALPHA_RELATIVE
 27

	)

2245 
	#R_ALPHA_TLS_GD_HI
 28

	)

2246 
	#R_ALPHA_TLSGD
 29

	)

2247 
	#R_ALPHA_TLS_LDM
 30

	)

2248 
	#R_ALPHA_DTPMOD64
 31

	)

2249 
	#R_ALPHA_GOTDTPREL
 32

	)

2250 
	#R_ALPHA_DTPREL64
 33

	)

2251 
	#R_ALPHA_DTPRELHI
 34

	)

2252 
	#R_ALPHA_DTPRELLO
 35

	)

2253 
	#R_ALPHA_DTPREL16
 36

	)

2254 
	#R_ALPHA_GOTTPREL
 37

	)

2255 
	#R_ALPHA_TPREL64
 38

	)

2256 
	#R_ALPHA_TPRELHI
 39

	)

2257 
	#R_ALPHA_TPRELLO
 40

	)

2258 
	#R_ALPHA_TPREL16
 41

	)

2260 
	#R_ALPHA_NUM
 46

	)

2263 
	#LITUSE_ALPHA_ADDR
 0

	)

2264 
	#LITUSE_ALPHA_BASE
 1

	)

2265 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2266 
	#LITUSE_ALPHA_JSR
 3

	)

2267 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2268 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2271 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2272 
	#DT_ALPHA_NUM
 1

	)

2277 
	#EF_PPC_EMB
 0x80000000

	)

2280 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2281 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2285 
	#R_PPC_NONE
 0

	)

2286 
	#R_PPC_ADDR32
 1

	)

2287 
	#R_PPC_ADDR24
 2

	)

2288 
	#R_PPC_ADDR16
 3

	)

2289 
	#R_PPC_ADDR16_LO
 4

	)

2290 
	#R_PPC_ADDR16_HI
 5

	)

2291 
	#R_PPC_ADDR16_HA
 6

	)

2292 
	#R_PPC_ADDR14
 7

	)

2293 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2294 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2295 
	#R_PPC_REL24
 10

	)

2296 
	#R_PPC_REL14
 11

	)

2297 
	#R_PPC_REL14_BRTAKEN
 12

	)

2298 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2299 
	#R_PPC_GOT16
 14

	)

2300 
	#R_PPC_GOT16_LO
 15

	)

2301 
	#R_PPC_GOT16_HI
 16

	)

2302 
	#R_PPC_GOT16_HA
 17

	)

2303 
	#R_PPC_PLTREL24
 18

	)

2304 
	#R_PPC_COPY
 19

	)

2305 
	#R_PPC_GLOB_DAT
 20

	)

2306 
	#R_PPC_JMP_SLOT
 21

	)

2307 
	#R_PPC_RELATIVE
 22

	)

2308 
	#R_PPC_LOCAL24PC
 23

	)

2309 
	#R_PPC_UADDR32
 24

	)

2310 
	#R_PPC_UADDR16
 25

	)

2311 
	#R_PPC_REL32
 26

	)

2312 
	#R_PPC_PLT32
 27

	)

2313 
	#R_PPC_PLTREL32
 28

	)

2314 
	#R_PPC_PLT16_LO
 29

	)

2315 
	#R_PPC_PLT16_HI
 30

	)

2316 
	#R_PPC_PLT16_HA
 31

	)

2317 
	#R_PPC_SDAREL16
 32

	)

2318 
	#R_PPC_SECTOFF
 33

	)

2319 
	#R_PPC_SECTOFF_LO
 34

	)

2320 
	#R_PPC_SECTOFF_HI
 35

	)

2321 
	#R_PPC_SECTOFF_HA
 36

	)

2324 
	#R_PPC_TLS
 67

	)

2325 
	#R_PPC_DTPMOD32
 68

	)

2326 
	#R_PPC_TPREL16
 69

	)

2327 
	#R_PPC_TPREL16_LO
 70

	)

2328 
	#R_PPC_TPREL16_HI
 71

	)

2329 
	#R_PPC_TPREL16_HA
 72

	)

2330 
	#R_PPC_TPREL32
 73

	)

2331 
	#R_PPC_DTPREL16
 74

	)

2332 
	#R_PPC_DTPREL16_LO
 75

	)

2333 
	#R_PPC_DTPREL16_HI
 76

	)

2334 
	#R_PPC_DTPREL16_HA
 77

	)

2335 
	#R_PPC_DTPREL32
 78

	)

2336 
	#R_PPC_GOT_TLSGD16
 79

	)

2337 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2338 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2339 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2340 
	#R_PPC_GOT_TLSLD16
 83

	)

2341 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2342 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2343 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2344 
	#R_PPC_GOT_TPREL16
 87

	)

2345 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2346 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2347 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2348 
	#R_PPC_GOT_DTPREL16
 91

	)

2349 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2350 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2351 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2352 
	#R_PPC_TLSGD
 95

	)

2353 
	#R_PPC_TLSLD
 96

	)

2357 
	#R_PPC_EMB_NADDR32
 101

	)

2358 
	#R_PPC_EMB_NADDR16
 102

	)

2359 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2360 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2361 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2362 
	#R_PPC_EMB_SDAI16
 106

	)

2363 
	#R_PPC_EMB_SDA2I16
 107

	)

2364 
	#R_PPC_EMB_SDA2REL
 108

	)

2365 
	#R_PPC_EMB_SDA21
 109

	)

2366 
	#R_PPC_EMB_MRKREF
 110

	)

2367 
	#R_PPC_EMB_RELSEC16
 111

	)

2368 
	#R_PPC_EMB_RELST_LO
 112

	)

2369 
	#R_PPC_EMB_RELST_HI
 113

	)

2370 
	#R_PPC_EMB_RELST_HA
 114

	)

2371 
	#R_PPC_EMB_BIT_FLD
 115

	)

2372 
	#R_PPC_EMB_RELSDA
 116

	)

2375 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2376 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2377 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2378 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2379 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2380 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2383 
	#R_PPC_IRELATIVE
 248

	)

2386 
	#R_PPC_REL16
 249

	)

2387 
	#R_PPC_REL16_LO
 250

	)

2388 
	#R_PPC_REL16_HI
 251

	)

2389 
	#R_PPC_REL16_HA
 252

	)

2393 
	#R_PPC_TOC16
 255

	)

2396 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2397 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2398 
	#DT_PPC_NUM
 2

	)

2401 
	#PPC_OPT_TLS
 1

	)

2404 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2405 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2406 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2407 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2408 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2409 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2410 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2411 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2412 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2413 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2414 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2415 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2416 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2417 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2418 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2419 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2420 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2421 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2423 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2424 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2425 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2426 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2428 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2429 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2430 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2431 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2432 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2433 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2434 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2435 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2437 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2438 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2439 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2440 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2441 
	#R_PPC64_ADDR30
 37

	)

2442 
	#R_PPC64_ADDR64
 38

	)

2443 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2444 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2445 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2446 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2447 
	#R_PPC64_UADDR64
 43

	)

2448 
	#R_PPC64_REL64
 44

	)

2449 
	#R_PPC64_PLT64
 45

	)

2450 
	#R_PPC64_PLTREL64
 46

	)

2451 
	#R_PPC64_TOC16
 47

	)

2452 
	#R_PPC64_TOC16_LO
 48

	)

2453 
	#R_PPC64_TOC16_HI
 49

	)

2454 
	#R_PPC64_TOC16_HA
 50

	)

2455 
	#R_PPC64_TOC
 51

	)

2456 
	#R_PPC64_PLTGOT16
 52

	)

2457 
	#R_PPC64_PLTGOT16_LO
 53

	)

2458 
	#R_PPC64_PLTGOT16_HI
 54

	)

2459 
	#R_PPC64_PLTGOT16_HA
 55

	)

2461 
	#R_PPC64_ADDR16_DS
 56

	)

2462 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2463 
	#R_PPC64_GOT16_DS
 58

	)

2464 
	#R_PPC64_GOT16_LO_DS
 59

	)

2465 
	#R_PPC64_PLT16_LO_DS
 60

	)

2466 
	#R_PPC64_SECTOFF_DS
 61

	)

2467 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2468 
	#R_PPC64_TOC16_DS
 63

	)

2469 
	#R_PPC64_TOC16_LO_DS
 64

	)

2470 
	#R_PPC64_PLTGOT16_DS
 65

	)

2471 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2474 
	#R_PPC64_TLS
 67

	)

2475 
	#R_PPC64_DTPMOD64
 68

	)

2476 
	#R_PPC64_TPREL16
 69

	)

2477 
	#R_PPC64_TPREL16_LO
 70

	)

2478 
	#R_PPC64_TPREL16_HI
 71

	)

2479 
	#R_PPC64_TPREL16_HA
 72

	)

2480 
	#R_PPC64_TPREL64
 73

	)

2481 
	#R_PPC64_DTPREL16
 74

	)

2482 
	#R_PPC64_DTPREL16_LO
 75

	)

2483 
	#R_PPC64_DTPREL16_HI
 76

	)

2484 
	#R_PPC64_DTPREL16_HA
 77

	)

2485 
	#R_PPC64_DTPREL64
 78

	)

2486 
	#R_PPC64_GOT_TLSGD16
 79

	)

2487 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2488 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2489 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2490 
	#R_PPC64_GOT_TLSLD16
 83

	)

2491 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2492 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2493 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2494 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2495 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2496 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2497 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2498 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2499 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2500 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2501 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2502 
	#R_PPC64_TPREL16_DS
 95

	)

2503 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2504 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2505 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2506 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2507 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2508 
	#R_PPC64_DTPREL16_DS
 101

	)

2509 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2510 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2511 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2512 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2513 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2514 
	#R_PPC64_TLSGD
 107

	)

2515 
	#R_PPC64_TLSLD
 108

	)

2516 
	#R_PPC64_TOCSAVE
 109

	)

2519 
	#R_PPC64_ADDR16_HIGH
 110

	)

2520 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2521 
	#R_PPC64_TPREL16_HIGH
 112

	)

2522 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2523 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2524 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2527 
	#R_PPC64_JMP_IREL
 247

	)

2528 
	#R_PPC64_IRELATIVE
 248

	)

2529 
	#R_PPC64_REL16
 249

	)

2530 
	#R_PPC64_REL16_LO
 250

	)

2531 
	#R_PPC64_REL16_HI
 251

	)

2532 
	#R_PPC64_REL16_HA
 252

	)

2538 
	#EF_PPC64_ABI
 3

	)

2541 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2542 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2543 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2544 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2545 
	#DT_PPC64_NUM
 4

	)

2548 
	#PPC64_OPT_TLS
 1

	)

2549 
	#PPC64_OPT_MULTI_TOC
 2

	)

2550 
	#PPC64_OPT_LOCALENTRY
 4

	)

2553 
	#STO_PPC64_LOCAL_BIT
 5

	)

2554 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2555 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2556 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2562 
	#EF_ARM_RELEXEC
 0x01

	)

2563 
	#EF_ARM_HASENTRY
 0x02

	)

2564 
	#EF_ARM_INTERWORK
 0x04

	)

2565 
	#EF_ARM_APCS_26
 0x08

	)

2566 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2567 
	#EF_ARM_PIC
 0x20

	)

2568 
	#EF_ARM_ALIGN8
 0x40

	)

2569 
	#EF_ARM_NEW_ABI
 0x80

	)

2570 
	#EF_ARM_OLD_ABI
 0x100

	)

2571 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2572 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2573 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2575 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2576 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2581 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2582 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2583 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2584 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2587 
	#EF_ARM_BE8
 0x00800000

	)

2588 
	#EF_ARM_LE8
 0x00400000

	)

2590 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2591 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2592 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2593 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2594 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2595 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2596 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2599 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2600 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2603 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2604 
	#SHF_ARM_COMDEF
 0x80000000

	)

2608 
	#PF_ARM_SB
 0x10000000

	)

2610 
	#PF_ARM_PI
 0x20000000

	)

2611 
	#PF_ARM_ABS
 0x40000000

	)

2614 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2617 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2618 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2619 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2624 
	#R_AARCH64_NONE
 0

	)

2627 
	#R_AARCH64_P32_ABS32
 1

	)

2628 
	#R_AARCH64_P32_COPY
 180

	)

2629 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2630 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2631 
	#R_AARCH64_P32_RELATIVE
 183

	)

2632 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2633 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2634 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2635 
	#R_AARCH64_P32_TLSDESC
 187

	)

2636 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2639 
	#R_AARCH64_ABS64
 257

	)

2640 
	#R_AARCH64_ABS32
 258

	)

2641 
	#R_AARCH64_ABS16
 259

	)

2642 
	#R_AARCH64_PREL64
 260

	)

2643 
	#R_AARCH64_PREL32
 261

	)

2644 
	#R_AARCH64_PREL16
 262

	)

2645 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2646 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2647 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2648 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2649 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2650 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2651 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2652 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2653 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2654 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2655 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2656 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2657 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2658 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2659 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2660 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2661 
	#R_AARCH64_TSTBR14
 279

	)

2662 
	#R_AARCH64_CONDBR19
 280

	)

2663 
	#R_AARCH64_JUMP26
 282

	)

2664 
	#R_AARCH64_CALL26
 283

	)

2665 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2666 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2667 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2668 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2669 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2670 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2671 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2672 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2673 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2674 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2675 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2676 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2677 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2678 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2679 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2680 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2681 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2682 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2683 
	#R_AARCH64_GOTREL64
 307

	)

2684 
	#R_AARCH64_GOTREL32
 308

	)

2685 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2686 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2687 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2688 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2689 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2690 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2691 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2692 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2693 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2694 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2695 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2696 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2697 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2698 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2699 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2700 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2701 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2702 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2703 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2704 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2705 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2706 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2707 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2708 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2709 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2710 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2711 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2712 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2713 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2714 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2715 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2716 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2717 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2718 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2719 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2720 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2721 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2722 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2723 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2724 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2725 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2726 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2727 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2728 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2729 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2730 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2731 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2732 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2733 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2734 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2735 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2736 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2737 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2738 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2739 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2740 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2741 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2742 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2743 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2744 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2745 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2746 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2747 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2748 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2749 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2750 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2751 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2752 
	#R_AARCH64_COPY
 1024

	)

2753 
	#R_AARCH64_GLOB_DAT
 1025

	)

2754 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2755 
	#R_AARCH64_RELATIVE
 1027

	)

2756 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2757 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2758 
	#R_AARCH64_TLS_TPREL
 1030

	)

2759 
	#R_AARCH64_TLSDESC
 1031

	)

2760 
	#R_AARCH64_IRELATIVE
 1032

	)

2764 
	#R_ARM_NONE
 0

	)

2765 
	#R_ARM_PC24
 1

	)

2767 
	#R_ARM_ABS32
 2

	)

2768 
	#R_ARM_REL32
 3

	)

2769 
	#R_ARM_PC13
 4

	)

2770 
	#R_ARM_ABS16
 5

	)

2771 
	#R_ARM_ABS12
 6

	)

2772 
	#R_ARM_THM_ABS5
 7

	)

2773 
	#R_ARM_ABS8
 8

	)

2774 
	#R_ARM_SBREL32
 9

	)

2775 
	#R_ARM_THM_PC22
 10

	)

2776 
	#R_ARM_THM_PC8
 11

	)

2778 
	#R_ARM_AMP_VCALL9
 12

	)

2779 
	#R_ARM_SWI24
 13

	)

2780 
	#R_ARM_TLS_DESC
 13

	)

2781 
	#R_ARM_THM_SWI8
 14

	)

2782 
	#R_ARM_XPC25
 15

	)

2783 
	#R_ARM_THM_XPC22
 16

	)

2784 
	#R_ARM_TLS_DTPMOD32
 17

	)

2785 
	#R_ARM_TLS_DTPOFF32
 18

	)

2786 
	#R_ARM_TLS_TPOFF32
 19

	)

2787 
	#R_ARM_COPY
 20

	)

2788 
	#R_ARM_GLOB_DAT
 21

	)

2789 
	#R_ARM_JUMP_SLOT
 22

	)

2790 
	#R_ARM_RELATIVE
 23

	)

2791 
	#R_ARM_GOTOFF
 24

	)

2792 
	#R_ARM_GOTPC
 25

	)

2793 
	#R_ARM_GOT32
 26

	)

2794 
	#R_ARM_PLT32
 27

	)

2795 
	#R_ARM_CALL
 28

	)

2796 
	#R_ARM_JUMP24
 29

	)

2798 
	#R_ARM_THM_JUMP24
 30

	)

2799 
	#R_ARM_BASE_ABS
 31

	)

2800 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2801 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2802 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2803 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2804 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2805 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2806 
	#R_ARM_TARGET1
 38

	)

2807 
	#R_ARM_SBREL31
 39

	)

2808 
	#R_ARM_V4BX
 40

	)

2809 
	#R_ARM_TARGET2
 41

	)

2810 
	#R_ARM_PREL31
 42

	)

2811 
	#R_ARM_MOVW_ABS_NC
 43

	)

2812 
	#R_ARM_MOVT_ABS
 44

	)

2813 
	#R_ARM_MOVW_PREL_NC
 45

	)

2814 
	#R_ARM_MOVT_PREL
 46

	)

2815 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2816 
	#R_ARM_THM_MOVT_ABS
 48

	)

2818 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2820 
	#R_ARM_THM_MOVT_PREL
 50

	)

2822 
	#R_ARM_THM_JUMP19
 51

	)

2824 
	#R_ARM_THM_JUMP6
 52

	)

2826 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2828 
	#R_ARM_THM_PC12
 54

	)

2830 
	#R_ARM_ABS32_NOI
 55

	)

2831 
	#R_ARM_REL32_NOI
 56

	)

2832 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2833 
	#R_ARM_ALU_PC_G0
 58

	)

2834 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2835 
	#R_ARM_ALU_PC_G1
 60

	)

2836 
	#R_ARM_ALU_PC_G2
 61

	)

2837 
	#R_ARM_LDR_PC_G1
 62

	)

2838 
	#R_ARM_LDR_PC_G2
 63

	)

2839 
	#R_ARM_LDRS_PC_G0
 64

	)

2841 
	#R_ARM_LDRS_PC_G1
 65

	)

2843 
	#R_ARM_LDRS_PC_G2
 66

	)

2845 
	#R_ARM_LDC_PC_G0
 67

	)

2846 
	#R_ARM_LDC_PC_G1
 68

	)

2847 
	#R_ARM_LDC_PC_G2
 69

	)

2848 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2849 
	#R_ARM_ALU_SB_G0
 71

	)

2850 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2851 
	#R_ARM_ALU_SB_G1
 73

	)

2852 
	#R_ARM_ALU_SB_G2
 74

	)

2853 
	#R_ARM_LDR_SB_G0
 75

	)

2855 
	#R_ARM_LDR_SB_G1
 76

	)

2857 
	#R_ARM_LDR_SB_G2
 77

	)

2859 
	#R_ARM_LDRS_SB_G0
 78

	)

2861 
	#R_ARM_LDRS_SB_G1
 79

	)

2863 
	#R_ARM_LDRS_SB_G2
 80

	)

2865 
	#R_ARM_LDC_SB_G0
 81

	)

2866 
	#R_ARM_LDC_SB_G1
 82

	)

2867 
	#R_ARM_LDC_SB_G2
 83

	)

2868 
	#R_ARM_MOVW_BREL_NC
 84

	)

2870 
	#R_ARM_MOVT_BREL
 85

	)

2872 
	#R_ARM_MOVW_BREL
 86

	)

2874 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2876 
	#R_ARM_THM_MOVT_BREL
 88

	)

2878 
	#R_ARM_THM_MOVW_BREL
 89

	)

2880 
	#R_ARM_TLS_GOTDESC
 90

	)

2881 
	#R_ARM_TLS_CALL
 91

	)

2882 
	#R_ARM_TLS_DESCSEQ
 92

	)

2883 
	#R_ARM_THM_TLS_CALL
 93

	)

2884 
	#R_ARM_PLT32_ABS
 94

	)

2885 
	#R_ARM_GOT_ABS
 95

	)

2886 
	#R_ARM_GOT_PREL
 96

	)

2887 
	#R_ARM_GOT_BREL12
 97

	)

2889 
	#R_ARM_GOTOFF12
 98

	)

2891 
	#R_ARM_GOTRELAX
 99

	)

2892 
	#R_ARM_GNU_VTENTRY
 100

	)

2893 
	#R_ARM_GNU_VTINHERIT
 101

	)

2894 
	#R_ARM_THM_PC11
 102

	)

2895 
	#R_ARM_THM_PC9
 103

	)

2897 
	#R_ARM_TLS_GD32
 104

	)

2899 
	#R_ARM_TLS_LDM32
 105

	)

2901 
	#R_ARM_TLS_LDO32
 106

	)

2903 
	#R_ARM_TLS_IE32
 107

	)

2905 
	#R_ARM_TLS_LE32
 108

	)

2907 
	#R_ARM_TLS_LDO12
 109

	)

2909 
	#R_ARM_TLS_LE12
 110

	)

2911 
	#R_ARM_TLS_IE12GP
 111

	)

2913 
	#R_ARM_ME_TOO
 128

	)

2914 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2915 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2916 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2917 
	#R_ARM_THM_GOT_BREL12
 131

	)

2919 
	#R_ARM_IRELATIVE
 160

	)

2920 
	#R_ARM_RXPC25
 249

	)

2921 
	#R_ARM_RSBREL32
 250

	)

2922 
	#R_ARM_THM_RPC22
 251

	)

2923 
	#R_ARM_RREL32
 252

	)

2924 
	#R_ARM_RABS22
 253

	)

2925 
	#R_ARM_RPC24
 254

	)

2926 
	#R_ARM_RBASE
 255

	)

2928 
	#R_ARM_NUM
 256

	)

2933 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2934 
	#EF_IA_64_ABI64
 0x00000010

	)

2935 
	#EF_IA_64_ARCH
 0xff000000

	)

2938 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2939 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2940 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2941 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2942 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2945 
	#PF_IA_64_NORECOV
 0x80000000

	)

2948 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2949 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2952 
	#SHF_IA_64_SHORT
 0x10000000

	)

2953 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2956 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2957 
	#DT_IA_64_NUM
 1

	)

2960 
	#R_IA64_NONE
 0x00

	)

2961 
	#R_IA64_IMM14
 0x21

	)

2962 
	#R_IA64_IMM22
 0x22

	)

2963 
	#R_IA64_IMM64
 0x23

	)

2964 
	#R_IA64_DIR32MSB
 0x24

	)

2965 
	#R_IA64_DIR32LSB
 0x25

	)

2966 
	#R_IA64_DIR64MSB
 0x26

	)

2967 
	#R_IA64_DIR64LSB
 0x27

	)

2968 
	#R_IA64_GPREL22
 0x2®

	)

2969 
	#R_IA64_GPREL64I
 0x2b

	)

2970 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2971 
	#R_IA64_GPREL32LSB
 0x2d

	)

2972 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2973 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2974 
	#R_IA64_LTOFF22
 0x32

	)

2975 
	#R_IA64_LTOFF64I
 0x33

	)

2976 
	#R_IA64_PLTOFF22
 0x3®

	)

2977 
	#R_IA64_PLTOFF64I
 0x3b

	)

2978 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2979 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2980 
	#R_IA64_FPTR64I
 0x43

	)

2981 
	#R_IA64_FPTR32MSB
 0x44

	)

2982 
	#R_IA64_FPTR32LSB
 0x45

	)

2983 
	#R_IA64_FPTR64MSB
 0x46

	)

2984 
	#R_IA64_FPTR64LSB
 0x47

	)

2985 
	#R_IA64_PCREL60B
 0x48

	)

2986 
	#R_IA64_PCREL21B
 0x49

	)

2987 
	#R_IA64_PCREL21M
 0x4®

	)

2988 
	#R_IA64_PCREL21F
 0x4b

	)

2989 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2990 
	#R_IA64_PCREL32LSB
 0x4d

	)

2991 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2992 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2993 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2994 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2995 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2996 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2997 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2998 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2999 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3000 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3001 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3002 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3003 
	#R_IA64_SECREL32MSB
 0x64

	)

3004 
	#R_IA64_SECREL32LSB
 0x65

	)

3005 
	#R_IA64_SECREL64MSB
 0x66

	)

3006 
	#R_IA64_SECREL64LSB
 0x67

	)

3007 
	#R_IA64_REL32MSB
 0x6¯

	)

3008 
	#R_IA64_REL32LSB
 0x6d

	)

3009 
	#R_IA64_REL64MSB
 0x6ê

	)

3010 
	#R_IA64_REL64LSB
 0x6‡

	)

3011 
	#R_IA64_LTV32MSB
 0x74

	)

3012 
	#R_IA64_LTV32LSB
 0x75

	)

3013 
	#R_IA64_LTV64MSB
 0x76

	)

3014 
	#R_IA64_LTV64LSB
 0x77

	)

3015 
	#R_IA64_PCREL21BI
 0x79

	)

3016 
	#R_IA64_PCREL22
 0x7®

	)

3017 
	#R_IA64_PCREL64I
 0x7b

	)

3018 
	#R_IA64_IPLTMSB
 0x80

	)

3019 
	#R_IA64_IPLTLSB
 0x81

	)

3020 
	#R_IA64_COPY
 0x84

	)

3021 
	#R_IA64_SUB
 0x85

	)

3022 
	#R_IA64_LTOFF22X
 0x86

	)

3023 
	#R_IA64_LDXMOV
 0x87

	)

3024 
	#R_IA64_TPREL14
 0x91

	)

3025 
	#R_IA64_TPREL22
 0x92

	)

3026 
	#R_IA64_TPREL64I
 0x93

	)

3027 
	#R_IA64_TPREL64MSB
 0x96

	)

3028 
	#R_IA64_TPREL64LSB
 0x97

	)

3029 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3030 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3031 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3032 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3033 
	#R_IA64_DTPREL14
 0xb1

	)

3034 
	#R_IA64_DTPREL22
 0xb2

	)

3035 
	#R_IA64_DTPREL64I
 0xb3

	)

3036 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3037 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3038 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3039 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3040 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3045 
	#EF_SH_MACH_MASK
 0x1f

	)

3046 
	#EF_SH_UNKNOWN
 0x0

	)

3047 
	#EF_SH1
 0x1

	)

3048 
	#EF_SH2
 0x2

	)

3049 
	#EF_SH3
 0x3

	)

3050 
	#EF_SH_DSP
 0x4

	)

3051 
	#EF_SH3_DSP
 0x5

	)

3052 
	#EF_SH4AL_DSP
 0x6

	)

3053 
	#EF_SH3E
 0x8

	)

3054 
	#EF_SH4
 0x9

	)

3055 
	#EF_SH2E
 0xb

	)

3056 
	#EF_SH4A
 0xc

	)

3057 
	#EF_SH2A
 0xd

	)

3058 
	#EF_SH4_NOFPU
 0x10

	)

3059 
	#EF_SH4A_NOFPU
 0x11

	)

3060 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3061 
	#EF_SH2A_NOFPU
 0x13

	)

3062 
	#EF_SH3_NOMMU
 0x14

	)

3063 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3064 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3065 
	#EF_SH2A_SH4
 0x17

	)

3066 
	#EF_SH2A_SH3E
 0x18

	)

3069 
	#R_SH_NONE
 0

	)

3070 
	#R_SH_DIR32
 1

	)

3071 
	#R_SH_REL32
 2

	)

3072 
	#R_SH_DIR8WPN
 3

	)

3073 
	#R_SH_IND12W
 4

	)

3074 
	#R_SH_DIR8WPL
 5

	)

3075 
	#R_SH_DIR8WPZ
 6

	)

3076 
	#R_SH_DIR8BP
 7

	)

3077 
	#R_SH_DIR8W
 8

	)

3078 
	#R_SH_DIR8L
 9

	)

3079 
	#R_SH_SWITCH16
 25

	)

3080 
	#R_SH_SWITCH32
 26

	)

3081 
	#R_SH_USES
 27

	)

3082 
	#R_SH_COUNT
 28

	)

3083 
	#R_SH_ALIGN
 29

	)

3084 
	#R_SH_CODE
 30

	)

3085 
	#R_SH_DATA
 31

	)

3086 
	#R_SH_LABEL
 32

	)

3087 
	#R_SH_SWITCH8
 33

	)

3088 
	#R_SH_GNU_VTINHERIT
 34

	)

3089 
	#R_SH_GNU_VTENTRY
 35

	)

3090 
	#R_SH_TLS_GD_32
 144

	)

3091 
	#R_SH_TLS_LD_32
 145

	)

3092 
	#R_SH_TLS_LDO_32
 146

	)

3093 
	#R_SH_TLS_IE_32
 147

	)

3094 
	#R_SH_TLS_LE_32
 148

	)

3095 
	#R_SH_TLS_DTPMOD32
 149

	)

3096 
	#R_SH_TLS_DTPOFF32
 150

	)

3097 
	#R_SH_TLS_TPOFF32
 151

	)

3098 
	#R_SH_GOT32
 160

	)

3099 
	#R_SH_PLT32
 161

	)

3100 
	#R_SH_COPY
 162

	)

3101 
	#R_SH_GLOB_DAT
 163

	)

3102 
	#R_SH_JMP_SLOT
 164

	)

3103 
	#R_SH_RELATIVE
 165

	)

3104 
	#R_SH_GOTOFF
 166

	)

3105 
	#R_SH_GOTPC
 167

	)

3107 
	#R_SH_NUM
 256

	)

3113 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3117 
	#R_390_NONE
 0

	)

3118 
	#R_390_8
 1

	)

3119 
	#R_390_12
 2

	)

3120 
	#R_390_16
 3

	)

3121 
	#R_390_32
 4

	)

3122 
	#R_390_PC32
 5

	)

3123 
	#R_390_GOT12
 6

	)

3124 
	#R_390_GOT32
 7

	)

3125 
	#R_390_PLT32
 8

	)

3126 
	#R_390_COPY
 9

	)

3127 
	#R_390_GLOB_DAT
 10

	)

3128 
	#R_390_JMP_SLOT
 11

	)

3129 
	#R_390_RELATIVE
 12

	)

3130 
	#R_390_GOTOFF32
 13

	)

3131 
	#R_390_GOTPC
 14

	)

3132 
	#R_390_GOT16
 15

	)

3133 
	#R_390_PC16
 16

	)

3134 
	#R_390_PC16DBL
 17

	)

3135 
	#R_390_PLT16DBL
 18

	)

3136 
	#R_390_PC32DBL
 19

	)

3137 
	#R_390_PLT32DBL
 20

	)

3138 
	#R_390_GOTPCDBL
 21

	)

3139 
	#R_390_64
 22

	)

3140 
	#R_390_PC64
 23

	)

3141 
	#R_390_GOT64
 24

	)

3142 
	#R_390_PLT64
 25

	)

3143 
	#R_390_GOTENT
 26

	)

3144 
	#R_390_GOTOFF16
 27

	)

3145 
	#R_390_GOTOFF64
 28

	)

3146 
	#R_390_GOTPLT12
 29

	)

3147 
	#R_390_GOTPLT16
 30

	)

3148 
	#R_390_GOTPLT32
 31

	)

3149 
	#R_390_GOTPLT64
 32

	)

3150 
	#R_390_GOTPLTENT
 33

	)

3151 
	#R_390_PLTOFF16
 34

	)

3152 
	#R_390_PLTOFF32
 35

	)

3153 
	#R_390_PLTOFF64
 36

	)

3154 
	#R_390_TLS_LOAD
 37

	)

3155 
	#R_390_TLS_GDCALL
 38

	)

3157 
	#R_390_TLS_LDCALL
 39

	)

3159 
	#R_390_TLS_GD32
 40

	)

3161 
	#R_390_TLS_GD64
 41

	)

3163 
	#R_390_TLS_GOTIE12
 42

	)

3165 
	#R_390_TLS_GOTIE32
 43

	)

3167 
	#R_390_TLS_GOTIE64
 44

	)

3169 
	#R_390_TLS_LDM32
 45

	)

3171 
	#R_390_TLS_LDM64
 46

	)

3173 
	#R_390_TLS_IE32
 47

	)

3175 
	#R_390_TLS_IE64
 48

	)

3177 
	#R_390_TLS_IEENT
 49

	)

3179 
	#R_390_TLS_LE32
 50

	)

3181 
	#R_390_TLS_LE64
 51

	)

3183 
	#R_390_TLS_LDO32
 52

	)

3185 
	#R_390_TLS_LDO64
 53

	)

3187 
	#R_390_TLS_DTPMOD
 54

	)

3188 
	#R_390_TLS_DTPOFF
 55

	)

3189 
	#R_390_TLS_TPOFF
 56

	)

3191 
	#R_390_20
 57

	)

3192 
	#R_390_GOT20
 58

	)

3193 
	#R_390_GOTPLT20
 59

	)

3194 
	#R_390_TLS_GOTIE20
 60

	)

3196 
	#R_390_IRELATIVE
 61

	)

3198 
	#R_390_NUM
 62

	)

3202 
	#R_CRIS_NONE
 0

	)

3203 
	#R_CRIS_8
 1

	)

3204 
	#R_CRIS_16
 2

	)

3205 
	#R_CRIS_32
 3

	)

3206 
	#R_CRIS_8_PCREL
 4

	)

3207 
	#R_CRIS_16_PCREL
 5

	)

3208 
	#R_CRIS_32_PCREL
 6

	)

3209 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3210 
	#R_CRIS_GNU_VTENTRY
 8

	)

3211 
	#R_CRIS_COPY
 9

	)

3212 
	#R_CRIS_GLOB_DAT
 10

	)

3213 
	#R_CRIS_JUMP_SLOT
 11

	)

3214 
	#R_CRIS_RELATIVE
 12

	)

3215 
	#R_CRIS_16_GOT
 13

	)

3216 
	#R_CRIS_32_GOT
 14

	)

3217 
	#R_CRIS_16_GOTPLT
 15

	)

3218 
	#R_CRIS_32_GOTPLT
 16

	)

3219 
	#R_CRIS_32_GOTREL
 17

	)

3220 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3221 
	#R_CRIS_32_PLT_PCREL
 19

	)

3223 
	#R_CRIS_NUM
 20

	)

3227 
	#R_X86_64_NONE
 0

	)

3228 
	#R_X86_64_64
 1

	)

3229 
	#R_X86_64_PC32
 2

	)

3230 
	#R_X86_64_GOT32
 3

	)

3231 
	#R_X86_64_PLT32
 4

	)

3232 
	#R_X86_64_COPY
 5

	)

3233 
	#R_X86_64_GLOB_DAT
 6

	)

3234 
	#R_X86_64_JUMP_SLOT
 7

	)

3235 
	#R_X86_64_RELATIVE
 8

	)

3236 
	#R_X86_64_GOTPCREL
 9

	)

3238 
	#R_X86_64_32
 10

	)

3239 
	#R_X86_64_32S
 11

	)

3240 
	#R_X86_64_16
 12

	)

3241 
	#R_X86_64_PC16
 13

	)

3242 
	#R_X86_64_8
 14

	)

3243 
	#R_X86_64_PC8
 15

	)

3244 
	#R_X86_64_DTPMOD64
 16

	)

3245 
	#R_X86_64_DTPOFF64
 17

	)

3246 
	#R_X86_64_TPOFF64
 18

	)

3247 
	#R_X86_64_TLSGD
 19

	)

3249 
	#R_X86_64_TLSLD
 20

	)

3251 
	#R_X86_64_DTPOFF32
 21

	)

3252 
	#R_X86_64_GOTTPOFF
 22

	)

3254 
	#R_X86_64_TPOFF32
 23

	)

3255 
	#R_X86_64_PC64
 24

	)

3256 
	#R_X86_64_GOTOFF64
 25

	)

3257 
	#R_X86_64_GOTPC32
 26

	)

3259 
	#R_X86_64_GOT64
 27

	)

3260 
	#R_X86_64_GOTPCREL64
 28

	)

3262 
	#R_X86_64_GOTPC64
 29

	)

3263 
	#R_X86_64_GOTPLT64
 30

	)

3264 
	#R_X86_64_PLTOFF64
 31

	)

3266 
	#R_X86_64_SIZE32
 32

	)

3267 
	#R_X86_64_SIZE64
 33

	)

3268 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3269 
	#R_X86_64_TLSDESC_CALL
 35

	)

3271 
	#R_X86_64_TLSDESC
 36

	)

3272 
	#R_X86_64_IRELATIVE
 37

	)

3273 
	#R_X86_64_RELATIVE64
 38

	)

3276 
	#R_X86_64_GOTPCRELX
 41

	)

3279 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3282 
	#R_X86_64_NUM
 43

	)

3286 
	#R_MN10300_NONE
 0

	)

3287 
	#R_MN10300_32
 1

	)

3288 
	#R_MN10300_16
 2

	)

3289 
	#R_MN10300_8
 3

	)

3290 
	#R_MN10300_PCREL32
 4

	)

3291 
	#R_MN10300_PCREL16
 5

	)

3292 
	#R_MN10300_PCREL8
 6

	)

3293 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3294 
	#R_MN10300_GNU_VTENTRY
 8

	)

3295 
	#R_MN10300_24
 9

	)

3296 
	#R_MN10300_GOTPC32
 10

	)

3297 
	#R_MN10300_GOTPC16
 11

	)

3298 
	#R_MN10300_GOTOFF32
 12

	)

3299 
	#R_MN10300_GOTOFF24
 13

	)

3300 
	#R_MN10300_GOTOFF16
 14

	)

3301 
	#R_MN10300_PLT32
 15

	)

3302 
	#R_MN10300_PLT16
 16

	)

3303 
	#R_MN10300_GOT32
 17

	)

3304 
	#R_MN10300_GOT24
 18

	)

3305 
	#R_MN10300_GOT16
 19

	)

3306 
	#R_MN10300_COPY
 20

	)

3307 
	#R_MN10300_GLOB_DAT
 21

	)

3308 
	#R_MN10300_JMP_SLOT
 22

	)

3309 
	#R_MN10300_RELATIVE
 23

	)

3310 
	#R_MN10300_TLS_GD
 24

	)

3311 
	#R_MN10300_TLS_LD
 25

	)

3312 
	#R_MN10300_TLS_LDO
 26

	)

3313 
	#R_MN10300_TLS_GOTIE
 27

	)

3315 
	#R_MN10300_TLS_IE
 28

	)

3317 
	#R_MN10300_TLS_LE
 29

	)

3319 
	#R_MN10300_TLS_DTPMOD
 30

	)

3320 
	#R_MN10300_TLS_DTPOFF
 31

	)

3321 
	#R_MN10300_TLS_TPOFF
 32

	)

3322 
	#R_MN10300_SYM_DIFF
 33

	)

3324 
	#R_MN10300_ALIGN
 34

	)

3326 
	#R_MN10300_NUM
 35

	)

3330 
	#R_M32R_NONE
 0

	)

3331 
	#R_M32R_16
 1

	)

3332 
	#R_M32R_32
 2

	)

3333 
	#R_M32R_24
 3

	)

3334 
	#R_M32R_10_PCREL
 4

	)

3335 
	#R_M32R_18_PCREL
 5

	)

3336 
	#R_M32R_26_PCREL
 6

	)

3337 
	#R_M32R_HI16_ULO
 7

	)

3338 
	#R_M32R_HI16_SLO
 8

	)

3339 
	#R_M32R_LO16
 9

	)

3340 
	#R_M32R_SDA16
 10

	)

3341 
	#R_M32R_GNU_VTINHERIT
 11

	)

3342 
	#R_M32R_GNU_VTENTRY
 12

	)

3344 
	#R_M32R_16_RELA
 33

	)

3345 
	#R_M32R_32_RELA
 34

	)

3346 
	#R_M32R_24_RELA
 35

	)

3347 
	#R_M32R_10_PCREL_RELA
 36

	)

3348 
	#R_M32R_18_PCREL_RELA
 37

	)

3349 
	#R_M32R_26_PCREL_RELA
 38

	)

3350 
	#R_M32R_HI16_ULO_RELA
 39

	)

3351 
	#R_M32R_HI16_SLO_RELA
 40

	)

3352 
	#R_M32R_LO16_RELA
 41

	)

3353 
	#R_M32R_SDA16_RELA
 42

	)

3354 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3355 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3356 
	#R_M32R_REL32
 45

	)

3358 
	#R_M32R_GOT24
 48

	)

3359 
	#R_M32R_26_PLTREL
 49

	)

3360 
	#R_M32R_COPY
 50

	)

3361 
	#R_M32R_GLOB_DAT
 51

	)

3362 
	#R_M32R_JMP_SLOT
 52

	)

3363 
	#R_M32R_RELATIVE
 53

	)

3364 
	#R_M32R_GOTOFF
 54

	)

3365 
	#R_M32R_GOTPC24
 55

	)

3366 
	#R_M32R_GOT16_HI_ULO
 56

	)

3368 
	#R_M32R_GOT16_HI_SLO
 57

	)

3370 
	#R_M32R_GOT16_LO
 58

	)

3371 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3373 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3375 
	#R_M32R_GOTPC_LO
 61

	)

3377 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3379 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3381 
	#R_M32R_GOTOFF_LO
 64

	)

3382 
	#R_M32R_NUM
 256

	)

3385 
	#R_MICROBLAZE_NONE
 0

	)

3386 
	#R_MICROBLAZE_32
 1

	)

3387 
	#R_MICROBLAZE_32_PCREL
 2

	)

3388 
	#R_MICROBLAZE_64_PCREL
 3

	)

3389 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3390 
	#R_MICROBLAZE_64
 5

	)

3391 
	#R_MICROBLAZE_32_LO
 6

	)

3392 
	#R_MICROBLAZE_SRO32
 7

	)

3393 
	#R_MICROBLAZE_SRW32
 8

	)

3394 
	#R_MICROBLAZE_64_NONE
 9

	)

3395 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3396 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3397 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3398 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3399 
	#R_MICROBLAZE_GOT_64
 14

	)

3400 
	#R_MICROBLAZE_PLT_64
 15

	)

3401 
	#R_MICROBLAZE_REL
 16

	)

3402 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3403 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3404 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3405 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3406 
	#R_MICROBLAZE_COPY
 21

	)

3407 
	#R_MICROBLAZE_TLS
 22

	)

3408 
	#R_MICROBLAZE_TLSGD
 23

	)

3409 
	#R_MICROBLAZE_TLSLD
 24

	)

3410 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3411 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3412 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3413 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3414 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3417 
	#DT_NIOS2_GP
 0x70000002

	)

3420 
	#R_NIOS2_NONE
 0

	)

3421 
	#R_NIOS2_S16
 1

	)

3422 
	#R_NIOS2_U16
 2

	)

3423 
	#R_NIOS2_PCREL16
 3

	)

3424 
	#R_NIOS2_CALL26
 4

	)

3425 
	#R_NIOS2_IMM5
 5

	)

3426 
	#R_NIOS2_CACHE_OPX
 6

	)

3427 
	#R_NIOS2_IMM6
 7

	)

3428 
	#R_NIOS2_IMM8
 8

	)

3429 
	#R_NIOS2_HI16
 9

	)

3430 
	#R_NIOS2_LO16
 10

	)

3431 
	#R_NIOS2_HIADJ16
 11

	)

3432 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3433 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3434 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3435 
	#R_NIOS2_GPREL
 15

	)

3436 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3437 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3438 
	#R_NIOS2_UJMP
 18

	)

3439 
	#R_NIOS2_CJMP
 19

	)

3440 
	#R_NIOS2_CALLR
 20

	)

3441 
	#R_NIOS2_ALIGN
 21

	)

3443 
	#R_NIOS2_GOT16
 22

	)

3444 
	#R_NIOS2_CALL16
 23

	)

3445 
	#R_NIOS2_GOTOFF_LO
 24

	)

3446 
	#R_NIOS2_GOTOFF_HA
 25

	)

3447 
	#R_NIOS2_PCREL_LO
 26

	)

3448 
	#R_NIOS2_PCREL_HA
 27

	)

3449 
	#R_NIOS2_TLS_GD16
 28

	)

3450 
	#R_NIOS2_TLS_LDM16
 29

	)

3451 
	#R_NIOS2_TLS_LDO16
 30

	)

3452 
	#R_NIOS2_TLS_IE16
 31

	)

3453 
	#R_NIOS2_TLS_LE16
 32

	)

3454 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3455 
	#R_NIOS2_TLS_DTPREL
 34

	)

3456 
	#R_NIOS2_TLS_TPREL
 35

	)

3457 
	#R_NIOS2_COPY
 36

	)

3458 
	#R_NIOS2_GLOB_DAT
 37

	)

3459 
	#R_NIOS2_JUMP_SLOT
 38

	)

3460 
	#R_NIOS2_RELATIVE
 39

	)

3461 
	#R_NIOS2_GOTOFF
 40

	)

3462 
	#R_NIOS2_CALL26_NOAT
 41

	)

3463 
	#R_NIOS2_GOT_LO
 42

	)

3464 
	#R_NIOS2_GOT_HA
 43

	)

3465 
	#R_NIOS2_CALL_LO
 44

	)

3466 
	#R_NIOS2_CALL_HA
 45

	)

3469 
	#R_TILEPRO_NONE
 0

	)

3470 
	#R_TILEPRO_32
 1

	)

3471 
	#R_TILEPRO_16
 2

	)

3472 
	#R_TILEPRO_8
 3

	)

3473 
	#R_TILEPRO_32_PCREL
 4

	)

3474 
	#R_TILEPRO_16_PCREL
 5

	)

3475 
	#R_TILEPRO_8_PCREL
 6

	)

3476 
	#R_TILEPRO_LO16
 7

	)

3477 
	#R_TILEPRO_HI16
 8

	)

3478 
	#R_TILEPRO_HA16
 9

	)

3479 
	#R_TILEPRO_COPY
 10

	)

3480 
	#R_TILEPRO_GLOB_DAT
 11

	)

3481 
	#R_TILEPRO_JMP_SLOT
 12

	)

3482 
	#R_TILEPRO_RELATIVE
 13

	)

3483 
	#R_TILEPRO_BROFF_X1
 14

	)

3484 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3485 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3486 
	#R_TILEPRO_IMM8_X0
 17

	)

3487 
	#R_TILEPRO_IMM8_Y0
 18

	)

3488 
	#R_TILEPRO_IMM8_X1
 19

	)

3489 
	#R_TILEPRO_IMM8_Y1
 20

	)

3490 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3491 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3492 
	#R_TILEPRO_IMM16_X0
 23

	)

3493 
	#R_TILEPRO_IMM16_X1
 24

	)

3494 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3495 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3496 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3497 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3498 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3499 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3500 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3501 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3502 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3503 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3504 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3505 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3506 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3507 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3508 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3509 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3510 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3511 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3512 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3513 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3514 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3515 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3516 
	#R_TILEPRO_MMSTART_X0
 47

	)

3517 
	#R_TILEPRO_MMEND_X0
 48

	)

3518 
	#R_TILEPRO_MMSTART_X1
 49

	)

3519 
	#R_TILEPRO_MMEND_X1
 50

	)

3520 
	#R_TILEPRO_SHAMT_X0
 51

	)

3521 
	#R_TILEPRO_SHAMT_X1
 52

	)

3522 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3523 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3524 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3526 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3527 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3528 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3529 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3530 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3531 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3532 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3533 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3534 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3535 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3536 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3537 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3538 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3539 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3540 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3541 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3542 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3543 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3544 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3545 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3546 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3547 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3548 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3549 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3550 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3551 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3552 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3553 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3554 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3555 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3556 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3557 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3558 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3560 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3561 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3563 
	#R_TILEPRO_NUM
 130

	)

3567 
	#R_TILEGX_NONE
 0

	)

3568 
	#R_TILEGX_64
 1

	)

3569 
	#R_TILEGX_32
 2

	)

3570 
	#R_TILEGX_16
 3

	)

3571 
	#R_TILEGX_8
 4

	)

3572 
	#R_TILEGX_64_PCREL
 5

	)

3573 
	#R_TILEGX_32_PCREL
 6

	)

3574 
	#R_TILEGX_16_PCREL
 7

	)

3575 
	#R_TILEGX_8_PCREL
 8

	)

3576 
	#R_TILEGX_HW0
 9

	)

3577 
	#R_TILEGX_HW1
 10

	)

3578 
	#R_TILEGX_HW2
 11

	)

3579 
	#R_TILEGX_HW3
 12

	)

3580 
	#R_TILEGX_HW0_LAST
 13

	)

3581 
	#R_TILEGX_HW1_LAST
 14

	)

3582 
	#R_TILEGX_HW2_LAST
 15

	)

3583 
	#R_TILEGX_COPY
 16

	)

3584 
	#R_TILEGX_GLOB_DAT
 17

	)

3585 
	#R_TILEGX_JMP_SLOT
 18

	)

3586 
	#R_TILEGX_RELATIVE
 19

	)

3587 
	#R_TILEGX_BROFF_X1
 20

	)

3588 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3589 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3590 
	#R_TILEGX_IMM8_X0
 23

	)

3591 
	#R_TILEGX_IMM8_Y0
 24

	)

3592 
	#R_TILEGX_IMM8_X1
 25

	)

3593 
	#R_TILEGX_IMM8_Y1
 26

	)

3594 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3595 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3596 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3597 
	#R_TILEGX_MMSTART_X0
 30

	)

3598 
	#R_TILEGX_MMEND_X0
 31

	)

3599 
	#R_TILEGX_SHAMT_X0
 32

	)

3600 
	#R_TILEGX_SHAMT_X1
 33

	)

3601 
	#R_TILEGX_SHAMT_Y0
 34

	)

3602 
	#R_TILEGX_SHAMT_Y1
 35

	)

3603 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3604 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3605 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3606 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3607 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3608 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3609 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3610 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3611 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3612 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3613 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3614 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3615 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3616 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3617 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3618 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3619 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3620 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3621 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3622 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3623 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3624 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3625 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3626 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3627 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3628 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3629 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3630 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3631 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3632 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3633 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3634 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3635 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3636 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3637 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3638 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3639 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3640 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3641 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3642 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3643 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3644 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3645 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3646 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3647 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3648 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3649 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3650 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3651 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3652 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3653 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3654 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3655 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3656 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3658 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3659 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3660 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3661 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3662 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3663 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3664 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3665 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3666 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3667 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3668 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3669 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3671 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3672 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3673 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3674 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3675 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3676 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3677 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3678 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3679 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3680 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3681 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3682 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3683 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3684 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3685 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3686 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3688 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3689 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3691 
	#R_TILEGX_NUM
 130

	)

3695 
	#R_BPF_NONE
 0

	)

3696 
	#R_BPF_MAP_FD
 1

	)

3700 
	#R_METAG_HIADDR16
 0

	)

3701 
	#R_METAG_LOADDR16
 1

	)

3702 
	#R_METAG_ADDR32
 2

	)

3703 
	#R_METAG_NONE
 3

	)

3704 
	#R_METAG_RELBRANCH
 4

	)

3705 
	#R_METAG_GETSETOFF
 5

	)

3708 
	#R_METAG_REG32OP1
 6

	)

3709 
	#R_METAG_REG32OP2
 7

	)

3710 
	#R_METAG_REG32OP3
 8

	)

3711 
	#R_METAG_REG16OP1
 9

	)

3712 
	#R_METAG_REG16OP2
 10

	)

3713 
	#R_METAG_REG16OP3
 11

	)

3714 
	#R_METAG_REG32OP4
 12

	)

3716 
	#R_METAG_HIOG
 13

	)

3717 
	#R_METAG_LOOG
 14

	)

3719 
	#R_METAG_REL8
 15

	)

3720 
	#R_METAG_REL16
 16

	)

3723 
	#R_METAG_GNU_VTINHERIT
 30

	)

3724 
	#R_METAG_GNU_VTENTRY
 31

	)

3727 
	#R_METAG_HI16_GOTOFF
 32

	)

3728 
	#R_METAG_LO16_GOTOFF
 33

	)

3729 
	#R_METAG_GETSET_GOTOFF
 34

	)

3730 
	#R_METAG_GETSET_GOT
 35

	)

3731 
	#R_METAG_HI16_GOTPC
 36

	)

3732 
	#R_METAG_LO16_GOTPC
 37

	)

3733 
	#R_METAG_HI16_PLT
 38

	)

3734 
	#R_METAG_LO16_PLT
 39

	)

3735 
	#R_METAG_RELBRANCH_PLT
 40

	)

3736 
	#R_METAG_GOTOFF
 41

	)

3737 
	#R_METAG_PLT
 42

	)

3738 
	#R_METAG_COPY
 43

	)

3739 
	#R_METAG_JMP_SLOT
 44

	)

3740 
	#R_METAG_RELATIVE
 45

	)

3741 
	#R_METAG_GLOB_DAT
 46

	)

3744 
	#R_METAG_TLS_GD
 47

	)

3745 
	#R_METAG_TLS_LDM
 48

	)

3746 
	#R_METAG_TLS_LDO_HI16
 49

	)

3747 
	#R_METAG_TLS_LDO_LO16
 50

	)

3748 
	#R_METAG_TLS_LDO
 51

	)

3749 
	#R_METAG_TLS_IE
 52

	)

3750 
	#R_METAG_TLS_IENONPIC
 53

	)

3751 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

3752 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

3753 
	#R_METAG_TLS_TPOFF
 56

	)

3754 
	#R_METAG_TLS_DTPMOD
 57

	)

3755 
	#R_METAG_TLS_DTPOFF
 58

	)

3756 
	#R_METAG_TLS_LE
 59

	)

3757 
	#R_METAG_TLS_LE_HI16
 60

	)

3758 
	#R_METAG_TLS_LE_LO16
 61

	)

3760 
	g__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

122 
	#_IO_FLAGS2_NEED_LOCK
 128

	)

126 
	#_IO_SKIPWS
 01

	)

127 
	#_IO_LEFT
 02

	)

128 
	#_IO_RIGHT
 04

	)

129 
	#_IO_INTERNAL
 010

	)

130 
	#_IO_DEC
 020

	)

131 
	#_IO_OCT
 040

	)

132 
	#_IO_HEX
 0100

	)

133 
	#_IO_SHOWBASE
 0200

	)

134 
	#_IO_SHOWPOINT
 0400

	)

135 
	#_IO_UPPERCASE
 01000

	)

136 
	#_IO_SHOWPOS
 02000

	)

137 
	#_IO_SCIENTIFIC
 04000

	)

138 
	#_IO_FIXED
 010000

	)

139 
	#_IO_UNITBUF
 020000

	)

140 
	#_IO_STDIO
 040000

	)

141 
	#_IO_DONT_CLOSE
 0100000

	)

142 
	#_IO_BOOLALPHA
 0200000

	)

145 
_IO_jump_t
; 
	g_IO_FILE
;

149 #i‚de‡
_IO_lock_t_deföed


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
__USE_GNU


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

445 
	#_IO_Êockfûe
(
_Â
Ë

	)

446 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

447 
	#_IO_·rylockfûe
(
_Â
Ë

	)

448 #i‚de‡
_IO_˛ónup_ªgi⁄_°¨t


449 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

451 #i‚de‡
_IO_˛ónup_ªgi⁄_íd


452 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

455 
	#_IO_√ed_lock
(
_Â
) \

456 (((
_Â
)->
_Êags2
 & 
_IO_FLAGS2_NEED_LOCK
Ë!0)

	)

458 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

459 
_IO_va_li°
, *
__ª°ri˘
);

460 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

461 
_IO_va_li°
);

462 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

463 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

465 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

466 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

468 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

470 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


471 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

472 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

473 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

474 #i‡
__GNUC__
 >= 2

477 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


478 
	~<shlib-com∑t.h
>

479 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

480 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

481 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

482 c⁄° 
_IO_°dö_u£d
;

483 
wók_exã∫
 (
_IO_°dö_u£d
);

486 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


487 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

491 
	#_IO_fwide
(
__Â
, 
__mode
) \

492 ({ 
__ªsu…
 = (
__mode
); \

493 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

495 i‡((
__Â
)->
_mode
 == 0) \

497 (
__Â
)->
_mode
 = -1; \

498 
__ªsu…
 = (
__Â
)->
_mode
; \

500 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

501 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

503 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

504 
__ªsu…
; })

	)

507 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

508 
_IO_va_li°
, *
__ª°ri˘
);

509 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

510 
_IO_va_li°
);

511 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

512 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

515 #ifde‡
__LDBL_COMPAT


516 
	~<bôs/libio-ldbl.h
>

519 #ifde‡
__˝lu•lus


	@/usr/include/linux/kernel.h

2 #i‚de‡
_LINUX_KERNEL_H


3 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/sysöfo.h
>

10 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

11 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

13 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/sysctl.h

23 #i‚de‡
_LINUX_SYSCTL_H


24 
	#_LINUX_SYSCTL_H


	)

26 
	~<löux/kî√l.h
>

27 
	~<löux/ty≥s.h
>

30 
	#CTL_MAXNAME
 10

	)

35 
	s__sys˘l_¨gs
 {

36 *
	m«me
;

37 
	m∆í
;

38 *
	mﬁdvÆ
;

39 
size_t
 *
	mﬁdÀ≈
;

40 *
	m√wvÆ
;

41 
size_t
 
	m√wÀn
;

42 
	m__unu£d
[4];

51 
	mCTL_KERN
=1,

52 
	mCTL_VM
=2,

53 
	mCTL_NET
=3,

54 
	mCTL_PROC
=4,

55 
	mCTL_FS
=5,

56 
	mCTL_DEBUG
=6,

57 
	mCTL_DEV
=7,

58 
	mCTL_BUS
=8,

59 
	mCTL_ABI
=9,

60 
	mCTL_CPU
=10,

61 
	mCTL_ARLAN
=254,

62 
	mCTL_S390DBF
=5677,

63 
	mCTL_SUNRPC
=7249,

64 
	mCTL_PM
=9899,

65 
	mCTL_FRV
=9898,

71 
	mCTL_BUS_ISA
=1

77 
	mINOTIFY_MAX_USER_INSTANCES
=1,

78 
	mINOTIFY_MAX_USER_WATCHES
=2,

79 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

85 
	mKERN_OSTYPE
=1,

86 
	mKERN_OSRELEASE
=2,

87 
	mKERN_OSREV
=3,

88 
	mKERN_VERSION
=4,

89 
	mKERN_SECUREMASK
=5,

90 
	mKERN_PROF
=6,

91 
	mKERN_NODENAME
=7,

92 
	mKERN_DOMAINNAME
=8,

94 
	mKERN_PANIC
=15,

95 
	mKERN_REALROOTDEV
=16,

97 
	mKERN_SPARC_REBOOT
=21,

98 
	mKERN_CTLALTDEL
=22,

99 
	mKERN_PRINTK
=23,

100 
	mKERN_NAMETRANS
=24,

101 
	mKERN_PPC_HTABRECLAIM
=25,

102 
	mKERN_PPC_ZEROPAGED
=26,

103 
	mKERN_PPC_POWERSAVE_NAP
=27,

104 
	mKERN_MODPROBE
=28,

105 
	mKERN_SG_BIG_BUFF
=29,

106 
	mKERN_ACCT
=30,

107 
	mKERN_PPC_L2CR
=31,

109 
	mKERN_RTSIGNR
=32,

110 
	mKERN_RTSIGMAX
=33,

112 
	mKERN_SHMMAX
=34,

113 
	mKERN_MSGMAX
=35,

114 
	mKERN_MSGMNB
=36,

115 
	mKERN_MSGPOOL
=37,

116 
	mKERN_SYSRQ
=38,

117 
	mKERN_MAX_THREADS
=39,

118 
	mKERN_RANDOM
=40,

119 
	mKERN_SHMALL
=41,

120 
	mKERN_MSGMNI
=42,

121 
	mKERN_SEM
=43,

122 
	mKERN_SPARC_STOP_A
=44,

123 
	mKERN_SHMMNI
=45,

124 
	mKERN_OVERFLOWUID
=46,

125 
	mKERN_OVERFLOWGID
=47,

126 
	mKERN_SHMPATH
=48,

127 
	mKERN_HOTPLUG
=49,

128 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

129 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

130 
	mKERN_CORE_USES_PID
=52,

131 
	mKERN_TAINTED
=53,

132 
	mKERN_CADPID
=54,

133 
	mKERN_PIDMAX
=55,

134 
	mKERN_CORE_PATTERN
=56,

135 
	mKERN_PANIC_ON_OOPS
=57,

136 
	mKERN_HPPA_PWRSW
=58,

137 
	mKERN_HPPA_UNALIGNED
=59,

138 
	mKERN_PRINTK_RATELIMIT
=60,

139 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

140 
	mKERN_PTY
=62,

141 
	mKERN_NGROUPS_MAX
=63,

142 
	mKERN_SPARC_SCONS_PWROFF
=64,

143 
	mKERN_HZ_TIMER
=65,

144 
	mKERN_UNKNOWN_NMI_PANIC
=66,

145 
	mKERN_BOOTLOADER_TYPE
=67,

146 
	mKERN_RANDOMIZE
=68,

147 
	mKERN_SETUID_DUMPABLE
=69,

148 
	mKERN_SPIN_RETRY
=70,

149 
	mKERN_ACPI_VIDEO_FLAGS
=71,

150 
	mKERN_IA64_UNALIGNED
=72,

151 
	mKERN_COMPAT_LOG
=73,

152 
	mKERN_MAX_LOCK_DEPTH
=74,

153 
	mKERN_NMI_WATCHDOG
=75,

154 
	mKERN_PANIC_ON_NMI
=76,

155 
	mKERN_PANIC_ON_WARN
=77,

156 
	mKERN_PANIC_PRINT
=78,

164 
	mVM_UNUSED1
=1,

165 
	mVM_UNUSED2
=2,

166 
	mVM_UNUSED3
=3,

167 
	mVM_UNUSED4
=4,

168 
	mVM_OVERCOMMIT_MEMORY
=5,

169 
	mVM_UNUSED5
=6,

170 
	mVM_UNUSED7
=7,

171 
	mVM_UNUSED8
=8,

172 
	mVM_UNUSED9
=9,

173 
	mVM_PAGE_CLUSTER
=10,

174 
	mVM_DIRTY_BACKGROUND
=11,

175 
	mVM_DIRTY_RATIO
=12,

176 
	mVM_DIRTY_WB_CS
=13,

177 
	mVM_DIRTY_EXPIRE_CS
=14,

178 
	mVM_NR_PDFLUSH_THREADS
=15,

179 
	mVM_OVERCOMMIT_RATIO
=16,

180 
	mVM_PAGEBUF
=17,

181 
	mVM_HUGETLB_PAGES
=18,

182 
	mVM_SWAPPINESS
=19,

183 
	mVM_LOWMEM_RESERVE_RATIO
=20,

184 
	mVM_MIN_FREE_KBYTES
=21,

185 
	mVM_MAX_MAP_COUNT
=22,

186 
	mVM_LAPTOP_MODE
=23,

187 
	mVM_BLOCK_DUMP
=24,

188 
	mVM_HUGETLB_GROUP
=25,

189 
	mVM_VFS_CACHE_PRESSURE
=26,

190 
	mVM_LEGACY_VA_LAYOUT
=27,

191 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

192 
	mVM_DROP_PAGECACHE
=29,

193 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

194 
	mVM_ZONE_RECLAIM_MODE
=31,

195 
	mVM_MIN_UNMAPPED
=32,

196 
	mVM_PANIC_ON_OOM
=33,

197 
	mVM_VDSO_ENABLED
=34,

198 
	mVM_MIN_SLAB
=35,

205 
	mNET_CORE
=1,

206 
	mNET_ETHER
=2,

207 
	mNET_802
=3,

208 
	mNET_UNIX
=4,

209 
	mNET_IPV4
=5,

210 
	mNET_IPX
=6,

211 
	mNET_ATALK
=7,

212 
	mNET_NETROM
=8,

213 
	mNET_AX25
=9,

214 
	mNET_BRIDGE
=10,

215 
	mNET_ROSE
=11,

216 
	mNET_IPV6
=12,

217 
	mNET_X25
=13,

218 
	mNET_TR
=14,

219 
	mNET_DECNET
=15,

220 
	mNET_ECONET
=16,

221 
	mNET_SCTP
=17,

222 
	mNET_LLC
=18,

223 
	mNET_NETFILTER
=19,

224 
	mNET_DCCP
=20,

225 
	mNET_IRDA
=412,

231 
	mRANDOM_POOLSIZE
=1,

232 
	mRANDOM_ENTROPY_COUNT
=2,

233 
	mRANDOM_READ_THRESH
=3,

234 
	mRANDOM_WRITE_THRESH
=4,

235 
	mRANDOM_BOOT_ID
=5,

236 
	mRANDOM_UUID
=6

242 
	mPTY_MAX
=1,

243 
	mPTY_NR
=2

249 
	mBUS_ISA_MEM_BASE
=1,

250 
	mBUS_ISA_PORT_BASE
=2,

251 
	mBUS_ISA_PORT_SHIFT
=3

257 
	mNET_CORE_WMEM_MAX
=1,

258 
	mNET_CORE_RMEM_MAX
=2,

259 
	mNET_CORE_WMEM_DEFAULT
=3,

260 
	mNET_CORE_RMEM_DEFAULT
=4,

262 
	mNET_CORE_MAX_BACKLOG
=6,

263 
	mNET_CORE_FASTROUTE
=7,

264 
	mNET_CORE_MSG_COST
=8,

265 
	mNET_CORE_MSG_BURST
=9,

266 
	mNET_CORE_OPTMEM_MAX
=10,

267 
	mNET_CORE_HOT_LIST_LENGTH
=11,

268 
	mNET_CORE_DIVERT_VERSION
=12,

269 
	mNET_CORE_NO_CONG_THRESH
=13,

270 
	mNET_CORE_NO_CONG
=14,

271 
	mNET_CORE_LO_CONG
=15,

272 
	mNET_CORE_MOD_CONG
=16,

273 
	mNET_CORE_DEV_WEIGHT
=17,

274 
	mNET_CORE_SOMAXCONN
=18,

275 
	mNET_CORE_BUDGET
=19,

276 
	mNET_CORE_AEVENT_ETIME
=20,

277 
	mNET_CORE_AEVENT_RSEQTH
=21,

278 
	mNET_CORE_WARNINGS
=22,

289 
	mNET_UNIX_DESTROY_DELAY
=1,

290 
	mNET_UNIX_DELETE_DELAY
=2,

291 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

297 
	mNET_NF_CONNTRACK_MAX
=1,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

305 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

307 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

308 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

309 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

310 
	mNET_NF_CONNTRACK_BUCKETS
=14,

311 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

312 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

313 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

314 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

315 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

322 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

323 
	mNET_NF_CONNTRACK_COUNT
=27,

324 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

325 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

326 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

327 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

328 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

335 
	mNET_IPV4_FORWARD
=8,

336 
	mNET_IPV4_DYNADDR
=9,

338 
	mNET_IPV4_CONF
=16,

339 
	mNET_IPV4_NEIGH
=17,

340 
	mNET_IPV4_ROUTE
=18,

341 
	mNET_IPV4_FIB_HASH
=19,

342 
	mNET_IPV4_NETFILTER
=20,

344 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

345 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

346 
	mNET_IPV4_TCP_SACK
=35,

347 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

348 
	mNET_IPV4_DEFAULT_TTL
=37,

349 
	mNET_IPV4_AUTOCONFIG
=38,

350 
	mNET_IPV4_NO_PMTU_DISC
=39,

351 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

352 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

353 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

354 
	mNET_IPV4_IPFRAG_TIME
=43,

355 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

356 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

357 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

358 
	mNET_IPV4_TCP_RETRIES1
=47,

359 
	mNET_IPV4_TCP_RETRIES2
=48,

360 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

361 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

362 
	mNET_TCP_SYNCOOKIES
=51,

363 
	mNET_TCP_STDURG
=52,

364 
	mNET_TCP_RFC1337
=53,

365 
	mNET_TCP_SYN_TAILDROP
=54,

366 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

367 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

369 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

370 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

371 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

372 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

373 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

374 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

375 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

376 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

377 
	mNET_TCP_TW_RECYCLE
=66,

378 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

379 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

380 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

381 
	mNET_IPV4_INET_PEER_MINTTL
=70,

382 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

383 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

384 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

385 
	mNET_TCP_ORPHAN_RETRIES
=74,

386 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

387 
	mNET_TCP_SYNACK_RETRIES
=76,

388 
	mNET_TCP_MAX_ORPHANS
=77,

389 
	mNET_TCP_MAX_TW_BUCKETS
=78,

390 
	mNET_TCP_FACK
=79,

391 
	mNET_TCP_REORDERING
=80,

392 
	mNET_TCP_ECN
=81,

393 
	mNET_TCP_DSACK
=82,

394 
	mNET_TCP_MEM
=83,

395 
	mNET_TCP_WMEM
=84,

396 
	mNET_TCP_RMEM
=85,

397 
	mNET_TCP_APP_WIN
=86,

398 
	mNET_TCP_ADV_WIN_SCALE
=87,

399 
	mNET_IPV4_NONLOCAL_BIND
=88,

400 
	mNET_IPV4_ICMP_RATELIMIT
=89,

401 
	mNET_IPV4_ICMP_RATEMASK
=90,

402 
	mNET_TCP_TW_REUSE
=91,

403 
	mNET_TCP_FRTO
=92,

404 
	mNET_TCP_LOW_LATENCY
=93,

405 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

406 
	mNET_IPV4_IGMP_MAX_MSF
=96,

407 
	mNET_TCP_NO_METRICS_SAVE
=97,

408 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

409 
	mNET_TCP_MODERATE_RCVBUF
=106,

410 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

411 
	mNET_TCP_BIC_BETA
=108,

412 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

413 
	mNET_TCP_CONG_CONTROL
=110,

414 
	mNET_TCP_ABC
=111,

415 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

416 
	mNET_TCP_MTU_PROBING
=113,

417 
	mNET_TCP_BASE_MSS
=114,

418 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

419 
	mNET_TCP_DMA_COPYBREAK
=116,

420 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

421 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

422 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

423 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

424 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

425 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

426 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

427 
	mNET_TCP_MAX_SSTHRESH
=124,

428 
	mNET_TCP_FRTO_RESPONSE
=125,

432 
	mNET_IPV4_ROUTE_FLUSH
=1,

433 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

434 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

435 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

436 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

437 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

438 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

439 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

440 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

441 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

442 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

443 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

444 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

445 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

446 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

447 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

448 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

449 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

450 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

455 
	mNET_PROTO_CONF_ALL
=-2,

456 
	mNET_PROTO_CONF_DEFAULT
=-3

463 
	mNET_IPV4_CONF_FORWARDING
=1,

464 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

465 
	mNET_IPV4_CONF_PROXY_ARP
=3,

466 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

467 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

468 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

469 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

470 
	mNET_IPV4_CONF_RP_FILTER
=8,

471 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

472 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

473 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

474 
	mNET_IPV4_CONF_TAG
=12,

475 
	mNET_IPV4_CONF_ARPFILTER
=13,

476 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

477 
	mNET_IPV4_CONF_NOXFRM
=15,

478 
	mNET_IPV4_CONF_NOPOLICY
=16,

479 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

480 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

481 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

482 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

483 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

484 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

490 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

498 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

500 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

501 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

502 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

503 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

504 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

508 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

515 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

516 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

517 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

522 
	mNET_IPV6_CONF
=16,

523 
	mNET_IPV6_NEIGH
=17,

524 
	mNET_IPV6_ROUTE
=18,

525 
	mNET_IPV6_ICMP
=19,

526 
	mNET_IPV6_BINDV6ONLY
=20,

527 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

528 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

529 
	mNET_IPV6_IP6FRAG_TIME
=23,

530 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

531 
	mNET_IPV6_MLD_MAX_MSF
=25,

535 
	mNET_IPV6_ROUTE_FLUSH
=1,

536 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

537 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

538 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

539 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

540 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

541 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

542 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

543 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

544 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

548 
	mNET_IPV6_FORWARDING
=1,

549 
	mNET_IPV6_HOP_LIMIT
=2,

550 
	mNET_IPV6_MTU
=3,

551 
	mNET_IPV6_ACCEPT_RA
=4,

552 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

553 
	mNET_IPV6_AUTOCONF
=6,

554 
	mNET_IPV6_DAD_TRANSMITS
=7,

555 
	mNET_IPV6_RTR_SOLICITS
=8,

556 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

557 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

558 
	mNET_IPV6_USE_TEMPADDR
=11,

559 
	mNET_IPV6_TEMP_VALID_LFT
=12,

560 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

561 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

562 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

563 
	mNET_IPV6_MAX_ADDRESSES
=16,

564 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

565 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

566 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

567 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

568 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

569 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

570 
	mNET_IPV6_PROXY_NDP
=23,

571 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

572 
	mNET_IPV6_ACCEPT_RA_FROM_LOCAL
=26,

573 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN
=27,

574 
	m__NET_IPV6_MAX


579 
	mNET_IPV6_ICMP_RATELIMIT
 = 1,

580 
	mNET_IPV6_ICMP_ECHO_IGNORE_ALL
 = 2

585 
	mNET_NEIGH_MCAST_SOLICIT
=1,

586 
	mNET_NEIGH_UCAST_SOLICIT
=2,

587 
	mNET_NEIGH_APP_SOLICIT
=3,

588 
	mNET_NEIGH_RETRANS_TIME
=4,

589 
	mNET_NEIGH_REACHABLE_TIME
=5,

590 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

591 
	mNET_NEIGH_GC_STALE_TIME
=7,

592 
	mNET_NEIGH_UNRES_QLEN
=8,

593 
	mNET_NEIGH_PROXY_QLEN
=9,

594 
	mNET_NEIGH_ANYCAST_DELAY
=10,

595 
	mNET_NEIGH_PROXY_DELAY
=11,

596 
	mNET_NEIGH_LOCKTIME
=12,

597 
	mNET_NEIGH_GC_INTERVAL
=13,

598 
	mNET_NEIGH_GC_THRESH1
=14,

599 
	mNET_NEIGH_GC_THRESH2
=15,

600 
	mNET_NEIGH_GC_THRESH3
=16,

601 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

602 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

607 
	mNET_DCCP_DEFAULT
=1,

612 
	mNET_IPX_PPROP_BROADCASTING
=1,

613 
	mNET_IPX_FORWARDING
=2

618 
	mNET_LLC2
=1,

619 
	mNET_LLC_STATION
=2,

624 
	mNET_LLC2_TIMEOUT
=1,

629 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

634 
	mNET_LLC2_ACK_TIMEOUT
=1,

635 
	mNET_LLC2_P_TIMEOUT
=2,

636 
	mNET_LLC2_REJ_TIMEOUT
=3,

637 
	mNET_LLC2_BUSY_TIMEOUT
=4,

642 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

643 
	mNET_ATALK_AARP_TICK_TIME
=2,

644 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

645 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

651 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

652 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

653 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

654 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

655 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

656 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

657 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

658 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

659 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

660 
	mNET_NETROM_ROUTING_CONTROL
=10,

661 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

662 
	mNET_NETROM_RESET
=12

667 
	mNET_AX25_IP_DEFAULT_MODE
=1,

668 
	mNET_AX25_DEFAULT_MODE
=2,

669 
	mNET_AX25_BACKOFF_TYPE
=3,

670 
	mNET_AX25_CONNECT_MODE
=4,

671 
	mNET_AX25_STANDARD_WINDOW
=5,

672 
	mNET_AX25_EXTENDED_WINDOW
=6,

673 
	mNET_AX25_T1_TIMEOUT
=7,

674 
	mNET_AX25_T2_TIMEOUT
=8,

675 
	mNET_AX25_T3_TIMEOUT
=9,

676 
	mNET_AX25_IDLE_TIMEOUT
=10,

677 
	mNET_AX25_N2
=11,

678 
	mNET_AX25_PACLEN
=12,

679 
	mNET_AX25_PROTOCOL
=13,

680 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

685 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

686 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

687 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

688 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

689 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

690 
	mNET_ROSE_ROUTING_CONTROL
=6,

691 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

692 
	mNET_ROSE_MAX_VCS
=8,

693 
	mNET_ROSE_WINDOW_SIZE
=9,

694 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

699 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

700 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

701 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

702 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

703 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

704 
	mNET_X25_FORWARD
=6

710 
	mNET_TR_RIF_TIMEOUT
=1

715 
	mNET_DECNET_NODE_TYPE
 = 1,

716 
	mNET_DECNET_NODE_ADDRESS
 = 2,

717 
	mNET_DECNET_NODE_NAME
 = 3,

718 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

719 
	mNET_DECNET_TIME_WAIT
 = 5,

720 
	mNET_DECNET_DN_COUNT
 = 6,

721 
	mNET_DECNET_DI_COUNT
 = 7,

722 
	mNET_DECNET_DR_COUNT
 = 8,

723 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

724 
	mNET_DECNET_CONF
 = 10,

725 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

726 
	mNET_DECNET_MEM
 = 12,

727 
	mNET_DECNET_RMEM
 = 13,

728 
	mNET_DECNET_WMEM
 = 14,

729 
	mNET_DECNET_DEBUG_LEVEL
 = 255

734 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

735 
	mNET_DECNET_CONF_DDCMP
 = -3,

736 
	mNET_DECNET_CONF_PPP
 = -4,

737 
	mNET_DECNET_CONF_X25
 = -5,

738 
	mNET_DECNET_CONF_GRE
 = -6,

739 
	mNET_DECNET_CONF_ETHER
 = -7

746 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

747 
	mNET_DECNET_CONF_DEV_T1
 = 2,

748 
	mNET_DECNET_CONF_DEV_T2
 = 3,

749 
	mNET_DECNET_CONF_DEV_T3
 = 4,

750 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

751 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

752 
	mNET_DECNET_CONF_DEV_STATE
 = 7

757 
	mNET_SCTP_RTO_INITIAL
 = 1,

758 
	mNET_SCTP_RTO_MIN
 = 2,

759 
	mNET_SCTP_RTO_MAX
 = 3,

760 
	mNET_SCTP_RTO_ALPHA
 = 4,

761 
	mNET_SCTP_RTO_BETA
 = 5,

762 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

763 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

764 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

765 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

766 
	mNET_SCTP_HB_INTERVAL
 = 10,

767 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

768 
	mNET_SCTP_MAX_BURST
 = 12,

769 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

770 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

771 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

772 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

773 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

778 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

779 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

780 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

781 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

782 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

789 
	mFS_NRINODE
=1,

790 
	mFS_STATINODE
=2,

791 
	mFS_MAXINODE
=3,

792 
	mFS_NRDQUOT
=4,

793 
	mFS_MAXDQUOT
=5,

794 
	mFS_NRFILE
=6,

795 
	mFS_MAXFILE
=7,

796 
	mFS_DENTRY
=8,

797 
	mFS_NRSUPER
=9,

798 
	mFS_MAXSUPER
=10,

799 
	mFS_OVERFLOWUID
=11,

800 
	mFS_OVERFLOWGID
=12,

801 
	mFS_LEASES
=13,

802 
	mFS_DIR_NOTIFY
=14,

803 
	mFS_LEASE_TIME
=15,

804 
	mFS_DQSTATS
=16,

805 
	mFS_XFS
=17,

806 
	mFS_AIO_NR
=18,

807 
	mFS_AIO_MAX_NR
=19,

808 
	mFS_INOTIFY
=20,

809 
	mFS_OCFS2
=988,

814 
	mFS_DQ_LOOKUPS
 = 1,

815 
	mFS_DQ_DROPS
 = 2,

816 
	mFS_DQ_READS
 = 3,

817 
	mFS_DQ_WRITES
 = 4,

818 
	mFS_DQ_CACHE_HITS
 = 5,

819 
	mFS_DQ_ALLOCATED
 = 6,

820 
	mFS_DQ_FREE
 = 7,

821 
	mFS_DQ_SYNCS
 = 8,

822 
	mFS_DQ_WARNINGS
 = 9,

829 
	mDEV_CDROM
=1,

830 
	mDEV_HWMON
=2,

831 
	mDEV_PARPORT
=3,

832 
	mDEV_RAID
=4,

833 
	mDEV_MAC_HID
=5,

834 
	mDEV_SCSI
=6,

835 
	mDEV_IPMI
=7,

840 
	mDEV_CDROM_INFO
=1,

841 
	mDEV_CDROM_AUTOCLOSE
=2,

842 
	mDEV_CDROM_AUTOEJECT
=3,

843 
	mDEV_CDROM_DEBUG
=4,

844 
	mDEV_CDROM_LOCK
=5,

845 
	mDEV_CDROM_CHECK_MEDIA
=6

850 
	mDEV_PARPORT_DEFAULT
=-3

855 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

856 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

861 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

862 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

867 
	mDEV_PARPORT_SPINTIME
=1,

868 
	mDEV_PARPORT_BASE_ADDR
=2,

869 
	mDEV_PARPORT_IRQ
=3,

870 
	mDEV_PARPORT_DMA
=4,

871 
	mDEV_PARPORT_MODES
=5,

872 
	mDEV_PARPORT_DEVICES
=6,

873 
	mDEV_PARPORT_AUTOPROBE
=16

878 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

883 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

888 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

889 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

890 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

891 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

892 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

893 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

898 
	mDEV_SCSI_LOGGING_LEVEL
=1,

903 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

909 
	mABI_DEFHANDLER_COFF
=1,

910 
	mABI_DEFHANDLER_ELF
=2,

911 
	mABI_DEFHANDLER_LCALL7
=3,

912 
	mABI_DEFHANDLER_LIBCSO
=4,

913 
	mABI_TRACE
=5,

914 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

58 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__NTHNL
(
f˘
Ëf˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

69 
	#__NTHNL
(
f˘
Ë
	)
fct

75 
	#__ölöe


	)

77 
	#__THROW


	)

78 
	#__THROWNL


	)

79 
	#__NTH
(
f˘
Ë
	)
fct

86 #i‡
deföed
 
__˛™g__
 && deföed 
__has_exãnsi⁄


87 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

89 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë0

	)

94 
	#__P
(
¨gs
Ë
	)
args

95 
	#__PMT
(
¨gs
Ë
	)
args

100 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

101 
	#__STRING
(
x
Ë#x

	)

104 
	#__±r_t
 *

	)

105 
	#__l⁄g_doubÀ_t
 

	)

109 #ifdef 
__˝lu•lus


110 
	#__BEGIN_DECLS
 "C" {

	)

111 
	#__END_DECLS
 }

	)

113 
	#__BEGIN_DECLS


	)

114 
	#__END_DECLS


	)

119 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

120 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

122 #i‡
__GNUC_PREREQ
 (4,3)

123 
	#__w¨nde˛
(
«me
, 
msg
) \

124 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

125 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

126 
	#__îr‹de˛
(
«me
, 
msg
) \

127 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

129 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

130 
	#__w¨«âr
(
msg
)

	)

131 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

138 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

139 
	#__Êex¨r
 []

	)

140 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

141 #ñi‡
__GNUC_PREREQ
 (2,97)

144 
	#__Êex¨r
 []

	)

145 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

146 #ñi‡
deföed
 
__GNUC__


149 
	#__Êex¨r
 [0]

	)

150 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

153 
	#__Êex¨r
 [1]

	)

154 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

168 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

170 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

171 #ifde‡
__˝lu•lus


172 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

173 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

174 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

175 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

177 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

178 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

179 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

182 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

183 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

196 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

197 
	#__©åibuã__
(
xyz
Ë

	)

203 #i‡
__GNUC_PREREQ
 (2,96)

204 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

206 
	#__©åibuã_mÆloc__


	)

211 #i‡
__GNUC_PREREQ
 (4, 3)

212 
	#__©åibuã_Æloc_size__
(
∑øms
) \

213 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

215 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

221 #i‡
__GNUC_PREREQ
 (2,96)

222 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

224 
	#__©åibuã_puª__


	)

228 #i‡
__GNUC_PREREQ
 (2,5)

229 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

231 
	#__©åibuã_c⁄°__


	)

237 #i‡
__GNUC_PREREQ
 (3,1)

238 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

239 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

241 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

242 
	#__©åibuã_noölöe__


	)

246 #i‡
__GNUC_PREREQ
 (3,2)

247 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

249 
	#__©åibuã_dïªˇãd__


	)

255 #i‡
__GNUC_PREREQ
 (4,5) || \

256 
	$__glibc_˛™g_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

257 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

258 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

260 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

269 #i‡
	`__GNUC_PREREQ
 (2,8)

270 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

272 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

279 #i‡
	`__GNUC_PREREQ
 (2,97)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

281 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

283 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

288 #i‡
	`__GNUC_PREREQ
 (3,3)

289 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

291 
	#__n⁄nuŒ
(
∑øms
)

	)

296 #i‡
	`__GNUC_PREREQ
 (3,4)

297 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

298 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

299 #i‡
__USE_FORTIFY_LEVEL
 > 0

300 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

303 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

305 #i‚de‡
__wur


306 
	#__wur


	)

310 #i‡
	`__GNUC_PREREQ
 (3,2)

314 #unde‡
__Æways_ölöe


315 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

317 #unde‡
__Æways_ölöe


318 
	#__Æways_ölöe
 
__ölöe


	)

323 #i‡
	`__GNUC_PREREQ
 (4,3)

324 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

326 
	#__©åibuã_¨tificül__


	)

338 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

339 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

340 || 
deföed
 
__GNUC_GNU_INLINE__
)))

341 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


342 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

343 
	#__exã∫_Æways_ölöe
 \

344 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

346 
	#__exã∫_ölöe
 
__ölöe


	)

347 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

351 #ifde‡
__exã∫_Æways_ölöe


352 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

357 #i‡
	`__GNUC_PREREQ
 (4,3)

358 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

359 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

366 #i‡!
	`__GNUC_PREREQ
 (2,8)

367 
	#__exãnsi⁄__


	)

371 #i‡!
	`__GNUC_PREREQ
 (2,92)

372 
	#__ª°ri˘


	)

378 #i‡
	`__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


379 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

381 #ifde‡
__GNUC__


382 
	#__ª°ri˘_¨r


	)

384 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

385 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

388 
	#__ª°ri˘_¨r


	)

393 #i‡
__GNUC__
 >= 3

394 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

395 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

397 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

398 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

401 #i‡(!
deföed
 
_N‹ëu∫
 \

402 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

403 && !
	$__GNUC_PREREQ
 (4,7))

404 #i‡
	`__GNUC_PREREQ
 (2,8)

405 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

407 
	#_N‹ëu∫


	)

411 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

412 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

413 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

414 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

415 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

416 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

419 
	~<bôs/w‹dsize.h
>

420 
	~<bôs/l⁄g-doubÀ.h
>

422 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


423 
	#__LDBL_COMPAT
 1

	)

424 #ifde‡
__REDIRECT


425 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

426 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

427 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

428 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

429 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

430 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

431 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

432 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

433 
	#__LDBL_REDIR_DECL
(
«me
) \

434 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

435 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

436 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

437 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

438 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

441 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


442 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

443 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

444 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

445 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

446 
	#__LDBL_REDIR_DECL
(
«me
)

	)

447 #ifde‡
__REDIRECT


448 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

449 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

450 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

459 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

460 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

461 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

462 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

464 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

474 #i‡!
deföed
 
__˝lu•lus
 \

475 && (
	`__GNUC_PREREQ
 (4, 9) \

476 || 
	`__glibc_˛™g_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

477 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

478 && 
__STDC_VERSION__
 >= 201112L))

479 
	#__HAVE_GENERIC_SELECTION
 1

	)

481 
	#__HAVE_GENERIC_SELECTION
 0

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
__BEGIN_DECLS


101 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

102 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

103 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

104 
timevÆ
 *
__ª°ri˘
 
__timeout
);

106 #ifde‡
__USE_XOPEN2K


113 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

114 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

115 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

116 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

117 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

122 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


123 
	~<bôs/£À˘2.h
>

126 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H_OUTER


21 #i‚de‡
__SYSMACROS_DEPRECATED_INCLUSION


22 
	#_SYS_SYSMACROS_H_OUTER
 1

	)

30 #unde‡
maj‹


31 #unde‡
mö‹


32 #unde‡
makedev


36 #i‚de‡
_SYS_SYSMACROS_H


37 
	#_SYS_SYSMACROS_H
 1

	)

39 
	~<„©uªs.h
>

40 
	~<bôs/ty≥s.h
>

41 
	~<bôs/sysma¸os.h
>

52 
	#__SYSMACROS_DM
(
symbﬁ
Ë
__SYSMACROS_DM1
 \

53 (
In
 
the
 
GNU
 
C
 
Libøry
, #symbﬁ 
is
 
deföed
\
n
\

54 
by
 <
sys
/
sysma¸os
.
h
>. 
F‹
 
hi°‹iˇl
 
com∑tibûôy
, 
ô
 
is
\
n
\

55 
cuºíéy
 
deföed
 
by
 <
sys
/
ty≥s
.
h
> 
as
 
wñl
, 
but
 
we
 
∂™
 
to
\
n
\

56 
ªmove
 
this
 
so⁄
. 
To
 
u£
 #symbﬁ, 
ö˛ude
 <
sys
/
sysma¸os
.
h
>\
n
\

57 
dúe˘ly
. 
If
 
you
 
did
 
nŸ
 
öãnd
 
to
 
u£
 
a
 
sy°em
-
deföed
 
ma¸o
\
n
\

58 #symbﬁ, 
you
 
should
 
undeföe
 
ô
 
a·î
 
ö˛udög
 <
sys
/
ty≥s
.
h
>.)

	)

62 
	#__SYSMACROS_DM1
(...Ë
	`__glibc_ma¸o_w¨nög
 (#__VA_ARGS__)

	)

64 
	#__SYSMACROS_DECL_TEMPL
(
πy≥
, 
«me
, 
¥Ÿo
) \

65 
πy≥
 
gnu_dev_
##
«me
 
¥Ÿo
 
__THROW
 
__©åibuã_c⁄°__
;

	)

67 
	#__SYSMACROS_IMPL_TEMPL
(
πy≥
, 
«me
, 
¥Ÿo
) \

68 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 
πy≥
 \

69 
	`__NTH
 (
gnu_dev_
##
«me
 
¥Ÿo
)

	)

71 
__BEGIN_DECLS


73 
	$__SYSMACROS_DECLARE_MAJOR
 (
__SYSMACROS_DECL_TEMPL
)

74 
	$__SYSMACROS_DECLARE_MINOR
 (
__SYSMACROS_DECL_TEMPL
)

75 
	$__SYSMACROS_DECLARE_MAKEDEV
 (
__SYSMACROS_DECL_TEMPL
)

77 #ifde‡
__USE_EXTERN_INLINES


79 
	$__SYSMACROS_DEFINE_MAJOR
 (
__SYSMACROS_IMPL_TEMPL
)

80 
	$__SYSMACROS_DEFINE_MINOR
 (
__SYSMACROS_IMPL_TEMPL
)

81 
	$__SYSMACROS_DEFINE_MAKEDEV
 (
__SYSMACROS_IMPL_TEMPL
)

85 
__END_DECLS


89 #i‚de‡
__SYSMACROS_NEED_IMPLEMENTATION


90 #unde‡
__SYSMACROS_DECL_TEMPL


91 #unde‡
__SYSMACROS_IMPL_TEMPL


92 #unde‡
__SYSMACROS_DECLARE_MAJOR


93 #unde‡
__SYSMACROS_DECLARE_MINOR


94 #unde‡
__SYSMACROS_DECLARE_MAKEDEV


95 #unde‡
__SYSMACROS_DEFINE_MAJOR


96 #unde‡
__SYSMACROS_DEFINE_MINOR


97 #unde‡
__SYSMACROS_DEFINE_MAKEDEV


100 #ifde‡
__SYSMACROS_DEPRECATED_INCLUSION


101 
	#maj‹
(
dev
Ë
	`__SYSMACROS_DM
 (
maj‹
Ë
	`gnu_dev_maj‹
 (dev)

	)

102 
	#mö‹
(
dev
Ë
	`__SYSMACROS_DM
 (
mö‹
Ë
	`gnu_dev_mö‹
 (dev)

	)

103 
	#makedev
(
maj
, 
mö
Ë
	`__SYSMACROS_DM
 (
makedev
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

105 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

106 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

107 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s/sig£t_t.h
>

24 
	~<bôs/sigc⁄ãxt.h
>

25 
	~<bôs/ty≥s/°ack_t.h
>

28 #ifde‡
__USE_MISC


29 
	#__˘x
(
Êd
Ë
	)
fld

31 
	#__˘x
(
Êd
Ë
__
 ## 
	)
fld

34 #ifde‡
__x86_64__


37 
__exãnsi⁄__
 
	tgªg_t
;

40 
	#__NGREG
 23

	)

41 #ifde‡
__USE_MISC


42 
	#NGREG
 
__NGREG


	)

46 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

48 #ifde‡
__USE_GNU


52 
	mREG_R8
 = 0,

53 
	#REG_R8
 
REG_R8


	)

54 
	mREG_R9
,

55 
	#REG_R9
 
REG_R9


	)

56 
	mREG_R10
,

57 
	#REG_R10
 
REG_R10


	)

58 
	mREG_R11
,

59 
	#REG_R11
 
REG_R11


	)

60 
	mREG_R12
,

61 
	#REG_R12
 
REG_R12


	)

62 
	mREG_R13
,

63 
	#REG_R13
 
REG_R13


	)

64 
	mREG_R14
,

65 
	#REG_R14
 
REG_R14


	)

66 
	mREG_R15
,

67 
	#REG_R15
 
REG_R15


	)

68 
	mREG_RDI
,

69 
	#REG_RDI
 
REG_RDI


	)

70 
	mREG_RSI
,

71 
	#REG_RSI
 
REG_RSI


	)

72 
	mREG_RBP
,

73 
	#REG_RBP
 
REG_RBP


	)

74 
	mREG_RBX
,

75 
	#REG_RBX
 
REG_RBX


	)

76 
	mREG_RDX
,

77 
	#REG_RDX
 
REG_RDX


	)

78 
	mREG_RAX
,

79 
	#REG_RAX
 
REG_RAX


	)

80 
	mREG_RCX
,

81 
	#REG_RCX
 
REG_RCX


	)

82 
	mREG_RSP
,

83 
	#REG_RSP
 
REG_RSP


	)

84 
	mREG_RIP
,

85 
	#REG_RIP
 
REG_RIP


	)

86 
	mREG_EFL
,

87 
	#REG_EFL
 
REG_EFL


	)

88 
	mREG_CSGSFS
,

89 
	#REG_CSGSFS
 
REG_CSGSFS


	)

90 
	mREG_ERR
,

91 
	#REG_ERR
 
REG_ERR


	)

92 
	mREG_TRAPNO
,

93 
	#REG_TRAPNO
 
REG_TRAPNO


	)

94 
	mREG_OLDMASK
,

95 
	#REG_OLDMASK
 
REG_OLDMASK


	)

96 
	mREG_CR2


97 
	#REG_CR2
 
REG_CR2


	)

101 
	s_libc_Âxªg


103 
__˘x
(
signifiˇnd
)[4];

104 
__˘x
(
exp⁄ít
);

105 
	m__glibc_ª£rved1
[3];

108 
	s_libc_xmmªg


110 
__uöt32_t
 
__˘x
(
ñemít
)[4];

113 
	s_libc_Â°©e


116 
__uöt16_t
 
__˘x
(
cwd
);

117 
__uöt16_t
 
__˘x
(
swd
);

118 
__uöt16_t
 
__˘x
(
·w
);

119 
__uöt16_t
 
__˘x
(
f›
);

120 
__uöt64_t
 
__˘x
(
rù
);

121 
__uöt64_t
 
__˘x
(
rdp
);

122 
__uöt32_t
 
__˘x
(
mxc§
);

123 
__uöt32_t
 
__˘x
(
mx¸_mask
);

124 
_libc_Âxªg
 
	m_°
[8];

125 
_libc_xmmªg
 
	m_xmm
[16];

126 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

130 
_libc_Â°©e
 *
	tÂªg£t_t
;

135 
gªg£t_t
 
__˘x
(
gªgs
);

137 
Âªg£t_t
 
__˘x
(
Âªgs
);

138 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

139 } 
	tmc⁄ãxt_t
;

142 
	suc⁄ãxt_t


144 
	muc_Êags
;

145 
uc⁄ãxt_t
 *
	muc_lök
;

146 
°ack_t
 
	muc_°ack
;

147 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

148 
sig£t_t
 
	muc_sigmask
;

149 
_libc_Â°©e
 
	m__Âªgs_mem
;

150 } 
	tuc⁄ãxt_t
;

155 
	tgªg_t
;

158 
	#__NGREG
 19

	)

159 #ifde‡
__USE_MISC


160 
	#NGREG
 
__NGREG


	)

164 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

166 #ifde‡
__USE_GNU


170 
	mREG_GS
 = 0,

171 
	#REG_GS
 
REG_GS


	)

172 
	mREG_FS
,

173 
	#REG_FS
 
REG_FS


	)

174 
	mREG_ES
,

175 
	#REG_ES
 
REG_ES


	)

176 
	mREG_DS
,

177 
	#REG_DS
 
REG_DS


	)

178 
	mREG_EDI
,

179 
	#REG_EDI
 
REG_EDI


	)

180 
	mREG_ESI
,

181 
	#REG_ESI
 
REG_ESI


	)

182 
	mREG_EBP
,

183 
	#REG_EBP
 
REG_EBP


	)

184 
	mREG_ESP
,

185 
	#REG_ESP
 
REG_ESP


	)

186 
	mREG_EBX
,

187 
	#REG_EBX
 
REG_EBX


	)

188 
	mREG_EDX
,

189 
	#REG_EDX
 
REG_EDX


	)

190 
	mREG_ECX
,

191 
	#REG_ECX
 
REG_ECX


	)

192 
	mREG_EAX
,

193 
	#REG_EAX
 
REG_EAX


	)

194 
	mREG_TRAPNO
,

195 
	#REG_TRAPNO
 
REG_TRAPNO


	)

196 
	mREG_ERR
,

197 
	#REG_ERR
 
REG_ERR


	)

198 
	mREG_EIP
,

199 
	#REG_EIP
 
REG_EIP


	)

200 
	mREG_CS
,

201 
	#REG_CS
 
REG_CS


	)

202 
	mREG_EFL
,

203 
	#REG_EFL
 
REG_EFL


	)

204 
	mREG_UESP
,

205 
	#REG_UESP
 
REG_UESP


	)

206 
	mREG_SS


207 
	#REG_SS
 
REG_SS


	)

212 
	s_libc_Âªg


214 
__˘x
(
signifiˇnd
)[4];

215 
__˘x
(
exp⁄ít
);

218 
	s_libc_Â°©e


220 
__˘x
(
cw
);

221 
__˘x
(
sw
);

222 
__˘x
(
èg
);

223 
__˘x
(
ùoff
);

224 
__˘x
(
cs£l
);

225 
__˘x
(
d©aoff
);

226 
__˘x
(
d©a£l
);

227 
_libc_Âªg
 
	m_°
[8];

228 
__˘x
(
°©us
);

232 
_libc_Â°©e
 *
	tÂªg£t_t
;

237 
gªg£t_t
 
__˘x
(
gªgs
);

240 
Âªg£t_t
 
__˘x
(
Âªgs
);

241 
__˘x
(
ﬁdmask
);

242 
__˘x
(
¸2
);

243 } 
	tmc⁄ãxt_t
;

246 
	suc⁄ãxt_t


248 
	muc_Êags
;

249 
uc⁄ãxt_t
 *
	muc_lök
;

250 
°ack_t
 
	muc_°ack
;

251 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

252 
sig£t_t
 
	muc_sigmask
;

253 
_libc_Â°©e
 
	m__Âªgs_mem
;

254 } 
	tuc⁄ãxt_t
;

258 #unde‡
__˘x


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #ifde‡
__USE_POSIX


128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #ifde‡
__USE_POSIX


149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

178 #ifde‡
__USE_MISC


181 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

187 
	#__i¶óp
(
yór
) \

188 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

191 #ifde‡
__USE_MISC


196 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

199 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

202 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

206 #ifde‡
__USE_POSIX199309


211 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

212 
time•ec
 *
__ªmaöög
);

216 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

219 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

222 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

223 
__THROW
;

225 #ifde‡
__USE_XOPEN2K


230 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

231 c⁄° 
time•ec
 *
__ªq
,

232 
time•ec
 *
__ªm
);

235 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

240 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

241 
sigevít
 *
__ª°ri˘
 
__evp
,

242 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

245 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

248 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

249 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

250 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

253 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

254 
__THROW
;

257 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

261 #ifde‡
__USE_ISOC11


263 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #ifde‡
__USE_XOPEN_EXTENDED


280 
gëd©e_îr
;

289 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

292 #ifde‡
__USE_GNU


303 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

304 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

307 
__END_DECLS


	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

17 
	~<bôs/ty≥s/__mb°©e_t.h
>

18 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


19 
	~<bôs/ty≥s/wöt_t.h
>

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


33 
	~<gc⁄v.h
>

36 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_öfo
 
	m__cd
;

40 
__gc⁄v_°ï_d©a
 
	m__d©a
;

41 } 
	m__comböed
;

42 } 
	t_G_ic⁄v_t
;

47 
	#_G_va_li°
 
__gnuc_va_li°


	)

49 
	#_G_HAVE_MMAP
 1

	)

50 
	#_G_HAVE_MREMAP
 1

	)

52 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

55 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

57 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

355 
	#__NR_gëøndom
 355

	)

356 
	#__NR_memfd_¸óã
 356

	)

357 
	#__NR_bpf
 357

	)

358 
	#__NR_execvót
 358

	)

359 
	#__NR_sockë
 359

	)

360 
	#__NR_sockë∑ú
 360

	)

361 
	#__NR_böd
 361

	)

362 
	#__NR_c⁄√˘
 362

	)

363 
	#__NR_li°í
 363

	)

364 
	#__NR_ac˚±4
 364

	)

365 
	#__NR_gësock›t
 365

	)

366 
	#__NR_£tsock›t
 366

	)

367 
	#__NR_gësock«me
 367

	)

368 
	#__NR_gë≥î«me
 368

	)

369 
	#__NR_£ndto
 369

	)

370 
	#__NR_£ndmsg
 370

	)

371 
	#__NR_ªcv‰om
 371

	)

372 
	#__NR_ªcvmsg
 372

	)

373 
	#__NR_shutdown
 373

	)

374 
	#__NR_u£rÁu…fd
 374

	)

375 
	#__NR_memb¨rõr
 375

	)

376 
	#__NR_mlock2
 376

	)

377 
	#__NR_c›y_fûe_ønge
 377

	)

378 
	#__NR_¥ódv2
 378

	)

379 
	#__NR_pwrôev2
 379

	)

380 
	#__NR_pkey_m¥Ÿe˘
 380

	)

381 
	#__NR_pkey_Æloc
 381

	)

382 
	#__NR_pkey_‰ì
 382

	)

383 
	#__NR_°©x
 383

	)

384 
	#__NR_¨ch_¥˘l
 384

	)

385 
	#__NR_io_pgëevíts
 385

	)

386 
	#__NR_r£q
 386

	)

387 
	#__NR_£mgë
 393

	)

388 
	#__NR_£m˘l
 394

	)

389 
	#__NR_shmgë
 395

	)

390 
	#__NR_shm˘l
 396

	)

391 
	#__NR_shm©
 397

	)

392 
	#__NR_shmdt
 398

	)

393 
	#__NR_msggë
 399

	)

394 
	#__NR_msg¢d
 400

	)

395 
	#__NR_msgrcv
 401

	)

396 
	#__NR_msg˘l
 402

	)

397 
	#__NR_˛ock_gëtime64
 403

	)

398 
	#__NR_˛ock_£âime64
 404

	)

399 
	#__NR_˛ock_adjtime64
 405

	)

400 
	#__NR_˛ock_gëªs_time64
 406

	)

401 
	#__NR_˛ock_«no¶ìp_time64
 407

	)

402 
	#__NR_timî_gëtime64
 408

	)

403 
	#__NR_timî_£âime64
 409

	)

404 
	#__NR_timîfd_gëtime64
 410

	)

405 
	#__NR_timîfd_£âime64
 411

	)

406 
	#__NR_utimíßt_time64
 412

	)

407 
	#__NR_p£À˘6_time64
 413

	)

408 
	#__NR_µﬁl_time64
 414

	)

409 
	#__NR_io_pgëevíts_time64
 416

	)

410 
	#__NR_ªcvmmsg_time64
 417

	)

411 
	#__NR_mq_timed£nd_time64
 418

	)

412 
	#__NR_mq_timedª˚ive_time64
 419

	)

413 
	#__NR_£mtimed›_time64
 420

	)

414 
	#__NR_π_sigtimedwaô_time64
 421

	)

415 
	#__NR_fuãx_time64
 422

	)

416 
	#__NR_sched_º_gë_öãrvÆ_time64
 423

	)

417 
	#__NR_pidfd_£nd_sig«l
 424

	)

418 
	#__NR_io_urög_£tup
 425

	)

419 
	#__NR_io_urög_íãr
 426

	)

420 
	#__NR_io_urög_ªgi°î
 427

	)

421 
	#__NR_›í_åì
 428

	)

422 
	#__NR_move_mou¡
 429

	)

423 
	#__NR_fs›í
 430

	)

424 
	#__NR_fsc⁄fig
 431

	)

425 
	#__NR_fsmou¡
 432

	)

426 
	#__NR_f•ick
 433

	)

427 
	#__NR_pidfd_›í
 434

	)

428 
	#__NR_˛⁄e3
 435

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

322 
	#__NR_gëøndom
 318

	)

323 
	#__NR_memfd_¸óã
 319

	)

324 
	#__NR_kexec_fûe_lﬂd
 320

	)

325 
	#__NR_bpf
 321

	)

326 
	#__NR_execvót
 322

	)

327 
	#__NR_u£rÁu…fd
 323

	)

328 
	#__NR_memb¨rõr
 324

	)

329 
	#__NR_mlock2
 325

	)

330 
	#__NR_c›y_fûe_ønge
 326

	)

331 
	#__NR_¥ódv2
 327

	)

332 
	#__NR_pwrôev2
 328

	)

333 
	#__NR_pkey_m¥Ÿe˘
 329

	)

334 
	#__NR_pkey_Æloc
 330

	)

335 
	#__NR_pkey_‰ì
 331

	)

336 
	#__NR_°©x
 332

	)

337 
	#__NR_io_pgëevíts
 333

	)

338 
	#__NR_r£q
 334

	)

339 
	#__NR_pidfd_£nd_sig«l
 424

	)

340 
	#__NR_io_urög_£tup
 425

	)

341 
	#__NR_io_urög_íãr
 426

	)

342 
	#__NR_io_urög_ªgi°î
 427

	)

343 
	#__NR_›í_åì
 428

	)

344 
	#__NR_move_mou¡
 429

	)

345 
	#__NR_fs›í
 430

	)

346 
	#__NR_fsc⁄fig
 431

	)

347 
	#__NR_fsmou¡
 432

	)

348 
	#__NR_f•ick
 433

	)

349 
	#__NR_pidfd_›í
 434

	)

350 
	#__NR_˛⁄e3
 435

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_gëøndom
 (
__X32_SYSCALL_BIT
 + 318)

	)

279 
	#__NR_memfd_¸óã
 (
__X32_SYSCALL_BIT
 + 319)

	)

280 
	#__NR_kexec_fûe_lﬂd
 (
__X32_SYSCALL_BIT
 + 320)

	)

281 
	#__NR_bpf
 (
__X32_SYSCALL_BIT
 + 321)

	)

282 
	#__NR_u£rÁu…fd
 (
__X32_SYSCALL_BIT
 + 323)

	)

283 
	#__NR_memb¨rõr
 (
__X32_SYSCALL_BIT
 + 324)

	)

284 
	#__NR_mlock2
 (
__X32_SYSCALL_BIT
 + 325)

	)

285 
	#__NR_c›y_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 326)

	)

286 
	#__NR_pkey_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 329)

	)

287 
	#__NR_pkey_Æloc
 (
__X32_SYSCALL_BIT
 + 330)

	)

288 
	#__NR_pkey_‰ì
 (
__X32_SYSCALL_BIT
 + 331)

	)

289 
	#__NR_°©x
 (
__X32_SYSCALL_BIT
 + 332)

	)

290 
	#__NR_io_pgëevíts
 (
__X32_SYSCALL_BIT
 + 333)

	)

291 
	#__NR_r£q
 (
__X32_SYSCALL_BIT
 + 334)

	)

292 
	#__NR_pidfd_£nd_sig«l
 (
__X32_SYSCALL_BIT
 + 424)

	)

293 
	#__NR_io_urög_£tup
 (
__X32_SYSCALL_BIT
 + 425)

	)

294 
	#__NR_io_urög_íãr
 (
__X32_SYSCALL_BIT
 + 426)

	)

295 
	#__NR_io_urög_ªgi°î
 (
__X32_SYSCALL_BIT
 + 427)

	)

296 
	#__NR_›í_åì
 (
__X32_SYSCALL_BIT
 + 428)

	)

297 
	#__NR_move_mou¡
 (
__X32_SYSCALL_BIT
 + 429)

	)

298 
	#__NR_fs›í
 (
__X32_SYSCALL_BIT
 + 430)

	)

299 
	#__NR_fsc⁄fig
 (
__X32_SYSCALL_BIT
 + 431)

	)

300 
	#__NR_fsmou¡
 (
__X32_SYSCALL_BIT
 + 432)

	)

301 
	#__NR_f•ick
 (
__X32_SYSCALL_BIT
 + 433)

	)

302 
	#__NR_pidfd_›í
 (
__X32_SYSCALL_BIT
 + 434)

	)

303 
	#__NR_˛⁄e3
 (
__X32_SYSCALL_BIT
 + 435)

	)

304 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

305 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

306 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

307 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

308 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

309 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

310 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

311 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

312 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

313 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

314 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

315 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

316 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

317 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

318 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

319 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

320 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

321 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

322 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

323 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

324 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

325 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

326 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

327 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

328 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

329 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

330 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

331 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

332 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

333 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

334 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

335 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

336 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

337 
	#__NR_execvót
 (
__X32_SYSCALL_BIT
 + 545)

	)

338 
	#__NR_¥ódv2
 (
__X32_SYSCALL_BIT
 + 546)

	)

339 
	#__NR_pwrôev2
 (
__X32_SYSCALL_BIT
 + 547)

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/ty≥s/°ru˘_iovec.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	~<löux/ÁŒoc.h
>

325 
	sfûe_h™dÀ


327 
	mh™dÀ_byãs
;

328 
	mh™dÀ_ty≥
;

330 
	mf_h™dÀ
[0];

334 
	#MAX_HANDLE_SZ
 128

	)

337 
	g__BEGIN_DECLS


339 #ifde‡
__USE_GNU


342 
__ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

343 
__THROW
;

350 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

351 
__Êags
);

358 
__ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

359 
size_t
 
__cou¡
, 
__Êags
);

365 
__ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

366 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

367 
__Êags
);

373 
__ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

374 
__Êags
);

380 #i‚de‡
__USE_FILE_OFFSET64


381 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

385 
__off64_t
 
__Àn
),

386 
ÁŒoˇã64
);

388 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

391 #ifde‡
__USE_LARGEFILE64


392 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

393 
__off64_t
 
__Àn
);

398 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

399 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

400 
__Êags
Ë
__THROW
;

406 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

407 
__Êags
);

411 
__END_DECLS


	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/long-double.h

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_SHARED_VALIDATE
 0x03

	)

50 
	#MAP_TYPE
 0x0‡

	)

54 
	#MAP_FIXED
 0x10

	)

55 #ifde‡
__USE_MISC


56 
	#MAP_FILE
 0

	)

57 #ifde‡
__MAP_ANONYMOUS


58 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

60 
	#MAP_ANONYMOUS
 0x20

	)

62 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

64 
	#MAP_HUGE_SHIFT
 26

	)

65 
	#MAP_HUGE_MASK
 0x3f

	)

69 
	#MS_ASYNC
 1

	)

70 
	#MS_SYNC
 4

	)

71 
	#MS_INVALIDATE
 2

	)

74 #ifde‡
__USE_GNU


75 
	#MREMAP_MAYMOVE
 1

	)

76 
	#MREMAP_FIXED
 2

	)

80 #ifde‡
__USE_MISC


81 
	#MADV_NORMAL
 0

	)

82 
	#MADV_RANDOM
 1

	)

83 
	#MADV_SEQUENTIAL
 2

	)

84 
	#MADV_WILLNEED
 3

	)

85 
	#MADV_DONTNEED
 4

	)

86 
	#MADV_FREE
 8

	)

87 
	#MADV_REMOVE
 9

	)

88 
	#MADV_DONTFORK
 10

	)

89 
	#MADV_DOFORK
 11

	)

90 
	#MADV_MERGEABLE
 12

	)

91 
	#MADV_UNMERGEABLE
 13

	)

92 
	#MADV_HUGEPAGE
 14

	)

93 
	#MADV_NOHUGEPAGE
 15

	)

94 
	#MADV_DONTDUMP
 16

	)

96 
	#MADV_DODUMP
 17

	)

97 
	#MADV_HWPOISON
 100

	)

101 #ifde‡
__USE_XOPEN2K


102 
	#POSIX_MADV_NORMAL
 0

	)

103 
	#POSIX_MADV_RANDOM
 1

	)

104 
	#POSIX_MADV_SEQUENTIAL
 2

	)

105 
	#POSIX_MADV_WILLNEED
 3

	)

106 
	#POSIX_MADV_DONTNEED
 4

	)

110 #i‚de‡
MCL_CURRENT


111 
	#MCL_CURRENT
 1

	)

112 
	#MCL_FUTURE
 2

	)

114 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/siginfo-arch.h

2 #i‚de‡
_BITS_SIGINFO_ARCH_H


3 
	#_BITS_SIGINFO_ARCH_H
 1

	)

5 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

12 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

13 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

14 
	#__SI_CLOCK_T
 
__sigchld_˛ock_t


	)

	@/usr/include/bits/siginfo-consts-arch.h

2 #i‚de‡
_BITS_SIGINFO_CONSTS_ARCH_H


3 
	#_BITS_SIGINFO_CONSTS_ARCH_H
 1

	)

	@/usr/include/bits/signum-generic.h

19 #i‚def 
_BITS_SIGNUM_GENERIC_H


20 
	#_BITS_SIGNUM_GENERIC_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

29 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

30 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

32 #ifde‡
__USE_XOPEN


33 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

48 
	#SIGINT
 2

	)

49 
	#SIGILL
 4

	)

50 
	#SIGABRT
 6

	)

51 
	#SIGFPE
 8

	)

52 
	#SIGSEGV
 11

	)

53 
	#SIGTERM
 15

	)

56 
	#SIGHUP
 1

	)

57 
	#SIGQUIT
 3

	)

58 
	#SIGTRAP
 5

	)

59 
	#SIGKILL
 9

	)

60 
	#SIGBUS
 10

	)

61 
	#SIGSYS
 12

	)

62 
	#SIGPIPE
 13

	)

63 
	#SIGALRM
 14

	)

66 
	#SIGURG
 16

	)

67 
	#SIGSTOP
 17

	)

68 
	#SIGTSTP
 18

	)

69 
	#SIGCONT
 19

	)

70 
	#SIGCHLD
 20

	)

71 
	#SIGTTIN
 21

	)

72 
	#SIGTTOU
 22

	)

73 
	#SIGPOLL
 23

	)

74 
	#SIGXCPU
 24

	)

75 
	#SIGXFSZ
 25

	)

76 
	#SIGVTALRM
 26

	)

77 
	#SIGPROF
 27

	)

78 
	#SIGUSR1
 30

	)

79 
	#SIGUSR2
 31

	)

83 
	#SIGWINCH
 28

	)

86 
	#SIGIO
 
SIGPOLL


	)

87 
	#SIGIOT
 
SIGABRT


	)

88 
	#SIGCLD
 
SIGCHLD


	)

96 
	#__SIGRTMIN
 32

	)

97 
	#__SIGRTMAX
 
__SIGRTMIN


	)

100 
	#_NSIG
 (
__SIGRTMAX
 + 1)

	)

	@/usr/include/bits/sysmacros.h

19 #i‚de‡
_BITS_SYSMACROS_H


20 
	#_BITS_SYSMACROS_H
 1

	)

22 #i‚de‡
_SYS_SYSMACROS_H


36 
	#__SYSMACROS_DECLARE_MAJOR
(
DECL_TEMPL
) \

37 
	`DECL_TEMPL
(, 
maj‹
, (
__dev_t
 
__dev
))

	)

39 
	#__SYSMACROS_DEFINE_MAJOR
(
DECL_TEMPL
) \

40 
	`__SYSMACROS_DECLARE_MAJOR
 (
DECL_TEMPL
) \

42 
__maj‹
; \

43 
__maj‹
 = ((
__dev
 & (
__dev_t
) 0x00000000000fff00u) >> 8); \

44 
__maj‹
 |((
__dev
 & (
__dev_t
) 0xfffff00000000000u) >> 32); \

45  
__maj‹
; \

46 }

	)

48 
	#__SYSMACROS_DECLARE_MINOR
(
DECL_TEMPL
) \

49 
	`DECL_TEMPL
(, 
mö‹
, (
__dev_t
 
__dev
))

	)

51 
	#__SYSMACROS_DEFINE_MINOR
(
DECL_TEMPL
) \

52 
	`__SYSMACROS_DECLARE_MINOR
 (
DECL_TEMPL
) \

54 
__mö‹
; \

55 
__mö‹
 = ((
__dev
 & (
__dev_t
) 0x00000000000000ffu) >> 0); \

56 
__mö‹
 |((
__dev
 & (
__dev_t
) 0x00000ffffff00000u) >> 12); \

57  
__mö‹
; \

58 }

	)

60 
	#__SYSMACROS_DECLARE_MAKEDEV
(
DECL_TEMPL
) \

61 
	`DECL_TEMPL
(
__dev_t
, 
makedev
, (
__maj‹
, 
__mö‹
))

	)

63 
	#__SYSMACROS_DEFINE_MAKEDEV
(
DECL_TEMPL
) \

64 
	`__SYSMACROS_DECLARE_MAKEDEV
 (
DECL_TEMPL
) \

66 
__dev_t
 
__dev
; \

67 
__dev
 = (((
__dev_t
Ë(
__maj‹
 & 0x00000fffu)) << 8); \

68 
__dev
 |(((
__dev_t
Ë(
__maj‹
 & 0xfffff000u)) << 32); \

69 
__dev
 |(((
__dev_t
Ë(
__mö‹
 & 0x000000ffu)) << 0); \

70 
__dev
 |(((
__dev_t
Ë(
__mö‹
 & 0xffffff00u)) << 12); \

71  
__dev
; \

72 }

	)

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

58 
	~<bôs/±hªadty≥s-¨ch.h
>

62 #i‡
__WORDSIZE
 == 64

63 
	s__±hªad_öã∫Æ_li°


65 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

66 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

67 } 
	t__±hªad_li°_t
;

69 
	s__±hªad_öã∫Æ_¶i°


71 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

72 } 
	t__±hªad_¶i°_t
;

76 #i‡
__PTHREAD_MUTEX_LOCK_ELISION


77 #i‡
__WORDSIZE
 == 64

78 
	#__PTHREAD_SPINS_DATA
 \

79 
__•ös
; \

80 
__ñisi⁄


	)

81 
	#__PTHREAD_SPINS
 0, 0

	)

83 
	#__PTHREAD_SPINS_DATA
 \

86 
__e•ös
; \

87 
__ìlisi⁄
; \

88 } 
__ñisi⁄_d©a


	)

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

90 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

91 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

94 
	#__PTHREAD_SPINS_DATA
 
__•ös


	)

96 
	#__PTHREAD_SPINS
 0

	)

99 
	s__±hªad_muãx_s


101 
__lock
 
	m__LOCK_ALIGNMENT
;

102 
	m__cou¡
;

103 
	m__ow√r
;

104 #i‡
__WORDSIZE
 == 64

105 
	m__nu£rs
;

129 
	m__köd
;

130 
	m__PTHREAD_COMPAT_PADDING_MID


131 #i‡
__WORDSIZE
 == 64

132 
	m__PTHREAD_SPINS_DATA
;

133 
__±hªad_li°_t
 
	m__li°
;

134 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

136 
	m__nu£rs
;

137 
__exãnsi⁄__
 union

139 
	m__PTHREAD_SPINS_DATA
;

140 
__±hªad_¶i°_t
 
	m__li°
;

143 
	m__PTHREAD_COMPAT_PADDING_END


149 
	s__±hªad_c⁄d_s


151 
__exãnsi⁄__
 union

153 
__exãnsi⁄__
 
	m__w£q
;

156 
	m__low
;

157 
	m__high
;

158 } 
	m__w£q32
;

160 
__exãnsi⁄__
 union

162 
__exãnsi⁄__
 
	m__g1_°¨t
;

165 
	m__low
;

166 
	m__high
;

167 } 
	m__g1_°¨t32
;

169 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

170 
	m__g_size
[2];

171 
	m__g1_‹ig_size
;

172 
	m__wªfs
;

173 
	m__g_sig«ls
[2];

	@/usr/include/bits/time.h

23 #i‚de‡
_BITS_TIME_H


24 
	#_BITS_TIME_H
 1

	)

26 
	~<bôs/ty≥s.h
>

34 
	#CLOCKS_PER_SEC
 ((
__˛ock_t
Ë1000000)

	)

36 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

37 && !
deföed
 
__USE_XOPEN2K


40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

60 
	#CLOCK_BOOTTIME
 7

	)

62 
	#CLOCK_REALTIME_ALARM
 8

	)

64 
	#CLOCK_BOOTTIME_ALARM
 9

	)

66 
	#CLOCK_TAI
 11

	)

69 
	#TIMER_ABSTIME
 1

	)

72 #ifde‡
__USE_GNU


73 
	~<bôs/timex.h
>

75 
__BEGIN_DECLS


78 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

80 
__END_DECLS


	@/usr/include/bits/types/__locale_t.h

20 #i‚de‡
_BITS_TYPES___LOCALE_T_H


21 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

42 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/bits/types/sigval_t.h

1 #i‚de‡
__sigvÆ_t_deföed


2 
	#__sigvÆ_t_deföed


	)

5 
	usigvÆ


7 
	msivÆ_öt
;

8 *
	msivÆ_±r
;

11 
sigvÆ
 
	tsigvÆ_t
;

	@/usr/include/bits/types/struct_itimerspec.h

1 #i‚de‡
__ôimî•ec_deföed


2 
	#__ôimî•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

8 
	sôimî•ec


10 
time•ec
 
	mô_öãrvÆ
;

11 
time•ec
 
	mô_vÆue
;

	@/usr/include/bits/types/struct_tm.h

1 #i‚de‡
__°ru˘_tm_deföed


2 
	#__°ru˘_tm_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
	stm


9 
	mtm_£c
;

10 
	mtm_mö
;

11 
	mtm_hour
;

12 
	mtm_mday
;

13 
	mtm_m⁄
;

14 
	mtm_yór
;

15 
	mtm_wday
;

16 
	mtm_yday
;

17 
	mtm_isd°
;

19 #ifdef 
__USE_MISC


20 
	mtm_gmtoff
;

21 c⁄° *
	mtm_z⁄e
;

23 
	m__tm_gmtoff
;

24 c⁄° *
	m__tm_z⁄e
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

88 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

92 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/sysinfo.h

2 #i‚de‡
_LINUX_SYSINFO_H


3 
	#_LINUX_SYSINFO_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#SI_LOAD_SHIFT
 16

	)

8 
	ssysöfo
 {

9 
__kî√l_l⁄g_t
 
	mu±ime
;

10 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

11 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

12 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

13 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

14 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

15 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

16 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

17 
__u16
 
	m¥ocs
;

18 
__u16
 
	m∑d
;

19 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

20 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

21 
__u32
 
	mmem_unô
;

22 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/types.h

2 #i‚de‡
_ASM_X86_TYPES_H


3 
	#_ASM_X86_TYPES_H


	)

5 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

29 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

31 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

32 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

33 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

34 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

35 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

38 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

39 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

40 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

45 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

46 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

47 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

48 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

51 
	#__PTHREAD_COMPAT_PADDING_MID


	)

52 
	#__PTHREAD_COMPAT_PADDING_END


	)

53 
	#__PTHREAD_MUTEX_LOCK_ELISION
 1

	)

55 
	#__LOCK_ALIGNMENT


	)

56 
	#__ONCE_ALIGNMENT


	)

58 
	s__±hªad_rwlock_¨ch_t


60 
	m__ªadîs
;

61 
	m__wrôîs
;

62 
	m__wΩha£_fuãx
;

63 
	m__wrôîs_fuãx
;

64 
	m__∑d3
;

65 
	m__∑d4
;

66 #ifde‡
__x86_64__


67 
	m__cur_wrôî
;

68 
	m__sh¨ed
;

69 sig√d 
	m__rwñisi⁄
;

70 #ifde‡ 
__ILP32__


71 
	m__∑d1
[3];

72 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

74 
	m__∑d1
[7];

75 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

77 
	m__∑d2
;

80 
	m__Êags
;

81 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

85 
	m__Êags
;

86 
	m__sh¨ed
;

87 sig√d 
	m__rwñisi⁄
;

88 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

89 
	m__∑d2
;

90 
	m__cur_wrôî
;

94 #i‚de‡
__x86_64__


96 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

22 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

26 
	stimex


28 
	mmodes
;

29 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

30 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

31 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

32 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

33 
	m°©us
;

34 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

35 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

36 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

37 
timevÆ
 
	mtime
;

38 
__sysˇŒ_¶⁄g_t
 
	mtick
;

39 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

40 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

41 
	mshi·
;

42 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

43 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

46 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

48 
	mèi
;

57 
	#ADJ_OFFSET
 0x0001

	)

58 
	#ADJ_FREQUENCY
 0x0002

	)

59 
	#ADJ_MAXERROR
 0x0004

	)

60 
	#ADJ_ESTERROR
 0x0008

	)

61 
	#ADJ_STATUS
 0x0010

	)

62 
	#ADJ_TIMECONST
 0x0020

	)

63 
	#ADJ_TAI
 0x0080

	)

64 
	#ADJ_SETOFFSET
 0x0100

	)

65 
	#ADJ_MICRO
 0x1000

	)

66 
	#ADJ_NANO
 0x2000

	)

67 
	#ADJ_TICK
 0x4000

	)

68 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

69 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

72 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

73 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

74 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

75 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

76 
	#MOD_STATUS
 
ADJ_STATUS


	)

77 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

78 
	#MOD_CLKB
 
ADJ_TICK


	)

79 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

80 
	#MOD_TAI
 
ADJ_TAI


	)

81 
	#MOD_MICRO
 
ADJ_MICRO


	)

82 
	#MOD_NANO
 
ADJ_NANO


	)

86 
	#STA_PLL
 0x0001

	)

87 
	#STA_PPSFREQ
 0x0002

	)

88 
	#STA_PPSTIME
 0x0004

	)

89 
	#STA_FLL
 0x0008

	)

91 
	#STA_INS
 0x0010

	)

92 
	#STA_DEL
 0x0020

	)

93 
	#STA_UNSYNC
 0x0040

	)

94 
	#STA_FREQHOLD
 0x0080

	)

96 
	#STA_PPSSIGNAL
 0x0100

	)

97 
	#STA_PPSJITTER
 0x0200

	)

98 
	#STA_PPSWANDER
 0x0400

	)

99 
	#STA_PPSERROR
 0x0800

	)

101 
	#STA_CLOCKERR
 0x1000

	)

102 
	#STA_NANO
 0x2000

	)

103 
	#STA_MODE
 0x4000

	)

104 
	#STA_CLK
 0x8000

	)

107 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

108 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/struct_iovec.h

19 #i‚de‡
__iovec_deföed


20 
	#__iovec_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
	siovec


28 *
	miov_ba£
;

29 
size_t
 
	miov_Àn
;

	@/usr/include/bits/types/wint_t.h

1 #i‚de‡
__wöt_t_deföed


2 
	#__wöt_t_deföed
 1

	)

9 #i‚de‡
_WINT_T


10 
	#_WINT_T
 1

	)

16 #i‚de‡
__WINT_TYPE__


17 
	#__WINT_TYPE__
 

	)

20 
__WINT_TYPE__
 
	twöt_t
;

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s/__mb°©e_t.h
>

27 
	~<bôs/ty≥s/wöt_t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/linux/falloc.h

2 #i‚de‡
_FALLOC_H_


3 
	#_FALLOC_H_


	)

5 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/errno.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_H


3 
	#_ASM_GENERIC_ERRNO_H


	)

5 
	~<asm-gíîic/î∫o-ba£.h
>

7 
	#EDEADLK
 35

	)

8 
	#ENAMETOOLONG
 36

	)

9 
	#ENOLCK
 37

	)

18 
	#ENOSYS
 38

	)

20 
	#ENOTEMPTY
 39

	)

21 
	#ELOOP
 40

	)

22 
	#EWOULDBLOCK
 
EAGAIN


	)

23 
	#ENOMSG
 42

	)

24 
	#EIDRM
 43

	)

25 
	#ECHRNG
 44

	)

26 
	#EL2NSYNC
 45

	)

27 
	#EL3HLT
 46

	)

28 
	#EL3RST
 47

	)

29 
	#ELNRNG
 48

	)

30 
	#EUNATCH
 49

	)

31 
	#ENOCSI
 50

	)

32 
	#EL2HLT
 51

	)

33 
	#EBADE
 52

	)

34 
	#EBADR
 53

	)

35 
	#EXFULL
 54

	)

36 
	#ENOANO
 55

	)

37 
	#EBADRQC
 56

	)

38 
	#EBADSLT
 57

	)

40 
	#EDEADLOCK
 
EDEADLK


	)

42 
	#EBFONT
 59

	)

43 
	#ENOSTR
 60

	)

44 
	#ENODATA
 61

	)

45 
	#ETIME
 62

	)

46 
	#ENOSR
 63

	)

47 
	#ENONET
 64

	)

48 
	#ENOPKG
 65

	)

49 
	#EREMOTE
 66

	)

50 
	#ENOLINK
 67

	)

51 
	#EADV
 68

	)

52 
	#ESRMNT
 69

	)

53 
	#ECOMM
 70

	)

54 
	#EPROTO
 71

	)

55 
	#EMULTIHOP
 72

	)

56 
	#EDOTDOT
 73

	)

57 
	#EBADMSG
 74

	)

58 
	#EOVERFLOW
 75

	)

59 
	#ENOTUNIQ
 76

	)

60 
	#EBADFD
 77

	)

61 
	#EREMCHG
 78

	)

62 
	#ELIBACC
 79

	)

63 
	#ELIBBAD
 80

	)

64 
	#ELIBSCN
 81

	)

65 
	#ELIBMAX
 82

	)

66 
	#ELIBEXEC
 83

	)

67 
	#EILSEQ
 84

	)

68 
	#ERESTART
 85

	)

69 
	#ESTRPIPE
 86

	)

70 
	#EUSERS
 87

	)

71 
	#ENOTSOCK
 88

	)

72 
	#EDESTADDRREQ
 89

	)

73 
	#EMSGSIZE
 90

	)

74 
	#EPROTOTYPE
 91

	)

75 
	#ENOPROTOOPT
 92

	)

76 
	#EPROTONOSUPPORT
 93

	)

77 
	#ESOCKTNOSUPPORT
 94

	)

78 
	#EOPNOTSUPP
 95

	)

79 
	#EPFNOSUPPORT
 96

	)

80 
	#EAFNOSUPPORT
 97

	)

81 
	#EADDRINUSE
 98

	)

82 
	#EADDRNOTAVAIL
 99

	)

83 
	#ENETDOWN
 100

	)

84 
	#ENETUNREACH
 101

	)

85 
	#ENETRESET
 102

	)

86 
	#ECONNABORTED
 103

	)

87 
	#ECONNRESET
 104

	)

88 
	#ENOBUFS
 105

	)

89 
	#EISCONN
 106

	)

90 
	#ENOTCONN
 107

	)

91 
	#ESHUTDOWN
 108

	)

92 
	#ETOOMANYREFS
 109

	)

93 
	#ETIMEDOUT
 110

	)

94 
	#ECONNREFUSED
 111

	)

95 
	#EHOSTDOWN
 112

	)

96 
	#EHOSTUNREACH
 113

	)

97 
	#EALREADY
 114

	)

98 
	#EINPROGRESS
 115

	)

99 
	#ESTALE
 116

	)

100 
	#EUCLEAN
 117

	)

101 
	#ENOTNAM
 118

	)

102 
	#ENAVAIL
 119

	)

103 
	#EISNAM
 120

	)

104 
	#EREMOTEIO
 121

	)

105 
	#EDQUOT
 122

	)

107 
	#ENOMEDIUM
 123

	)

108 
	#EMEDIUMTYPE
 124

	)

109 
	#ECANCELED
 125

	)

110 
	#ENOKEY
 126

	)

111 
	#EKEYEXPIRED
 127

	)

112 
	#EKEYREVOKED
 128

	)

113 
	#EKEYREJECTED
 129

	)

116 
	#EOWNERDEAD
 130

	)

117 
	#ENOTRECOVERABLE
 131

	)

119 
	#ERFKILL
 132

	)

121 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/types.h

2 #i‚de‡
_ASM_GENERIC_TYPES_H


3 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

2 #ifde‡
__i386__


3 
	~<asm/posix_ty≥s_32.h
>

4 #ñi‡
deföed
(
__ILP32__
)

5 
	~<asm/posix_ty≥s_x32.h
>

7 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/asm-generic/errno-base.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


3 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

5 
	#EPERM
 1

	)

6 
	#ENOENT
 2

	)

7 
	#ESRCH
 3

	)

8 
	#EINTR
 4

	)

9 
	#EIO
 5

	)

10 
	#ENXIO
 6

	)

11 
	#E2BIG
 7

	)

12 
	#ENOEXEC
 8

	)

13 
	#EBADF
 9

	)

14 
	#ECHILD
 10

	)

15 
	#EAGAIN
 11

	)

16 
	#ENOMEM
 12

	)

17 
	#EACCES
 13

	)

18 
	#EFAULT
 14

	)

19 
	#ENOTBLK
 15

	)

20 
	#EBUSY
 16

	)

21 
	#EEXIST
 17

	)

22 
	#EXDEV
 18

	)

23 
	#ENODEV
 19

	)

24 
	#ENOTDIR
 20

	)

25 
	#EISDIR
 21

	)

26 
	#EINVAL
 22

	)

27 
	#ENFILE
 23

	)

28 
	#EMFILE
 24

	)

29 
	#ENOTTY
 25

	)

30 
	#ETXTBSY
 26

	)

31 
	#EFBIG
 27

	)

32 
	#ENOSPC
 28

	)

33 
	#ESPIPE
 29

	)

34 
	#EROFS
 30

	)

35 
	#EMLINK
 31

	)

36 
	#EPIPE
 32

	)

37 
	#EDOM
 33

	)

38 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

9 #i‚de‡
_ASM_GENERIC_INT_LL64_H


10 
	#_ASM_GENERIC_INT_LL64_H


	)

12 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__ASSEMBLY__


20 
__sig√d__
 
	t__s8
;

21 
	t__u8
;

23 
__sig√d__
 
	t__s16
;

24 
	t__u16
;

26 
__sig√d__
 
	t__s32
;

27 
	t__u32
;

29 #ifde‡
__GNUC__


30 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

31 
__exãnsi⁄__
 
	t__u64
;

33 
__sig√d__
 
	t__s64
;

34 
	t__u64
;

	@/usr/include/asm/posix_types_32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


3 
	#_ASM_X86_POSIX_TYPES_32_H


	)

11 
	t__kî√l_mode_t
;

12 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

14 
	t__kî√l_ùc_pid_t
;

15 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

17 
	t__kî√l_uid_t
;

18 
	t__kî√l_gid_t
;

19 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

21 
	t__kî√l_ﬁd_dev_t
;

22 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

24 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


3 
	#_ASM_X86_POSIX_TYPES_64_H


	)

11 
	t__kî√l_ﬁd_uid_t
;

12 
	t__kî√l_ﬁd_gid_t
;

13 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

15 
	t__kî√l_ﬁd_dev_t
;

16 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

18 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


3 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

16 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

18 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm-generic/posix_types.h

2 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


3 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

5 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__kî√l_l⁄g_t


15 
	t__kî√l_l⁄g_t
;

16 
	t__kî√l_ul⁄g_t
;

19 #i‚de‡
__kî√l_öo_t


20 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

23 #i‚de‡
__kî√l_mode_t


24 
	t__kî√l_mode_t
;

27 #i‚de‡
__kî√l_pid_t


28 
	t__kî√l_pid_t
;

31 #i‚de‡
__kî√l_ùc_pid_t


32 
	t__kî√l_ùc_pid_t
;

35 #i‚de‡
__kî√l_uid_t


36 
	t__kî√l_uid_t
;

37 
	t__kî√l_gid_t
;

40 #i‚de‡
__kî√l_su£c⁄ds_t


41 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

44 #i‚de‡
__kî√l_daddr_t


45 
	t__kî√l_daddr_t
;

48 #i‚de‡
__kî√l_uid32_t


49 
	t__kî√l_uid32_t
;

50 
	t__kî√l_gid32_t
;

53 #i‚de‡
__kî√l_ﬁd_uid_t


54 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

55 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

58 #i‚de‡
__kî√l_ﬁd_dev_t


59 
	t__kî√l_ﬁd_dev_t
;

66 #i‚de‡
__kî√l_size_t


67 #i‡
__BITS_PER_LONG
 != 64

68 
	t__kî√l_size_t
;

69 
	t__kî√l_ssize_t
;

70 
	t__kî√l_±rdiff_t
;

72 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

74 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

78 #i‚de‡
__kî√l_fsid_t


80 
	mvÆ
[2];

81 } 
	t__kî√l_fsid_t
;

87 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

88 
	t__kî√l_loff_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

90 
	t__kî√l_time64_t
;

91 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

92 
	t__kî√l_timî_t
;

93 
	t__kî√l_˛ockid_t
;

94 * 
	t__kî√l_ˇddr_t
;

95 
	t__kî√l_uid16_t
;

96 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

2 #i‚de‡
__ASM_X86_BITSPERLONG_H


3 
	#__ASM_X86_BITSPERLONG_H


	)

5 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

6 
	#__BITS_PER_LONG
 64

	)

8 
	#__BITS_PER_LONG
 32

	)

11 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

2 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


3 
	#__ASM_GENERIC_BITS_PER_LONG


	)

12 #i‚de‡
__BITS_PER_LONG


13 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
189
5211
abs.c
blas_l1_thread.c
blas_server.c
blas_server_omp.c
blas_server_win32.c
divtable.c
dynamic.c
dynamic_arm64.c
dynamic_mips64.c
dynamic_power.c
dynamic_zarch.c
init.c
lamc3.c
lamch.c
lsame.c
memory.c
memory_qalloc.c
openblas_env.c
openblas_error_handle.c
openblas_get_config.c
openblas_get_num_procs.c
openblas_get_num_threads.c
openblas_get_parallel.c
openblas_set_num_threads.c
parameter.c
profile.c
xerbla.c
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/linux/unistd.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/auxv.h
/usr/include/sys/ipc.h
/usr/include/sys/mman.h
/usr/include/sys/resource.h
/usr/include/sys/shm.h
/usr/include/sys/syscall.h
/usr/include/sys/sysctl.h
/usr/include/sys/sysinfo.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/cpu-set.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/hwcap.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/mman.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/sigevent-consts.h
/usr/include/bits/siginfo-consts.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/ss_flags.h
/usr/include/bits/stat.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/sysctl.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/sig_atomic_t.h
/usr/include/bits/types/sigevent_t.h
/usr/include/bits/types/siginfo_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/stack_t.h
/usr/include/bits/types/struct_rusage.h
/usr/include/bits/types/struct_sigstack.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/elf.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/libio.h
/usr/include/linux/kernel.h
/usr/include/linux/sysctl.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/_G_config.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/getopt_core.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/long-double.h
/usr/include/bits/mman-linux.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/siginfo-arch.h
/usr/include/bits/siginfo-consts-arch.h
/usr/include/bits/signum-generic.h
/usr/include/bits/sysmacros.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/time.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__sigset_t.h
/usr/include/bits/types/sigval_t.h
/usr/include/bits/types/struct_itimerspec.h
/usr/include/bits/types/struct_tm.h
/usr/include/bits/typesizes.h
/usr/include/bits/uintn-identity.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/errno.h
/usr/include/linux/sysinfo.h
/usr/include/linux/types.h
/usr/include/stdint.h
/usr/include/asm/errno.h
/usr/include/asm/types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/timex.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/struct_iovec.h
/usr/include/bits/types/wint_t.h
/usr/include/bits/wchar.h
/usr/include/gconv.h
/usr/include/linux/falloc.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/linux/stddef.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
